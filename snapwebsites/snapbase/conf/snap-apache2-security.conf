# Snap! Websites default security setup
#
# This file is very much based on the security.conf file that comes with
# apache2, however, the default is not PCI compliant so we tweak them
# and enable our version instead of the default (the default is
# unmodified and remains disabled...)
#
# Please see the the original for more information:
#   /etc/apache2/conf-available/security.conf
#


# Remove obvious ways of giving away our version/environment
#
ServerSignature Off
ServerTokens ProductOnly


# Never allow trace mode
#
TraceEnable Off


# Increase log level to "notice", the default is "warn" which does not
# give you much information is something serious happens
#
LogLevel notice


# Prevent requests with too many fields, because it should never happen.
#
# We do not change the default limit on the length of a line or a field,
# because we want to support very long URIs in Snap!
#
# Note that this means we can get a single request that represents 1Mb
# (if we had our own HTTP server, we could limit this much more by
# allowing various length depending on the header...)
#
# We put a hard limit to the body to about 10mb. Again that could be
# a lot better if we were to have a special HTTP header that our server
# can intercept when a reply goes out for a certain page. Then the frontend
# would know to expect a POST and of which size (i.e. the header can inform
# the frontend about all of that). That way we can have the editor in
# control because it knows whether we have small widgets only (64Kb), if
# we have a text area (1Mb) or a dropdown area to upload files (10Mb).
# And if there are no reasons for a POST, 0Kb and thus just block any
# such requests and go further by blocking the IP address of the offender.
#
#LimitRequestLine 512
LimitRequestFields 100
#LimitRequestFieldSize 1024
LimitRequestBody 10000000


# Please do not use .htaccess, it makes it complicated to know where
# each option is located. You may instead use <Directory> and <Location>
# options in your main configuration file(s)
#
# We do a "AllowOverride None" by default, but if you are to change
# the default for one of your websites, know that is not considered
# secure (in part because it is difficult to audit.)
#
AccessFileName .ht-Please-Do-Not-Use-Dot-Access-Files-Anywhere


# Default options to None.
# The system defaults is "Options FollowSymLinks".
#
<Directory />
  Options None
</Directory>


# By default the apache2.conf allows one to browse the entire set of share
# folders where you have documentation... Although it is likely safe to
# browse such, since we turn off the autoindex feature, it is probably
# useless anyway.
#
# Also a good reason for not keeping it ON is that gives away what software
# is installed on your server. ALL OF IT, INCLUDING ALL VERSIONS.
#
<Directory /usr/share>
  Require all denied
</Directory>


# For some reasons, apache2.conf makes the whole /var/www/* indexable!
# Although we remove the autoindex module, it is safer not to have it
# here. We also remove the default "FollowSymLinks" for extra safety.
#
<Directory /var/www/>
  Options None

  # Supposedly Prevent any method other than those listed here
  # (if snap wants more, then we can allow them in that Apache2
  # configuration.)
  #
  # Note that snap.cgi also verifies that only allowed methods are used.
  # And the <Limit> and <LimitExcept> automatically receive the GET,
  # HEAD, and OPTIONS methods no matter what.
  #
  # Finally, this extension returns a 403 instead of the expected 405.
  # So we have them commented out. snap.cgi and snapmanager.cgi take care
  # of that and since we prevent pretty much all other forms and
  # interactions we should be just fine.
  #
  #<Limit GET POST HEAD OPTIONS>
  #  Require all granted
  #</Limit>
  #<LimitExcept GET POST HEAD OPTIONS>
  #  Require all denied
  #</LimitExcept>
</Directory>


# The alias module adds the /usr/share/apache2/icons/ path
# Those images are used by various other modules and are safe
# in themselves, but they can often be used to determine the
# version of Apache that you are using.
#
# If you would like to reuse the /icons/ folder on your website(s)
# then you will want to remove (comment out) the Alias command
# in the /etc/apache2/conf-available/alias.conf file.
#
<Directory /usr/share/apache2/icons/>
  Require all denied
</Directory>


# Prevent any special index file (i.e. PHP, Perl, etc.) from being loaded
# in an automated way.
#
# WARNING: the order in which .conf files get loaded may prevent this one
#          from working properly...
#
<IfModule mod_dir.c>
  DirectoryIndex index.html index.htm
</IfModule>


# Deny access to all Unix hidden files (note that include "." and ".."
# but that should have no side effects.)
#
<FilesMatch "^\.">
  Require all denied
</FilesMatch>


# vim: syntax=apache ts=4 sw=4 sts=4 sr noet
