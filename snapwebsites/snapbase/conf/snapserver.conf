# Snap! Server configuration file
#
# The file is a basic list of variable name = value
# Comments start with a # character, must be the first character after spaces
# Empty lines are ignored


# listen=<IP address>:<port>
#
# The IP and port the snapserver will listen on.
#
# It should be local if snap.cgi is running on the same computer
# (i.e. Apache + snap.cgi + snapserver all on a frontend computer.)
#
# It should be a private address if the snap.cgi runs on a separate
# computer.
#
# That information should match the snapserver=... variable defined
# in the snapcgi.conf file of the computer that runs snap.cgi.
#
# WARNING: The data travelling between snap.cgi and snapserver is
#          NOT encrypted. So only trusted connections can be used.
#          You may setup a VPN to be safe (see tinc for example.)
#
# Default: 127.0.0.1:4004
listen=127.0.0.1:4004


# ssl_certificate=<path to .crt file>
#
# The path to a certificate (X509) file used to encrypt the connections
# between snap.cgi and snapserver processes.
#
# By default this variable is defined and a certificate is created by
# the postinst script using the following command:
#
#    openssl req \
#       -newkey rsa:2048 -nodes -keyout snapserver.key \
#       -x509 -days 3650 -out snapserver.crt
#
# IMPORTANT: when the listen address is 127.0.0.1, the certificate is ignored.
#
# Default: /etc/snapwebsites/ssl/snapserver.crt
ssl_certificate=/etc/snapwebsites/ssl/snapserver.crt


# ssl_private_key=<path to .key file>
#
# The path to a private key file used to encrypt the connections
# between snap.cgi and snapserver processes.
#
# By default this variable is defined and a certificate is created by
# the postinst script.
#
# See the ssl_certificate parameter for additional details.
#
# IMPORTANT: when the listen address is 127.0.0.1, the key is ignored.
#
# Default: /etc/snapwebsites/ssl/snapserver.key
ssl_private_key=/etc/snapwebsites/ssl/snapserver.key


# debug=on
#
# Whether you want to turn on debug mode (variable is set) of the server.
# The default is off (variable undefined). This is exactly the same as
# using the --debug command line option. This is useful as the command
# line option is difficult to deal with when working with systemd.
#
# Default: <undefined>
#debug=on


# log_server=<path to log properties>
#
# If you are using the log server, then this can be used to get the logs
# sent to that server. If this variable is defined, then it gets used
# by both, snapserver and snapbackend.
#
# If this variable is not defined (default), then the log_config
# parameters is used instead.
#
# Default: <not defined>
#log_server=/etc/snapwebsites/logger/logserver.properties


# log_config=<path to log properties>
#
# This variable defines the path to a file with properties that the
# log4cplus library reads to handle logging of the snapserver and
# snapbackend daemons.
#
# Default: /etc/snapwebsites/logger/log.properties
log_config=/etc/snapwebsites/logger/log.properties


# run_path=<path>
#
# Define the path where runtime data are saved. In most cases, this is a
# temporary memory directory (RAM disk), so it is only used for small
# amounts of data such as a file to save a PID.
#
# The path is defined in the snapcommunicator tool to make sure it can
# be created and setup properly:
#
#     mkdir <path>
#     chown snapwebsites:snapwebsites <path>
#
# because other daemon may not have enough permissions to do so.
#
# Default: /run/snapwebsites
#run_path=/run/snapwebsites


# lock_path=<path to lock directory>
#
# The lock directory is used to create various lock files. At the moment
# snapmanagerdaemon makes use of a lock to make sure it runs a single
# instance of its upgraded at a time. The second instance would fail
# since the apt-get environment has its own lock, but the second instance
# has a chance to break the already running upgrade too, which could cause
# some annoying installation problems (that the user would have to fix
# manually.)
#
# Default: /run/lock/snapwebsites
lock_path=/run/lock/snapwebsites


# lock_obtension_duration=<number of seconds to wait>
#
# The lock obtension duration is the number of seconds used to wait while
# trying to obtained a new lock. By default this is 5 seconds. If you have
# a slow system, it may be required to increase this amount. Note that this
# is rarely a good idea since that's the number of seconds the client will
# have to wait.
#
# Default: <none>
#lock_obtension_duration=


# user=<unix user name>
#
# The name of the user used by the snapwebsites running environment.
#
# This information is used to setup the user and group of various
# directories and files such as /run/snapwebsites which is re-created
# on each reboot.
#
# Then the snapcommunicator becomes that user for security reasons.
#
# Default: snapwebsites
user=snapwebsites


# group=<unix group name>
#
# The name of the group used by the snapwebsites running environment.
#
# This information is used to setup the user and group of various
# directories and files such as /run/snapwebsites which is re-created
# on each reboot.
#
# Then the snapcommunicator becomes part of that group for security
# reasons.
#
# Default: snapwebsites
group=snapwebsites


# qs_action=<name>
#
# The name of the query string variable used to define the action.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: a
#qs_action=a


# qs_hit=<name>
#
# The name of the query string variable used to define the type of hit.
#
# At this time we support two types of hit:
#
# . "user" -- a hit from a regular user, this is the default when the
#             hit variable is not specified
# . "transparent" -- a hit used to test whether a session timed out or
#                    not; in this case the session timeout date does not
#                    get updated
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: hit
#qs_hit=hit


# qs_language=<name>
#
# The name of the query string variable used to define the language of
# the page being loaded. This parameter overrides the language the
# browser defines, that way a user can see a page in any language he
# wants.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: lang
qs_language=lang


# qs_working_branch=<name>
#
# Name of the query string variable used to know whether the working
# branch should be shown instead of the current display branch. Note
# that all users do not have access to the currently working branch.
#
# The variable can be set to any value at this point. If set, then
# the working branch is shown. For example:
#
#    http://snap.website/?working_branch=1
#
# If you want to display a specific branch, instead, then use the
# variable defined by qs_branch.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: working_branch
qs_working_branch=working_branch


# qs_branch=<name>
#
# The name of the query string variable used to define the exact
# branch of a page to display.
#
# All users do not have access to all branches.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: branch
qs_branch=branch


# qs_revision=<name>
#
# The name of the query string variable used to define the exact
# revision of a page to display.
#
# All users do not have access to all revisions.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: revision
qs_revision=revision


# qs_rev=<name>
#
# The name of the query string variable used to define the branch
# and revision in one go.
#
# IMPORTANT NOTE:
# If either of the qs_branch or qs_revision variables is defined in
# a query string, then the qs_revision variable is ignored.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: rev
qs_rev=rev


# qs_layout::layout=<name>
#
# The name of a query string used to define the name of the layout
# to use to display that page. By default, the layout defined for
# that page is used.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: layout
qs_layout::layout=layout


# qs_layout::theme=<name>
#
# The name of a query string used to define the name of the theme
# to use to display that page. By default, the theme defined for
# that page is used.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: theme
qs_layout::theme=theme


# qs_install_layout=<name>
#
# The name of a query string variable to check for the list of layout
# names to install on a website.
#
# It may be viewed as a security risk, so it is possible to turn this
# feature off by setting the variables to nothing. Since only the
# `snapinstallwebsites` command line accesses this variable and
# installs websites, it should be rather safe, though.
#
# Another way to protect your site is to change the default name to
# your own fancy query string variable name. It won't be 100% secure
# but it is very unlikely going to cause a problem.
#
# Default: install-layouts
qs_layout::install=install-layouts


# layout::layout=<name>
#
# When trying to determine the name of a layout to use to display a
# page, the system may come empty handed. As a last resort, the
# system makes use of the "default" layout, which is completely bare.
#
# This option can be used to specify a different layout as the default
# fallback. It is mainly useful at the time you start installing a
# website. After that, you most certainly will never have to fall
# back to the default layout since one definition in the main page
# type (categorization) is enough to ensure proper theming of an
# entire website.
#
# This value must be a double quoted string. However, it cannot be
# JavaScript code.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: "default"
#layout::layout="default"


# layout::theme=<name>
#
# When trying to determine the name of a theme to use to display a
# page, the system may come empty handed. As a last resort, the
# system makes use of the "default" theme, which is completely bare.
#
# This option can be used to specify a different theme as the default
# fallback. It is mainly useful at the time you start installing a
# website. After that, you most certainly will never have to fall
# back to the default theme since one definition in the main page
# type (categorization) is enough to ensure proper theming of an
# entire website.
#
# This value must be a double quoted string. However, it cannot be
# JavaScript code.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: "default"
#layout::theme="default"


# editor::layout=<name>
#
# When displaying a page that represents an editor form, one generally
# defines the layout of that form. This variable can be used in a
# situation where a page supports more than one editor layout.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: "default"
#editor::layout="default"


# list::looptimeout
#
# Defines how long the outter loop checking for work on lists can run in
# seconds.
#
# This amount should remain small so time sharing between lists of various
# websites can continue to happen. If you have a single website, you can
# increase this amount quite a lot. However, although time sharing is not
# required, remember that the work will be in done in order and new items
# will be ignored. So if you want to handle new items as they arrive, not
# looping for too long is probably a good idea, still.
#
# Default: 10
#list::looptimeout=10


# list::innerlooptimeout
#
# Define how long the inner loop checking for work on lists can run in
# seconds.
#
# This amount should remain small so time sharing between lists of various
# websites can continue to happen. If you have a single website, though,
# you can increase this amount quite a lot to work on all the items (the
# list reads up to 100 at a time) in memory before leaving the process and
# restarting immediately (assuming another item has to be worked on immediately
# it would kill the child process and restart it pretty much immediately...)
#
# Default: 60
#list::innerlooptimeout=60


# plugins_path=<path>:<path>:...
#
# Define a folder where the plugins were installed. You should never
# have to change that path unless you are a programmer or maintainer
# and are dealing with where the plugins get installed.
#
# You may include multiple paths by separating them by a colon.
#
# Default: /usr/lib/snapwebsites/plugins
plugins_path=/usr/lib/snapwebsites/plugins


# table_schema_path=<path>:<path>:...
#
# Define one or more folders where the system will be looking for XML
# table definitions.
#
# You may include multiple paths by separating them by a colon.
#
# Default: /usr/lib/snapwebsites/tables
#table_schema_path=/usr/lib/snapwebsites/tables


# default_plugins=<name>,<name>,...
#
# The list of plugins to load by default until a site defines its own list
# at which point this default list is ignored.
#
# This is particularly useful if you want to offer more than the list of
# core plugins on a new website installation. However, you have to be
# careful as adding too many plugin names to this list may prevent the
# installation of a new website and corrupt your Cassandra cluster. The
# amount of data that you can send to your Cassandra cluster in one go is
# directly related to the number of plugins you can offer using this
# variable.
#
# Names are comma separated. Spaces are allowed and ignored.
#
# Note: the default is '<none>' which represents the list of core
#       plugins.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: <none>
#default_plugins=


# data_path=<path to persistent data directory>
#
# Path to where the server can save data (counters, local locks, etc.)
# This directory is expected to be persistent between reboot.
#
# Default: /var/lib/snapwebsites
data_path=/var/lib/snapwebsites


# log_path=<path to log directory>
#
# The path to the log directory where any plugin/tool can log
# information in regard to snapwebsites.
#
# Note: Most processes just use log4cplus which does not take this
# path in account. This is generally used whenever an external tool
# is run and that external tool is not using log4cplus. For example,
# the antivirus tool runs an external tool and asks it to write the
# result in a file within the directory defined by this log_path
# parameter.
#
# Default: /var/log/snapwebsites
log_path=/var/log/snapwebsites


# csspp_scripts=<path>:<path>:...
#
# The path to CSS Preprocessor scripts.
#
# 99.9% of the time, you do not need to change this path.
# If you add your own SCSS scripts, you may add the path to those.
# If you are a developer, change this path to your development install folder.
# You may enter more than one path by separating each path by a colon (:).
#
# Default: <none>
#csspp_scripts=/usr/lib/csspp/scripts


# show_redirects=<name>,<name>,...
#
# The following variable is used to change the default behavior of
# the redirect function in Snap! Websites. By default the redirect uses
# an HTTP header with a Location: entry specifying the new URI where
# the user should go.
#
# The variable understands the following values:
#
#   include-body    whether the body tag should include information about
#                   the redirect; otherwise it is completely empty
#
#   refresh-only    do not include a "Location: ..." header field, only
#                   expect the refresh meta tag to be used; otherwise
#                   a small client side JavaScript is used
#
#   no-refresh      avoid the refresh meta tag altogether since it is
#                   considered deprecated
#
#   one-minute      wait one minute before executing the refresh
#
# The default shown bellow can be used to see the refresh appear
# in your browser for one minute:
#
# Default: <none>  (which means do an HTTP redirect as normally expected)
#show_redirects=include-body,refresh-only,one-minute


# list_journal_path=<path-to-folder>
#
# This path is used by the list plugin to handle its journaling. We
# were using Cassandra before, but it's a total bottleneck for a
# pure journaling environment, so instead we changed that to our
# own implementation.
#
# The directory must be read/write accessible by the backend ("snapwebsites")
# and the Apache2 user ("www-data" under Ubuntu).
#
# Default: /var/lib/snapwebsites/list
#list_journal_path=/var/lib/snapwebsites/list


# vim: wrap
