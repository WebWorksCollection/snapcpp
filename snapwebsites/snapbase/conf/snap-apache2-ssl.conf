# Some additional settings to strengthen the SSL setup in Apache2
<IfModule mod_ssl.c>

  # Make sure SSL is enabled
  #
  SSLEngine on


  # Force the server order so we know the most secure cipher is going to be
  # used by the client
  #
  SSLHonorCipherOrder on


  # Compression is dangerous (it has security issues, somehow)
  #
  SSLCompression off


  # Session tickets are a problem with Forward Secrecy (at least if you
  # do not restart Apache2 once a day or more) so we prefer to have that off
  #
  SSLSessionTickets off


  # Make sure that SSLRequire and SSLRequireSSL have priority over  Satisfy
  # (the default is that Satisfy has priority!)
  #
  # At times, administrators add +StdEnvVars so environment variables
  # get passed on. At this time, though, snap does not make use of those.
  #
  SSLOptions +StrictRequire


  # We do not use Stapling because most SSL Certificates make use of an
  # intermediate bundle which means it renders the stapling useless.
  # (See RFC 6066 for details)
  #
  # Also, as a side note, `mod_socache_shmcb` is required for the cache
  # command defined below.
  #
  #SSLUseStaping On
  #SSLStaplingCache "shmcb:/run/apache2/ssl_stapling_cache.shm(512000)"

  # Make sure that SSLv2 and SSLv3 do not get used
  # (i.e. these are affected by PODDLE)
  #
  SSLProtocol all -SSLv2 -SSLv3


  # We currently offer three lists of cipher suites. From the strongest
  # (only modern clients will be able to connect) to the weakest (most
  # everything will be able to connect).
  #
  # In all cases, though, IE6 is not allowed. In the strongest mode, IE10
  # and old cannot connect. In the medium setup, Java 6.x and older cannot
  # connect.
  #


  # Mozilla.org offers a strong list of ciphers for Apache and other servers
  # See: https://mozilla.github.io/server-side-tls/ssl-config-generator/
  # This one will prevent many older clients (i.e. Android 4.3, IE 10, etc.)
  # We set this one up by default, but feel free to comment this one and
  # uncomment another as defined below.
  #
  SSLCipherSuite "ECDHE-ECDSA-AES256-GCM-SHA384 \
ECDHE-RSA-AES256-GCM-SHA384 \
ECDHE-ECDSA-CHACHA20-POLY1305 \
ECDHE-RSA-CHACHA20-POLY1305 \
ECDHE-ECDSA-AES128-GCM-SHA256 \
ECDHE-RSA-AES128-GCM-SHA256 \
ECDHE-ECDSA-AES256-SHA384 \
ECDHE-RSA-AES256-SHA384 \
ECDHE-ECDSA-AES128-SHA256 \
ECDHE-RSA-AES128-SHA256"

  # Letsencrypt.org version
  #
  #SSLCipherSuite "ECDHE-ECDSA-AES256-GCM-SHA384 \
ECDHE-ECDSA-AES256-SHA384 \
ECDHE-RSA-AES256-GCM-SHA384 \
ECDHE-ECDSA-AES128-GCM-SHA256 \
ECDHE-RSA-AES128-GCM-SHA256 \
DHE-RSA-AES128-GCM-SHA256 \
DHE-DSS-AES128-GCM-SHA256 \
ECDHE-ECDSA-AES128-SHA256 \
ECDHE-ECDSA-AES256-SHA \
ECDHE-ECDSA-AES128-SHA \
kEDH+AESGCM \
ECDHE-RSA-AES256-SHA384 \
ECDHE-RSA-AES128-SHA256 \
ECDHE-RSA-AES256-SHA \
ECDHE-RSA-AES128-SHA \
DHE-RSA-AES256-SHA256 \
DHE-DSS-AES256-SHA \
DHE-RSA-AES256-SHA \
DHE-RSA-AES128-SHA256 \
DHE-DSS-AES128-SHA256 \
DHE-RSA-AES128-SHA \
AES256-GCM-SHA384 \
AES128-GCM-SHA256 \
AES128-SHA256 \
AES256-SHA256 \
AES128-SHA \
AES256-SHA \
AES \
CAMELLIA \
DES-CBC3-SHA \
!aNULL \
!eNULL \
!EXPORT \
!DES \
!RC4 \
!MD5 \
!PSK \
!aECDH \
!EDH-DSS-DES-CBC3-SHA \
!EDH-RSA-DES-CBC3-SHA \
!KRB5-DES-CBC3-SHA"

  # m2osw.com version (from various places and was PCI compliant too,
  # less restrictive)
  #
  # This one will allow a few more devices than letsencrypt.org
  #
  #SSLCipherSuite "HIGH:MEDIUM:!ADH:!MD5:!aNULL:!eNULL:!LOW:!EXP:!RC4"

</IfModule>

# vim: syntax=apache wrap
