// Snap Manager Daemon -- a snapmanager to run administrative commands on any computer
// Copyright (C) 2016  Made to Order Software Corp.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#pragma once

#include "advgetopt/advgetopt.h"
#include "snapwebsites/addr.h"
#include "snapwebsites/log.h"
#include "snapwebsites/snap_exception.h"
#include "snapwebsites/tcp_client_server.h"
#include "snapwebsites/snapwebsites.h"

#include <string>
#include <iostream>

namespace snap_manager
{

// WARNING: the daemon currently shares its version with the CGI tool
#define SNAPMANAGERDAEMON_VERSION_MAJOR   @SNAPMANAGERCGI_VERSION_MAJOR@
#define SNAPMANAGERDAEMON_VERSION_MINOR   @SNAPMANAGERCGI_VERSION_MINOR@
#define SNAPMANAGERDAEMON_VERSION_PATCH   @SNAPMANAGERCGI_VERSION_PATCH@
#define SNAPMANAGERDAEMON_VERSION_STRING  "@SNAPMANAGERCGI_VERSION_MAJOR@.@SNAPMANAGERCGI_VERSION_MINOR@.@SNAPMANAGERCGI_VERSION_PATCH@"

class manager_daemon;

class manager_messenger
        : public snap::snap_communicator::snap_tcp_client_permanent_message_connection
{
public:
    typedef std::shared_ptr<manager_messenger>    pointer_t;

                                manager_messenger(manager_daemon * md, std::string const & addr, int port);

    // snap::snap_communicator::snap_tcp_client_permanent_message_connection implementation
    virtual void                process_message(snap::snap_communicator_message const & message) override;
    virtual void                process_connection_failed(std::string const & error_message) override;
    virtual void                process_connected() override;

protected:
    // these objects are owned by the manager_daemon objects so no need
    // for a smart pointer (and it would create a loop unless we use a weakptr)
    manager_daemon *            f_manager = nullptr;
};



class manager_daemon;
class manager_status;


class status_connection
        : public snap::snap_communicator::snap_inter_thread_message_connection
{
public:
    typedef std::shared_ptr<status_connection>   pointer_t;

                                status_connection(manager_daemon * md);

    void                        set_thread_b(manager_status * ms);

    // snap::snap_communicator::snap_pipe_message_connection implementation
    virtual void                process_message_a(snap::snap_communicator_message const & message) override;
    virtual void                process_message_b(snap::snap_communicator_message const & message) override;

private:
    manager_daemon *            f_manager_daemon;
    manager_status *            f_manager_status;
};



class manager_status
    : public snap::snap_thread::snap_runner
{
public:
                                manager_status(status_connection::pointer_t sc);

    virtual void                run();

    QString                     get_server_status() const;

    void                        process_message(snap::snap_communicator_message const & message);

private:
    status_connection::pointer_t    f_status_connection;
    QString                         f_server_status;
    bool                            f_running = true;
};




class manager_daemon
{
public:
                                manager_daemon( int argc, char * argv[] );
    virtual                     ~manager_daemon();

    int                         run();
    void                        process_message(snap::snap_communicator_message const & message);

private:
    typedef std::map<QString, QString>      status_t;

    static void                 sighandler( int sig );
    void                        stop(bool quitting);

    // the MANAGE command and all of its sub-functions
    void                        manage(snap::snap_communicator_message const & message);
    void                            status(snap::snap_communicator_message const & message);
    int                                 package_status(QString const & package_name, bool add_info_only_if_present);
    void                            set_manager_status(snap::snap_communicator_message const & message);
    void                            installer(snap::snap_communicator_message const & message);
    int                                 install(QString const & package_name);

    advgetopt::getopt                           f_opt;
    snap::snap_config                           f_config;
    QString                                     f_log_conf = "/etc/snapwebsites/snaplock.properties";
    QString                                     f_server_name;
    QString                                     f_server_types;             // sent to use by snapcommunicator
    bool                                        f_debug = true;
    int                                         f_communicator_port = -1;   // snap server port
    QString                                     f_communicator_address;     // snap server address
    snap::snap_communicator::pointer_t          f_communicator;
    manager_messenger::pointer_t                f_messenger;
    status_connection::pointer_t                f_status_connection;
    manager_status                              f_status_runner;
    snap::snap_thread                           f_status_thread;
    status_t                                    f_status;
    QString                                     f_output;           // commands output, to be sent to end user
};


} // namespace snap_manager
// vim: ts=4 sw=4 et
