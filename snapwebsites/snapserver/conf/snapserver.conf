# Snap! Server configuration file
#
# The file is a basic list of variable name = value
# Comments start with a # character, must be the first character after spaces
# Empty lines are ignored


# log_server=<path to log properties>
#
# If you are using the log server, then this can be used to get the logs
# sent to that server. If this variable is defined, then it gets used
# by both, snapserver and snapbackend.
#
# If this variable is not defined (default), then the log_config
# parameters is used instead.
#
# Default: <not defined>
#log_server=/etc/snapwebsites/logserver.properties


# log_config=<path to log properties>
#
# This variable defines the path to a file with properties that the
# log4cplus library reads to handle logging of the snapserver and
# snapbackend daemons.
#
# Default: /etc/snapwebsites/log.properties
log_config=/etc/snapwebsites/log.properties


# listen=<IP address>:<port>
#
# The IP and port the snapserver will listen on.
#
# It should be local if snap.cgi is running on the same computer
# (i.e. Apache + snap.cgi + snapserver all on a frontend computer.)
#
# It should be a private address if the snap.cgi runs on a separate
# computer.
#
# That information should match the snapserver=... variable defined
# in the snapcgi.conf file of the computer that runs snap.cgi.
#
# WARNING: The data travelling between snap.cgi and snapserver is
#          NOT encrypted. So only trusted connections can be used.
#          You may setup a VPN to be safe (see tinc for example.)
#
# Default: 127.0.0.1:4004
listen=127.0.0.1:4004


# TO BE REMOVED
#
# Use one of:
#   simple -- use a simple strategy for the context (change before creation!)
#             select this ONLY if you can be sure you will never use more
#             than one data center
#   local -- spread the data between various racks, but the same data center
#   network -- use a rack and data center aware strategy, slower, but much
#              more versatile
cassandra_strategy=simple
# The replication factor defines how many copies of your data is kept total
# In most cases you want a minimum of 3. If you have 2 or even just 1 node
# (i.e. in a development environment) then change this value (change before
# creation of the snap_websites context); this parameter is used for all
# strategies, although in case of a network setup, it will make that many
# copies total on all data centers
cassandra_replication=1
# The replication factor needs to be defined on a per data center basis
# when you use the 'local' or 'network' strategies. In that case we need
# the list of data center names (DC1,DC2...) This parameter is a comma
# separated list of data centers; WARNING: if you put an invalid name here,
# then Cassandra will give you "UnavailableException" errors!
cassandra_data_centers=DC1


# qs_action=<name>
#
# The name of the query string variable used to define the action.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: a
qs_action=a


# qs_language=<name>
#
# The name of the query string variable used to define the language of
# the page being loaded. This parameter overrides the language the
# browser defines, that way a user can see a page in any language he
# wants.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: lang
qs_language=lang


# qs_working_branch=<name>
#
# Name of the query string variable used to know whether the working
# branch should be shown instead of the current display branch. Note
# that all users do not have access to the currently working branch.
#
# The variable can be set to any value at this point. If set, then
# the working branch is shown. For example:
#
#    http://snap.website?working_branch=1
#
# If you want to display a specific branch, instead, then use the
# variable defined by qs_branch.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: working_branch
qs_working_branch=working_branch


# qs_branch=<name>
#
# The name of the query string variable used to define the exact
# branch of a page to display.
#
# All users do not have access to all branches.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: branch
qs_branch=branch


# qs_revision=<name>
#
# The name of the query string variable used to define the exact
# revision of a page to display.
#
# All users do not have access to all revisions.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: revision
qs_revision=revision


# qs_rev=<name>
#
# The name of the query string variable used to define the branch
# and revision in one go.
#
# IMPORTANT NOTE:
# If either of the qs_branch or qs_revision variables is defined in
# a query string, then the qs_revision variable is ignored.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: rev
qs_rev=rev


# qs_layout::layout=<name>
#
# The name of a query string used to define the name of the layout
# to use to display that page. By default, the layout defined for
# that page is used.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: layout
qs_layout::layout=layout


# qs_layout::theme=<name>
#
# The name of a query string used to define the name of the theme
# to use to display that page. By default, the theme defined for
# that page is used.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: theme
qs_layout::theme=theme


# layout::layout=<name>
#
# When trying to determine the name of a layout to use to display a
# page, the system may come empty handed. As a last resort, the
# system makes use of the "default" layout, which is completely bare.
#
# This option can be used to specify a different layout as the default
# fallback. It is mainly useful at the time you start installing a
# website. After that, you most certainly will never have to fall
# back to the default layout since one definition in the main page
# type (categorization) is enough to ensure proper theming of an
# entire website.
#
# This value must be a double quoted string. However, it cannot be
# JavaScript code.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: "default"
#layout::layout="default"


# layout::theme=<name>
#
# When trying to determine the name of a theme to use to display a
# page, the system may come empty handed. As a last resort, the
# system makes use of the "default" theme, which is completely bare.
#
# This option can be used to specify a different theme as the default
# fallback. It is mainly useful at the time you start installing a
# website. After that, you most certainly will never have to fall
# back to the default theme since one definition in the main page
# type (categorization) is enough to ensure proper theming of an
# entire website.
#
# This value must be a double quoted string. However, it cannot be
# JavaScript code.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: "default"
#layout::theme="default"


# editor::layout=<name>
#
# When displaying a page that represents an editor form, one generally
# defines the layout of that form. This variable can be used in a
# situation where a page supports more than one editor layout.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: "default"
#editor::layout="default"


# plugins_path=<path>:<path>:...
#
# Define a folder where the plugins were installed. You should never
# have to change that path unless you are a programmer or maintainer
# and are dealing with where the plugins get installed.
#
# You may include multiple paths by separating them by a colon.
#
# Default: /usr/lib/snapwebsites/plugins
plugins_path=/usr/lib/snapwebsites/plugins


# table_schema_path=<path>:<path>:...
#
# Define one or more folders where the system will be looking for XML
# table definitions.
#
# You may include multiple paths by separating them by a colon.
#
# Default: /usr/lib/snapwebsites/tables
table_schema_path=/usr/lib/snapwebsites/tables


# default_plugins=<name>,<name>,...
#
# The list of plugins to load by default until a site defines its own list
# at which point this default list is ignored.
#
# This is particularly useful if you want to offer more than the list of
# core plugins on a new website installation. However, you have to be
# careful as adding too many plugin names to this list may prevent the
# installation of a new website and corrupt your Cassandra cluster. The
# amount of data that you can send to your Cassandra cluster in one go is
# directly related to the number of plugins you can offer using this
# variable.
#
# Names are comma separated. Spaces are allowed and ignored.
#
# Note: the default is '<none>' which represents the list of core
#       plugins.
#
# WARNING: This parameter needs to be updated in all your frontends at
#          the same time. Please use the snapmanager.cgi interface to
#          do so.
#
# Default: <none>
#default_plugins=


# data_path=<path to persistent data directory>
#
# Path to where the server can save data (counters, local locks, etc.)
# This directory is expected to be persistent between reboot.
#
# Default: /var/lib/snapwebsites
data_path=/var/lib/snapwebsites


# log_path=<path to log directory>
#
# The path to the log directory where any plugin/tool can log
# information in regard to snapwebsites.
#
# Note: Most processes just use log4cplus which does not take this
# path in account. This is generally used whenever an external tool
# is run and that external tool is not using log4cplus. For example,
# the antivirus tool runs an external tool and asks it to write the
# result in a file within the directory defined by this log_path
# parameter.
#
# Default: /var/log/snapwebsites
log_path=/var/log/snapwebsites


# backend_nice=<name>/<nice>,<name>/<nice>,...,<nice>
#
# TODO: This needs to be moved to snapinit.xml instead. See SNAP-351
#
# If you are running your backends on the same system as a frontend
# you want to change their nice value so your frontend goes as fast
# as possible and your backends run when the frontend stops working
#
# This never applies to the server, only backends.
#
# You may specify the name of a backend to have a specific nice
# value for that backend. For example you could use:
#
#   backend_nice=list::pagelist/3,sendmail::sendmail/5,images::images/10,7
#
# The last number is used for any other backend. It has to appear
# last because the parsing stops when a number by itself is found.
#
# This will run all backends with a nice value of 7 unless it is the
# list::pagelist, then use 3, the sendmail::sendmail, then use 5, or
# images::images, then use 10. The "plain" backend (without the
# --action) cannot currently be named so it will use the last
# standalone value of 7 in that example.
#
# Remember that the smaller the nice value, the more CPU it will be
# given. With a nice value of 0, you use the same as the system and
# thus get preemptive in regard to other tasks. On a computer reserved
# to just and only one backend, you should keep the nice value at 0.
# On computers where you share other processes, changing the nice
# value is a good idea. The maximum depends on your system, under Linux
# it generally is 19.
#
# TODO: move this detail in the snapinit.xml instead
#
# Default: list::pagelist/3,sendmail::sendmail/7,images::images/10,5
backend_nice=list::pagelist/3,sendmail::sendmail/7,images::images/10,5

# csspp_scripts=<path>:<path>:...
#
# The path to CSS Preprocessor scripts.
#
# 99.9% of the time, you do not need to change this path.
# If you add your own SCSS scripts, you may add the path to those.
# If you are a developer, change this path to your development install folder.
# You may enter more than one path by separating each path by a colon (:).
#
# Default: <none>
#csspp_scripts=/usr/lib/csspp/scripts


# show_redirects=<name>,<name>,...
#
# The following variable is used to change the default behavior of
# the redirect function in Snap! Websites. By default the redirect uses
# an HTTP header with a Location: entry specifying the new URI where
# the user should go.
#
# The variable understands the following values:
#
#   include-body    whether the body tag should include information about
#                   the redirect; otherwise it is completely empty
#
#   refresh-only    do not include a "Location: ..." header field, only
#                   expect the refresh meta tag to be used; otherwise
#                   a small client side JavaScript is used
#
#   no-refresh      avoid the refresh meta tag altogether since it is
#                   considered deprecated
#
#   one-minute      wait one minute before executing the refresh
#
# The default shown bellow can be used to see the refresh appear
# in your browser for one minute:
#
# Default: <none>  (which means do an HTTP redirect as normally expected)
#show_redirects=include-body,refresh-only,one-minute

# vim: wrap
