# Snap! Manager configuration file
# This file is used by snapmanager.cgi and snapmanagerdaemon
#
# PLEASE DO NOT EDIT THIS FILE
#
# Instead, look in /etc/snapwebsites/snapwebsites.d/snapmanager.conf
#
# The file is a basic list of variable name = value with system defaults.
# Comments start with a # character, must be the first character after spaces
# Empty lines are ignored


# clients=<ip address>,...
#
# A list of one or more IP addresses, separated by commas. Only
# computers with those IP addresses can connect to snapmanager.cgi.
# Others will be redirected to the URI defined in the
# "redirect_unwanted=..." parameter.
#
# This parameter is not editable by snapmanager.cgi for (obvious?)
# reasons.
#
# This parameter is ignored by snapmanagerdaemon which is anyway
# only accessible locally through snapcommunicator.
#
# Default: <none>
clients=


# stylesheet=<path to snapmanager.cgi stylesheet>
#
# In order to output the final page, snapmanager.cgi currently makes
# use of an XML stylesheet (a .xsl file). This parameter defines the
# path and filename to use to load that stylesheet.
#
# Default: /etc/snapwebsites/snapmanagercgi-parser.xsl
stylesheet=/etc/snapwebsites/snapmanagercgi-parser.xsl


# redirect_unwanted=<URI>
#
# If set, this parameter defines a URI to a website where users have to
# be redirected.
#
# By default we do not define the parameter and users who are not
# authorized (see clients=...) and hit a backend computer will get
# a 403 error that tells them the computer cannot be accessed.
#
# Note that if there is a gross error in the snapmanager.conf settings
# then the rediction will not occur. Fix the error (see the log for
# various details) and then the redirection will occur.
#
# Default: <none>
#redirect_unwanted=


# log_server=<path to log properties>
#
# If you are using the log server, then this can be used to get the logs
# sent to that server. If this variable is defined, then it gets used
# by both, snapmanager.cgi and snapmanagerdaemon.
#
# If this variable is not defined (default), then the log_config_...
# parameters are used instead.
#
# Default: <not defined>
#log_server=/etc/snapwebsites/logger/logserver.properties


# log_config_cgi=<path to log properties>
#
# This variable defines the properties that log4cplus library will read
# to handle logging of the snapmanager.cgi tool.
#
# This parameter is ignored by the snapmanagerdaemon binary.
#
# Default: /etc/snapwebsites/logger/snapmanagercgi.properties
log_config_cgi=/etc/snapwebsites/logger/snapmanagercgi.properties


# log_config_daemon=<path to log properties>
#
# This variable defines the properties that log4cplus library will read
# to handle logging of the snapmanagerdaemon tool.
#
# This parameter is ignored by the snapmanager.cgi binary.
#
# Default: /etc/snapwebsites/logger/snapmanagerdaemon.properties
log_config_daemon=/etc/snapwebsites/logger/snapmanagerdaemon.properties


# data_path=<path to persistent data directory>
#
# Path to where the CGI can load and the daemon can save status data
# about each computer in the cluster.
#
# This directory is expected to be persistent between reboots. Note
# that if you do not use a persistent directory, then snapmanager.cgi
# may need some time to get all the data updated on each reboot.
# Especially the bundle which snapmanagerdaemon has to download from
# a website.
#
# The default directories gets created by the snapmanagercgi.postinst
# script. At this time we make use of two sub-directories:
#
# $data_path/cluster-status
# $data_path/bundles
#
# Default: /var/lib/snapwebsites
#data_path=/var/lib/snapwebsites


# bundle_uri=<uri>
#
# The URI to a bundle repository. This is used to get a list of bundles
# that defines what to installed to get such and such functionality
# on a Snap! Websites server.
#
# The URI must point to the location including the directory.xml file
# which itself defines a set of URIs to actual bundle description files.
#
# snapmanager.cgi uses these files to generate a list of what can be
# installed and let the administrator select what to install.
#
# It also helps with uninstalling, so snapmanager.cgi can show all the
# bundles and whether they are installed or not installed.
#
# The snapmanagerdeamon process will be the one using that information
# in order to install or uninstall software as required.
#
# If undefined, no bundles will get loaded.
#
# You may define multiple URIs separated by commas.
#
# Default: http://bundles.snapwebsites.info/
bundle_uri=http://bundles.snapwebsites.info/


# snapmanager_frontend=<server-name>,<server-name>,...
#
# A list of server names running the snapmanager.cgi, i.e. considered to
# be front end snap server capable of handling client requests toward
# snapmanager.cgi.
#
# There may be just one such computer. You may even turn on that computer
# only when you need it. However, if you leave it empty (the default
# because we cannot infer your IP address scheme) then messages from
# this snapmanagerdaemon will be broadcasted to all others in your
# Snap! cluster instead of just the front end ones.
#
# This parameter is ignored by snapmanager.cgi.
#
# Default: <none>
snapmanager_frontend=


# plugins_path=<path to plugins>
#
# The snapmanager.cgi and snapmanagerdaemon make use of a set of common
# plugins to do their work. The daemon uses them to generate statuses
# and CGI to display the status on the screen. Further, the CGI uses
# the plugins to display widgets to allow for editing of values that
# the snapmanager offers for editing.
#
# The variable is a list of colon separated paths to compatible .so files.
#
# Note: there is no variable that you could use to define the list of
#       plugins to load because snapmanager.cgi and snapmanagerdaemon
#       are expected to have access to as many plugins as possible at
#       all time.
#
# Default: /usr/lib/snapwebsites/manager_plugins
#plugins_path=/usr/lib/snapwebsites/manager_plugins


# cache_path=<path to cache directory>
#
# The snapmanagerdaemon runs some commands that are very slow. Since it
# eventually does so once a minute, it could slow down your computers
# quite a bit. To avoid such problems, the tool saves some results in
# the cache directory. That makes it way faster to know the 'mostly'
# current status of the system without having to run complex commands.
#
# Note that the cache is expected to survive reboots. If a function run
# is expected to modify a value, then that function should delete the
# corresponding cache files to make sure the new state is properly
# reflected. If a function that runs in another process may change the
# status, we may look into having an information message sent.
#
# Default: /var/cache/snapwebsites
#cache_path=/var/cache/snapwebsites


# apt_check=<path to apt-check tool>
#
# The snapmanagerdaemon runs various tools to gather information about
# the system. The apt-check tool is not official a public tool (i.e.
# it does not appear in one of the $PATH dirctories) so we take it that
# it may very well move between versions. To ease continuous functionality
# of the snapmanagerdaemon if such movements occur, we offer a way to
# specify the full path to the tool.
#
# Default: /usr/lib/update-notifier/apt-check
#apt_check=/usr/lib/update-notifier/apt-check


# reboot_required=<path to reboot required flag>
#
# Upgrades that require a reboot create a file which is a flag saying
# that the computer needs to be rebooted. This variable holds the path
# and filename of the flag.
#
# Default: /run/reboot-required
#reboot_required=/run/reboot-required


# vim: wrap
