<?xml version="1.0"?>
<!--
  see /usr/share/snapwebsites/xsd/bundles.xsd for details
  to verify your changes (change the == with two dashes):
    xmllint ==noout ==schema /usr/share/snapwebsites/xsd/bundles.xsd /etc/snapwebsites/services.d/bundle-mailserver.xml
-->
<bundle>
  <name>mailserver</name>
  <description>
    <p>Install postfix and snapbounce to make this computer a mail server.</p>

    <p>The post installation script will then update the necessary setup
    files in order to get the duo working.</p>
  </description>
  <fields>
    <field name="domain" type="input">
      <label>Domain (myhostname)</label>
      <description>
        The name of the domain used for this mail server.
        For example: mail.snapwebsites.net -- your DNS should define that
        name as an MX record.
      </description>
    </field>
    <field name="organization" type="input">
      <label>Organization</label>
      <description>
        The name of your organization. It will be shown to people sending
        emails manually. It may be used by various systems to help contacting
        your organization. You may include a website URL although it is not
        that costumary to do so.
      </description>
    </field>
  </fields>
  <packages>snapbounce,postfix,postfix-policyd-spf-python,opendkim,opendkim-tools,opendmarc</packages>
  <postinst>
    # Create backups if the .orig files don't exist.
    # But only do this once.
    #
    for i in \
       /etc/bind/${BUNDLE_INSTALLATION_DOMAIN}.zone
       do
      if [ -f $i.orig ]
      then
        # Reset the file to the original
        cp $i.orig $i
      else
        # Make a backup once
        cp $i $i.orig
      fi
    done

    ################################################################################
    # Setup the transport.map file
    #
    # I'm not too sure why we would want these two lines:
    #
    #localhost bounces:
    #${BUNDLE_INSTALLATION_DOMAIN} bounces:
    #
    # For now, I removed them from the file altogether.
    #
    cat &gt;/etc/postfix/transport.maps &lt;&lt;EOF
# See SNAP-67
# After changes, run postmap:
#   postmap /etc/postfix/transport.maps
#
bounces@${BUNDLE_INSTALLATION_DOMAIN} snapbounce:
EOF
    postmap /etc/postfix/transport.maps

    echo "${BUNDLE_INSTALLATION_DOMAIN}" &gt; /etc/mailname 

    # setup the domain and a few other things
    # the few entries at the bottom connects snapbounce to postfix
    #
    MAILSERVER_SED=/tmp/bundle-mailserver.sed
    echo "s/^myhostname = .*/myhostname = ${BUNDLE_INSTALLATION_DOMAIN}/"                                                                  &gt;     ${MAILSERVER_SED}
    echo "s/^smtpd_banner = \\(.*\\) (.*)/smtpd_banner = \\1 ($BUNDLE_INSTALLATION_ORGANIZATION)/" &gt;&gt; ${MAILSERVER_SED}
    sed -i.bak -f ${MAILSERVER_SED} /etc/postfix/main.cf

    cat &gt;&gt; /etc/postfix/main.cf &lt;&lt;EOF

# `date`
# Tell postfix how we want to handle bounced emails (SNAP-67) 
#
notify_classes               = bounce
bounce_notice_recipient      = bounces@${BUNDLE_INSTALLATION_DOMAIN}
transport_maps               = hash:/etc/postfix/transport.maps
#
# Set up SPF email verification, dkim and dmarc
#
policy-spf_time_limit        = 3600s
smtpd_recipient_restrictions = permit_mynetworks,
  permit_sasl_authenticated,
  reject_unauth_destination,
  check_policy_service unix:private/policy-spf
milter_protocol       = 6
milter_default_action = accept
smtpd_milters         = inet:localhost:12345,inet:localhost:54321
non_smtpd_milters     = inet:localhost:12345,inet:localhost:54321
EOF

    # we then need to add a snapbounce entry to the master.cf file
    #
    MASTER=/etc/postfix/master.cf
    cat &gt;&gt; ${MASTER} &lt;&lt;EOF

# `date`
# Service to save bounced emails in Cassandra"                                                      
snapbounce unix -       n       n       -       -       pipe
  flags=FRq user=snapwebsites argv=/usr/bin/snapbounce --sender \${sender} --recipient \${recipient}
#
# Turn on SPF processing
policy-spf  unix  -       n       n       -       -       spawn
  user=nobody argv=/usr/bin/policyd-spf
EOF


    ################################################################################
    # Setup SPF support
    #
    sed \
      -e "s/HELO_reject = SPF_Not_Pass/HELO_reject = False/" \
      -e "s/Mail_From_reject = Fail/Mail_From_reject = False/"
        /etc/postfix-policyd-spf-python/policyd-spf.conf &gt; /etc/postfix-policyd-spf-python/policyd-spf.conf
    

    ################################################################################
    # Set up DKIM support
    #
    cat &gt;&gt; /etc/opendkim.conf &lt;&lt;EOF

# `date`
# Values used by Snap!
#
KeyTable              /etc/opendkim/key_table
SigningTable          /etc/opendkim/signing_table
ExternalIgnoreList    /etc/opendkim/trusted_hosts
InternalHosts         /etc/opendkim/trusted_hosts
AutoRestart           Yes
AutoRestartRate       10/1h
Mode                  sv
PidFile               /var/run/opendkim/opendkim.pid
SignatureAlgorithm    rsa-sha256
Canonicalization      relaxed/simple
UserID                opendkim:opendkim
EOF
    #
    mkdir -p /etc/opendkim/${BUNDLE_INSTALLATION_DOMAIN}
    cat &gt; /etc/opendkim/trusted_hosts &lt;&lt;EOF
# local host
127.0.0.1
# local subnets that are trusted and do not need to be verified
10.8.0.0/24
EOF
    cd /etc/opendkim/${BUNDLE_INSTALLATION_DOMAIN}
    opendkim-genkey -s mail -d ${BUNDLE_INSTALLATION_DOMAIN}
    chown opendkim:opendkim mail.private
    cd -
    cat &gt; /etc/opendkim/key_table &lt;&lt;EOF
mail._domainkey.${BUNDLE_INSTALLATION_DOMAIN} ${BUNDLE_INSTALLATION_DOMAIN}:mail:/etc/opendkim/${BUNDLE_INSTALLATION_DOMAIN}/mail.private
EOF
    cat &gt; /etc/opendkim/signing_table &lt;&lt;EOF
${BUNDLE_INSTALLATION_DOMAIN} mail._domainkey.${BUNDLE_INSTALLATION_DOMAIN}
EOF
    cat &gt;&gt; /etc/default/opendkim &lt;&lt;EOF
SOCKET="inet:12345@localhost"
EOF


    ################################################################################
    # Set up DMARC
    #
    mkdir -p /etc/opendmarc
    cat &gt;&gt; /etc/opendmarc.conf &lt;&lt;EOF

# `date`
# Values used by Snap!
#
AuthservID         ${BUNDLE_INSTALLATION_DOMAIN}
TrustedAuthservIDs ${BUNDLE_INSTALLATION_DOMAIN}
IgnoreHosts        /etc/opendmarc/ignore.hosts
HistoryFile        /var/run/opendmarc/opendmarc.dat
EOF
    cat &gt; /etc/opendmarc/ignore.hosts &lt;&lt;EOF
localhost
10.8.0.0/24
EOF
    cat &gt;&gt; /etc/default/opendmarc &lt;&lt;EOF
SOCKET="inet:54321@localhost"
EOF


    ################################################################################
    # Append the spf/dkim/dmarc TXT records to the zone file for our domain
    #
    # TODO: bump the serial number of the zone file.
    #
    if [ -f "/etc/bind/${BUNDLE_INSTALLATION_DOMAIN}.zone" ]
    then
      cat &gt;&gt;/etc/bind/${BUNDLE_INSTALLATION_DOMAIN}.zone &lt;&lt;EOF
@       1800 IN TXT "v=spf1 a:${BUNDLE_INSTALLATION_DOMAIN} -all"
adsp._domainkey 1800 IN TXT "dkim=all"
EOF
      cat /etc/opendkim/${BUNDLE_INSTALLATION_DOMAIN}/mail.txt &gt;&gt;/etc/bind/${BUNDLE_INSTALLATION_DOMAIN}.zone
      cat &gt;&gt;/etc/bind/${BUNDLE_INSTALLATION_DOMAIN}.zone &lt;&lt;EOF
_dmarc          1800 IN TXT "v=DMARC1; p=quarantine; fo=0; adkim=r; aspf=r; pct=100; rf=afrf; sp=quarantine"
EOF
    fi

    ################################################################################
    # (re)start services with the correct parameters
    #
    # also the tripwire bundle may disable postfix so here we make sure
    # it is enabled
    #
    for i in opendkim opendmarc postfix bind9
    do
      systemctl enable  $i
      systemctl restart $i
    done
  </postinst>
  <postrm>
    BUNDLE_INSTALLATION_DOMAIN=`cat /etc/mailname`
    # Restore the backups as the original files they were,
    # overwriting our changes.
    # For now, I've removed the other files--only the zone file stays,
    # since we don't purge bind9.
    for i in \
       /etc/bind/${BUNDLE_INSTALLATION_DOMAIN}.zone
    do
      if [ -f $i.orig ]
      then
        mv $i.orig $i 
      fi
    done
    rm -rf /etc/opendkim /etc/opendmarc
  </postrm>
</bundle>
<!--
  vim: ts=2 sw=2 et
-->
