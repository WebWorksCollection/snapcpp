#
# The following is an example on how to setup your Apache
# server to work with Snap! C++
#
# You probably want to copy this file and change the settings to better fit
# your installation.
#

# If you use a directory other than the default for snap.cgi (/usr/lib/cgi-bin)
#<Directory "/var/www/*:80/cgi-bin">
#  AllowOverride None
#  Options None
#  Order allow,deny
#  Allow from all
#</Directory>


# Regular site (port 80 is HTTP)
<VirtualHost *:80>
  # Name of the server
  ServerName snap.example.com
  # ServerAlias ...

  # We have to have a document root
  DocumentRoot /var/www/snap.example.com/public_html/

  # Error and other logs
  ErrorLog /var/log/apache2/snap.example.com-error.log
  CustomLog /var/log/apache2/snap.example.com-access.log combined

  # Directory with snap.cgi -- update if you don't use the default
  #ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/

  # Do not show directory contents
  Options -Indexes
  # ... other options ...

  # For details about the rewrite engine check out the Apache documentation:
  #   http://httpd.apache.org/docs/current/mod/mod_rewrite.html
  RewriteEngine on
  # Don't re-rewrite /cgi-bin requests (Skip next rule)
  # (however, we will fail with a 404 on all of those)
  RewriteRule snap(manager)?\.cgi - [S=1]
  # Rewrite anything else as a /cgi-bin/snap.cgi request
  RewriteRule ^(.*)$ /cgi-bin/snap.cgi [L,PT,QSA]

  # To send users a 503 while you are doing maintenance, you may use
  # the following. The 180000 is 5 hours. Change appropriately.
  #RedirectMatch 503 ^/(?!holding\.html)
  #ErrorDocument 503 /holding.html
  #Header always set Retry-After "18000"

  # The person in charge of this website
  ServerAdmin webmaster@example.com
</VirtualHost>

# If you instead want to force all users to access HTTPS instead of HTTP
# you may use a redirect
<VirtualHost *:80>
  ServerName snap.example.com
  DocumentRoot /var/www/snap.example.com/public_html
  ServerAdmin webmaster@example.com
  ErrorLog /var/log/apache2/snap.example.com-error.log
  CustomLog /var/log/apache2/snap.example.com-access.log combined
  RedirectMatch permanent ^(.*)$ https://snap.example.com:443$1
</VirtualHost>


# Secure site (port 443 is HTTPS)
<VirtualHost *:443>
  # Name of the server
  ServerName snap.example.com
  # ServerAlias ...

  # We have to have a document root
  DocumentRoot /var/www/snap.example.com/public_html/

  # Error and other logs
  ErrorLog /var/log/apache2/snap.example.com-error.log
  CustomLog /var/log/apache2/snap.example.com-access.log combined

  # Directory with snap.cgi
  #ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/

  # Do not show directory contents
  Options -Indexes
  # ... other options ...

  # For details about the rewrite engine check out the Apache documentation:
  #   http://httpd.apache.org/docs/current/mod/mod_rewrite.html
  RewriteEngine on
  # Don't re-rewrite /cgi-bin requests (Skip next rule)
  # (however, we will fail with a 404 on all of those)
  RewriteRule snap\.cgi - [S=1]
  # Rewrite anything else as a /cgi-bin/snap.cgi request
  RewriteRule ^(.*)$ /cgi-bin/snap.cgi [L,PT,QSA]

  # To send users a 503 while you are doing maintenance, you may use
  # the following. The 180000 is 5 hours. Change appropriately.
  #RedirectMatch 503 ^/(?!holding\.html)
  #ErrorDocument 503 /holding.html
  #Header always set Retry-After "18000"

  # The person in charge of this website
  ServerAdmin webmaster@example.com

  # Turn on SSL
  #
  SSLEngine On
  SSLOptions +StdEnvVars
  SSLCertificateFile /etc/apache2/ssl-snap/example.com.crt
  SSLCertificateKeyFile /etc/apache2/ssl-snap/example.com.key
  SSLCertificateChainFile /etc/apache2/ssl-snap/bundle.crt
</VirtualHost>

# vim: syntax=apache
