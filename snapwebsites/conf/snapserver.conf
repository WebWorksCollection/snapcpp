# Sample of Snap! Server configuration file
# This file is actually used while working on development
#
# The file is a basic list of variable name = value
# Comments start with a # character, must be the first character after spaces
# Empty lines are ignored

# Name of this server, each server MUST have a different name to make sure
# that each can generate unique identifiers
server_name=my_server_name

# Log configuration file
log_config=/etc/snapwebsites/log.properties
#log_server=/etc/snapwebsites/logserver.properties

# IP and port to listen on
listen=127.0.0.1:4004

# IP and port of the Snap! Communicator to communicate with other services
snapcommunicator_listen=127.0.0.1:4040
snapcommunicator_signal=127.0.0.1:4041

# Host & Port to connect to Cassandra
cassandra_host=127.0.0.1
cassandra_port=9160

# Use one of:
#   simple -- use a simple strategy for the context (change before creation!)
#             select this ONLY if you can be sure you will never use more
#             than one data center
#   local -- spread the data between various racks, but the same data center
#   network -- use a rack and data center aware strategy, slower, but much
#              more versatile
cassandra_strategy=simple
# The replication factor defines how many copies of your data is kept total
# In most cases you want a minimum of 3. If you have 2 or even just 1 node
# (i.e. in a development environment) then change this value (change before
# creation of the snap_websites context); this parameter is used for all
# strategies, although in case of a network setup, it will make that many
# copies total on all data centers
cassandra_replication=1
# The replication factor needs to be defined on a per data center basis
# when you use the 'local' or 'network' strategies. In that case we need
# the list of data center names (DC1,DC2...) This parameter is a comma
# separated list of data centers; WARNING: if you put an invalid name here,
# then Cassandra will give you "UnavailableException" errors!
cassandra_data_centers=DC1

# Wait forever for Cassandra to come up, pause for 10 seconds between
# each attempt
wait_interval=10
wait_max_tries=-1

# Query string used as the action
qs_action=a

# Language variable name
qs_language=lang

# Whether the "current" or "current working" branch is accessed
# if this parameter is set to anything, use the "current working" branch
qs_working_branch=working_branch

# Branch, Revision, and "Branch.Revision" variable name
qs_branch=branch
qs_revision=revision
qs_rev=rev

# Overwriting Layout and Theme
qs_layout::layout=layout
qs_layout::theme=theme

# Before falling back to the "default" theme, one can define another theme
# here in the configuration file; this has to be a direct name of a theme,
# it cannot be a JavaScript; it can be used to ease setting up a new
# Snap! installation
#layout::layout="default"
#layout::theme="default"
#editor::layout="default"

# Folder with the Plugins
# You may include multiple paths by separating them by a colon.
# The default is /usr/lib/snapwebsites/plugins
plugins_path=/usr/lib/snapwebsites/plugins

# The list of plugins to load by default until a site defines its own list
# (names are comma separated)
#
default_plugins=attachment, sitemapxml, robotstxt, filter, path, links, content, layout, editor, char_chart, permissions, favicon, javascript, taxonomy, search, users, form, sessions, messages, sendmail, shorturl, info, antivirus, list, mimetype, images, versions, locale, locale_widgets, locale_settings

# Path to where the server can save data (counters, local locks, etc.)
data_path=/var/lib/snapwebsites

# Path to the log directory where any plugin/tool can log information
# in regard to snapwebsites (note that some logs use log4cplus which
# does not take this path in account)
log_path=/var/log/snapwebsites

# If you are running your backends on the same system as a frontend
# you want to change their nice value so your frontend goes as fast
# as possible and your backends run when the frontend stops working
#
# This never applies to the server, only backends.
#
# You may specify the name of a backend to have a specific nice
# value for that backend. For example you could use:
#
#   backend_nice=list::pagelist/3,sendmail::sendmail/5,images::images/10,7
#
# The last number is used for any other backend. It has to appear
# last because the parsing stops when a number by itself is found.
#
# This will run all backends with a nice value of 7 unless it is the
# list::pagelist, then use 3, the sendmail::sendmail, then use 5, or
# images::images, then use 10. The "plain" backend (without the
# --action) cannot currently be named so it will use the last
# standalone value of 7 in that example.
#
# Remember that the smaller the nice value, the more CPU it will be
# given. With a nice value of 0, you use the same as the system and
# thus get preemptive in regard to other tasks. On a computer reserved
# to just and only one backend, you should keep the nice value at 0.
# On computers where you share other processes, changing the nice
# value is a good idea. The maximum depends on your system, under Linux
# it generally is 19.
#
backend_nice=list::pagelist/3,sendmail::sendmail/7,images::images/10,5

# IP and port of the computer that runs the pagelist backend server
# To stop the pagelist backend: snapsignal -a pagelist STOP
# To ping the pagelist backend: snapsignal -a pagelist PING
pagelist_udp_signal=127.0.0.1:4006

# IP and pot of the computer that runs the images backend server
# To stop the images backend            : snapsignal -a images STOP
# To ping the images backend            : snapsignal -a images PING
images_udp_signal=127.0.0.1:4008

# IP and port of the computer that runs the pagelist backend server
# To stop the pagelist backend          : snapsignal -a snapserver STOP
# To flush the log and reopen the output: snapsignal -a snapserver NLOG
snapserver_udp_signal=127.0.0.1:4007

# The path to CSS Preprocessor scripts
# 99.9% of the time, you do not need to change this path
# If you add your own SCSS scripts, you may add the path to those
# If you are a developer, change this path to your development install folder
# You may enter more than one path by separating each path by a colon (:)
#csspp_scripts=/usr/lib/csspp/scripts

# The following may be used to change the default behavior of the redirect
# function in Snap! Websites. By default the redirect uses an HTTP header
# with a Location: entry specifying the new URI where the user should go.
#
# The following variable can use the following values to change that:
#
#   include-body    whether the body tag should include information about
#                   the redirect or be completely empty
#
#   refresh-only    do not include a "Location: ..." header field, only
#                   expect the refresh meta tag to be used
#
#   no-refresh      avoid the refresh meta tag altogether since it is
#                   considered deprecated
#
#   one-minute      wait one minute before executing the refresh
#
# The default shown bellow can be used to see the refresh appear
# in your browser for one minute:
#
#show_redirects=include-body,refresh-only,one-minute

# vim: wrap
