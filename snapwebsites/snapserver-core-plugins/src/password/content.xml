<?xml version="1.0"?>
<!--
Snap Websites Server == password plugin database setup
Copyright (C) 2011-2017  Made to Order Software Corp.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-->
<snap-tree>
  <content path="/admin/settings/password" owner="output">
    <param name="content::title" revision="revision">Password Settings</param>
    <param name="content::body" revision="revision">
      <![CDATA[
        <p>
          Snap! allows for several different password settings.
          One set is called a policy. By default we offer the
          <strong>users</strong> policy which is the one used
          for normal user accounts. This page lists the available
          policies. New policies are automatically added by plugins
          that make use of them. For example, the protected page
          plugin makes use of its own password policy, which is
          much weaker than the normal users policy.
        </p>
        <p>
          Another password setup is the <a href="password/blacklist">blacklist</a>.
          By default your user's passwords are checked against that blacklist.
          If the words are present in the blacklist, then the
          password system refuses that password. It is possible
          to not check the blacklist on a per policy basis. It is
          not always necessary to check the blacklist if your
          password policy is very strong because it is likely that
          all the blacklisted passwords would not pass the
          policy rules anyway.
        </p>
        <!--p style="float: right;">
          Maybe we will offer that option later, but at this point
          I don't see how that could be useful...
          <a href="#create-policy">Create Policy</a>
        </p-->
        <div>[list::theme("admin/settings/password")]</div>
        <div style="clear: right;"></div>
      ]]>
    </param>
    <param name="list::original_item_key_script" overwrite="yes">
      <![CDATA[(branch := int32(cell("content", page, "content::revision_control::current_branch")),
                key := string(cell("content", page, "content::revision_control::current_revision_key::" + branch + "::en")),
                key ? tolower(string(cell("revision", key, "content::title"))) : "no title")]]>
    </param>
    <param name="list::original_test_script" overwrite="yes">
      <![CDATA[parent(path) == "admin/settings/password"]]>
    </param>
    <param name="list::selector">children</param>
    <link name="list::type" to="list::type" mode="1:*">/types/taxonomy/system/list</link>
    <link name="permissions::direct::action::administer" to="permissions::link_back::administer" mode="*:*">/types/permissions/rights/administer/website/info</link>
  </content>
  <content path="/admin/settings/password/users" owner="output">
    <param name="content::title" revision="revision">Users Password Policy</param>
    <param name="content::body" revision="revision">
      <![CDATA[<p>Policy used by the users plugin.</p>]]>
    </param>
    <param name="editor::layout" revision="global" overwrite="yes">"password-policy-page";</param>
    <param name="layout::layout" revision="global" overwrite="yes">"password-policy-parser";</param>
    <link name="permissions::direct::action::administer" to="permissions::link_back::administer" mode="*:*">/types/permissions/rights/administer/website/info</link>
    <!-- since we do not specify "prevent-delete", this policy is not delatable by default -->
  </content>
  <content path="/admin/settings/password/blacklist"><!-- this one needs to be owned by "password" -->
    <param name="content::title" revision="revision">Manage Password Blacklist</param>
    <param name="content::body" revision="revision">
      <![CDATA[<p>This page is used to manage lists of passwords that were blacklisted.</p>]]>
    </param>
    <param name="editor::layout" revision="global" overwrite="yes">"password-blacklist-page";</param>
    <param name="layout::layout" revision="global" overwrite="yes">"password-blacklist-parser";</param>
    <link name="permissions::direct::action::administer" to="permissions::link_back::administer" mode="*:*">/types/permissions/rights/administer/website/info</link>
  </content>
  <content path="/js/password">
    <!-- JavaScript code for the password extension -->
    <param name="content::title" revision="revision">Password Scripts</param>
    <param name="content::body" revision="revision">
      <![CDATA[<p>JavaScript code for the password editor extension.</p>]]>
    </param>
    <link name="permissions::direct::action::administer" to="permissions::link_back::administer" mode="*:*">/types/permissions/rights/administer/website/info</link>
    <attachment name="password" type="attachment/public">
      <path>qrc:/js/password/password.js</path>
      <mime-type>text/javascript</mime-type>
      <dependency>editor (&gt;= 0.0.3.468)</dependency>
      <dependency>javascript-unicode (&gt;= 0.0.1)</dependency>
    </attachment>
    <attachment name="password-blacklist" type="attachment/public">
      <path>qrc:/js/password/password-blacklist.js</path>
      <mime-type>text/javascript</mime-type>
      <dependency>editor (&gt;= 0.0.3.468)</dependency>
    </attachment>
  </content>
  <content path="/css/password">
    <!-- CSS code for the password extension -->
    <param name="content::title" revision="revision">Password Cascading Style Sheets</param>
    <param name="content::body" revision="revision">
      <![CDATA[<p>CSS code for the password editor extension.</p>]]>
    </param>
    <link name="permissions::direct::action::administer" to="permissions::link_back::administer" mode="*:*">/types/permissions/rights/administer/website/info</link>
    <attachment name="password" type="attachment/public">
      <path>qrc:/css/password/password.css</path>
      <mime-type>text/css</mime-type>
    </attachment>
  </content>
  <content path="/images/password">
    <param name="content::title" revision="revision">Password Images</param>
    <param name="content::body" revision="revision">
      <![CDATA[<p>Set of images offered and used by the password plugin.</p>]]>
    </param>
    <link name="permissions::direct::action::view" to="permissions::link_back::view" mode="*:*">/types/permissions/rights/view/attachment/public</link>
    <link name="permissions::direct::action::administer" to="permissions::link_back::administer" mode="*:*">/types/permissions/rights/administer/website/info</link>
    <attachment name="password-logo-64x64" type="attachment/public">
      <path>:/images/password/password-logo-64x64.png</path>
      <mime-type>image/png</mime-type>
    </attachment>
  </content>
</snap-tree>
<!-- vim: ts=2 sw=2 et syntax=xml
-->
