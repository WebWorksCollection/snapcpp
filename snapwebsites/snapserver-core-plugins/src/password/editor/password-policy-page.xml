<?xml version="1.0"?>
<!--
Snap Websites Server == passord policy settings page widgets
Copyright (C) 2014-2017  Made to Order Software Corp.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-->
<editor-form owner="password" id="policy" content-modified="2015-12-22 11:28:10">
  <timeout minutes="60"/> <!-- 1 hour -->
  <mode action="edit"/>
  <immediate/>
  <focus refid="minimum_length"/>
  <on-save allow-edit="yes"/>
  <taborder>
    <tabindex refid="minimum_length"/>
    <tabindex refid="minimum_lowercase_letters"/>
    <tabindex refid="minimum_uppercase_letters"/>
    <tabindex refid="minimum_letters"/>
    <tabindex refid="minimum_digits"/>
    <tabindex refid="minimum_spaces"/>
    <tabindex refid="minimum_specials"/>
    <tabindex refid="minimum_unicode"/>
    <tabindex refid="minimum_variation"/>
    <tabindex refid="minimum_length_of_variations"/>
    <tabindex refid="delay_between_password_changes"/>
    <tabindex refid="check_blacklist"/>
    <tabindex refid="check_username"/>
    <tabindex refid="check_username_reversed"/>
    <tabindex refid="limit_duration"/>
    <tabindex refid="maximum_duration"/>
    <tabindex refid="invalid_passwords_counter"/>
    <tabindex refid="invalid_passwords_counter_lifetime"/>
    <tabindex refid="invalid_passwords_block_duration"/>
    <tabindex refid="invalid_passwords_slowdown"/>
    <tabindex refid="blocked_user_counter"/>
    <tabindex refid="blocked_user_counter_lifetime"/>
    <tabindex refid="blocked_user_firewall_duration"/>
    <tabindex refid="prevent_old_passwords"/>
    <tabindex refid="minimum_old_passwords"/>
    <tabindex refid="old_passwords_maximum_age"/>
  </taborder>

  <widget id="editor-session" type="hidden" field="editor::session" path="editor/session">
  </widget>
  <widget id="editor-timeout" type="silent" field="editor::timeout" path="editor/timeout">
  </widget>

  <!-- minimum counts -->
  <widget id="minimum_length" type="line-edit" field="password::minimum_length" path="password/minimum_length" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>Overall minimum number of characters.</tooltip>
    <help>Help</help>
    <value>0</value>
    <filters>
      <regex name="integer"/>
    </filters>
  </widget>
  <widget id="minimum_lowercase_letters" type="line-edit" field="password::minimum_lowercase_letters" path="password/minimum_lowercase_letters" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>Minimum number of lowercase letters.</tooltip>
    <help>Help</help>
    <value>0</value>
    <filters>
      <regex name="integer"/>
    </filters>
  </widget>
  <widget id="minimum_uppercase_letters" type="line-edit" field="password::minimum_uppercase_letters" path="password/minimum_uppercase_letters" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>Minimum number of uppercase letters.</tooltip>
    <help>Help</help>
    <value>0</value>
    <filters>
      <regex name="integer"/>
    </filters>
  </widget>
  <widget id="minimum_letters" type="line-edit" field="password::minimum_letters" path="password/minimum_letters" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>Minimum number of letters of any type.</tooltip>
    <help>Help</help>
    <value>0</value>
    <filters>
      <regex name="integer"/>
    </filters>
  </widget>
  <widget id="minimum_digits" type="line-edit" field="password::minimum_digits" path="password/minimum_digits" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>Minimum number of digits.</tooltip>
    <help>Help</help>
    <value>0</value>
    <filters>
      <regex name="integer"/>
    </filters>
  </widget>
  <widget id="minimum_spaces" type="line-edit" field="password::minimum_spaces" path="password/minimum_spaces" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>Minimum number of spaces.</tooltip>
    <help>Help</help>
    <value>0</value>
    <filters>
      <regex name="integer"/>
    </filters>
  </widget>
  <widget id="minimum_specials" type="line-edit" field="password::minimum_specials" path="password/minimum_specials" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>Minimum number of spaces.</tooltip>
    <help>Help</help>
    <value>0</value>
    <filters>
      <regex name="integer"/>
    </filters>
  </widget>
  <widget id="minimum_unicode" type="line-edit" field="password::minimum_unicode" path="password/minimum_unicode" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>Minimum number of spaces.</tooltip>
    <help>Help</help>
    <value>0</value>
    <filters>
      <regex name="integer"/>
    </filters>
  </widget>
  <widget id="minimum_variation" type="line-edit" field="password::minimum_variation" path="password/minimum_variation" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>
      Minimum variation means the total number of different types of
      characters, without actually having to force the user to use
      a specific type of character.
    </tooltip>
    <help>
      In most cases, administrators force users to make use of specific
      sets of characters. Using the minimum variation entry, you can
      instead force users to use a certain number of variations, but you
      do not force them to use any specific set of characters.
    </help>
    <value>0</value>
    <filters>
      <regex name="integer"/>
    </filters>
  </widget>
  <widget id="minimum_length_of_variations" type="line-edit" field="password::minimum_length_of_variations" path="password/minimum_length_of_variations" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>
      When requesting a minimum set of variations, you can force the user
      to enter at least this many characters in each category of characters.
      The result is generally similar to asking a user to enter 2 or 3
      characters in each categories.
    </tooltip>
    <help>
      This number represents the minimum number of characters required
      in each category for the password to be accepted with having
      the minimum number of categories specified. In most cases, you
      leave this value set to 1 or change it to just 2. This value
      is completely ignored if the minimum variation is set to 0.
    </help>
    <value>1</value>
    <filters>
      <regex name="integer"/>
    </filters>
  </widget>
  <widget id="delay_between_password_changes" type="line-edit" field="password::delay_between_password_changes" path="password/delay_between_password_changes" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>
      By adding a delay, in minutes, you can prevent the user from changing
      his password over and over again. This is generally not useful unless
      you want to better enforce regular password changes.
    </tooltip>
    <help>
      Although not recommanded, this option allows you to limit the number
      of times a user can change his password in a given amount of time.
      Note that to prevent users from using their old passwords, there
      is not need to use a delay. We do not just count but we also have
      a timeout for old passwords and any number of them may be kept
      around. So if an old password is marked to remain in the database
      for one year, the user cannot reuse it for one year even by changing
      the his password hundred of times every day. If you want to use this
      option, make sure to keep the number of minutes to a really small
      number.
    </help>
    <value>0</value>
    <filters>
      <regex name="integer"/>
    </filters>
  </widget>

  <!-- check blacklist -->
  <widget id="check_blacklist" type="checkmark" field="password::check_blacklist" path="password/check_blacklist" auto-save="int8">
    <label>Refuse passwords that are blacklisted</label>
    <tooltip>When this checkmark is selected, the password plugin prevents the use of passwords that are defined in the Password Blacklist.</tooltip>
    <help>Help</help>
    <value>0</value>
  </widget>
  <widget id="check_username" type="edit-line" field="password::check_username" path="password/check_username" auto-save="int64">
    <tooltip>
      A password that matches a username is not considered a password at all.
      Our test actually checks for slight variations using a Levenshtein
      comparator so "alexis" and "alexsi" are both forbidden if your username
      is "alexis". Use 0 to turn off this feature.
    </tooltip>
    <help>
      This test ensures that the password does not in any way match the
      username. By default this includes slight variations such as
      swapping two letters. This is done with the use of a Levenshtein
      distance comparator. It is considered really bad practice to use
      the same token as your username and password, hence this feature.
      Note that by default this feature is turned on. The number you enter
      here should remain very small. We use 2 by default, you may increase
      it up to 4 or 5, more will generally cause a lot of hardship in
      coming up with a password that works for people. We offer a maximum
      of 10 although that is huge.
    </help>
    <value>2</value>
    <filters>
      <regex name="integer"/>
      <max-value>10</max-value>
    </filters>
  </widget>
  <widget id="check_username_reversed" type="checkmark" field="password::check_username_reversed" path="password/check_username_reversed" auto-save="int8">
    <label>Also check whether the username matches the password when checked in reversed order.</label>
    <tooltip>
      When this checkbox is selected, the Username test is done with
      the user name as is and in reverse order (i.e. "alexis" and
      "sixela".) This prevents someone from just using their username
      reversed as their password.
    </tooltip>
    <help>
      This checkmark requires that the username test be done with
      the username reversed. Some people use such since it is
      easy to remember your password that way. This feature is
      turned on by default because it is something really easy for
      hackers to check to gain access to a user account.
    </help>
    <value>1</value>
  </widget>

  <!-- password forced renewal -->
  <widget id="limit_duration" type="checkmark" field="password::limit_duration" path="password/limit_duration" auto-save="int8">
    <label>Limit the amount of time a password can be used before it has to be changed</label>
    <tooltip>When this checkmark is selected, users are forced to change their password once in a while. The duration is specified in the maximum duration widget.</tooltip>
    <help>Help</help>
    <value>0</value>
  </widget>
  <widget id="maximum_duration" type="line-edit" field="password::maximum_duration" path="password/maximum_duration" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>Number of Days Before Password Has to be Changed</tooltip>
    <help>
      This number represents the number of days the password remains
      valid. After that amount of time, the password is considered
      out of date and the user is forced to change it. Note that if
      the Limit Duration checkmark is not checked, then this feature
      is turned off so the number of days is ignored.
    </help>
    <value>92</value>
    <filters>
      <regex name="integer"/>
      <min-value>7</min-value>
    </filters>
  </widget>

  <!-- invalid password actions -->
  <widget id="invalid_passwords_counter" type="line-edit" field="password::invalid_passwords_counter" path="password/invalid_passwords_counter" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>
      The number of times a user is allowed to enter his password
      incorrectly before his account gets blocked. Note that we
      always force a minimum of 3 attempts. The default is 5. If
      you do not want to ever block a user in this way, use a
      really large number (100 would do in most cases.)
    </tooltip>
    <help>
      Each time the user enters his password incorrectly (i.e. so it does
      not match,) a counter is incremented by 1. At some point, the system
      wants to temporarily block that account for a while, so as to avoid
      further unwanted checks by robots (which in most cases is what is
      happening.) The block is temporary so the legitimate user will later
      be able to come back to his website. The default is 5.
    </help>
    <value>5</value>
    <filters>
      <regex name="integer"/>
      <min-value>1</min-value>
    </filters>
  </widget>
  <widget id="invalid_passwords_block_duration" type="line-edit" field="password::invalid_passwords_block_duration" path="password/invalid_passwords_block_duration" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>
      Once the maximum number of invalid password attempts is reached,
      the user account gets blocked for this amount of time. This number
      is the number of hours for the block. In many cases, one uses
      24h for this block. By default, we use 3h to avoid potential
      problem. Note that the minimum is 1h (you cannot ask the system
      to not block the user.)
    </tooltip>
    <help>
      Once the person attempting to log in a system reaches the maximum
      number of invalid password attempts, that person gets locked. Once
      locked out, the user should not attempt to log in anymore because
      that will get its IP address blocked too. By default the block is
      set to 3h. Many website administrators change this value to 24h,
      which is often the practice in this field. The minimum value is
      1h, meaning that it is not possible to change the value to 0 to
      avoid the block entirely.
    </help>
    <value>5</value>
    <filters>
      <regex name="integer"/>
      <min-value>1</min-value>
    </filters>
  </widget>
  <widget id="invalid_passwords_counter_lifetime" type="line-edit" field="password::invalid_passwords_counter_lifetime" path="password/invalid_passwords_counter_lifetime" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>
      The lifetime of the counter holding the number of password failures
      is managed by this value. By default, we use 3 hours. The value is
      defined in hours and a minimum of 1 hour is impossed.
    </tooltip>
    <help>
      The counter used to know how many times a user entered an invalid
      password is generally given a very small lifetime. Since such a
      user is going to be logged in for a few days after a log in, this
      value can be relatively large, although, at the same time, it
      should not be so large that it allows hackers to easily generate
      a DoS to your regular users.
    </help>
    <value>3</value>
    <filters>
      <regex name="integer"/>
      <min-value>1</min-value>
    </filters>
  </widget>
  <widget id="invalid_passwords_slowdown" type="line-edit" field="password::invalid_passwords_slowdown" path="password/invalid_passwords_slowdown" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>
      The number of seconds to sleep before returning to the client
      whenever the user entered an invalid password.
    </tooltip>
    <help>
      This number of seconds times the number of failed password minus
      one is the total number of seconds we sleep before returning to
      the client. We do this so that way we can make sure that a hacker
      cannot generate too many requests one after another (although they
      can still generate many requests to many accounts, assuming they
      have many IP addresses, otherwise our anti-pounding plugin kicks
      in anyway.)
    </help>
    <value>3</value>
    <filters>
      <regex name="integer"/>
    </filters>
  </widget>
  <widget id="blocked_user_counter" type="line-edit" field="password::blocked_user_counter" path="password/blocked_user_counter" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>
      The number of times a blocked user may enter an invalid password
      before his IP address gets blocked by the firewall. The default is 5.
      If you do not want to ever block a user IP address in this way, use a
      really large number (100 would do in most cases, hackers will still
      get blocked at some point, though.)
    </tooltip>
    <help>
      Once a user got blocked because he entered his password incorrectly
      too many times, the password plugin uses another counter to determine
      whether the user should get his IP address blocked by the firewall.
      Once the counter reaches the value specified here, the user's IP
      address is sent to the firewall. This allows us to save on resources
      since it is much more likely that the attack will quickly stop in its
      track if the attacker never gets replies to its connection attempts
      (i.e. the firewall DROPs any connection attempts from the specified
      IP address.) Note that the system adds a random number between
      0 and 10 to this counter each time it is checked. This is to make
      sure that a hacker cannot determine whether a password his robot
      tested with was the valid password. The default value is 5. The
      minimum is 1.
    </help>
    <value>5</value>
    <filters>
      <regex name="integer"/>
      <min-value>1</min-value>
    </filters>
  </widget>
  <widget id="blocked_user_firewall_duration" type="dropdown" field="password::blocked_user_firewall_duration" path="password/blocked_user_firewall_duration" no-toolbar="no-toolbar" auto-save="string">
    <tooltip>
      A hacker trying to log in and receiving 503 errors enough times
      will end up with his IP address blocked by our firewall. This
      value is used to determine the duration of the block. It can
      be set to just 1 hour or to <em>forever</em>. By default we
      set this value to one week.
    </tooltip>
    <help>
      If a hacker attempts to login too many times with an invalid
      password (we assume that a normal user would not do that...) then
      we end up blocking his IP address. This should not create any
      problem to a regular user since in most cases the IP address that
      gets blocked is not going to be one that a regular user will have
      (i.e. the IP address of some Wordpress server that the hacker
      took control over opposed to the IP address of a regular user at
      home.)
    </help>
    <preset>
      <item value="hour">1 hour</item>
      <item value="day">1 day</item>
      <item value="week" default="default">1 week</item>
      <item value="month">1 month</item>
      <item value="year">1 year</item>
      <item value="forever">forever</item>
    </preset>
  </widget>
  <widget id="blocked_user_counter_lifetime" type="line-edit" field="password::blocked_user_counter_lifetime" path="password/blocked_user_counter_lifetime" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>
      The lifetime of a blocked user counter holding the number of
      password failures after we already blocked the user (i.e. each time
      we return a 503 error.) By default, we use 5 days. The value is
      defined in days and a minimum of 1 day is imposed.
    </tooltip>
    <help>
      The counter used to know how many times a user entered an invalid
      password after he got block is generally given a longer lifetime.
      This would only really happen when the user completely forgot his
      password or a hacker is really trying to get in that account.
      This is likely to generate a DoS to regular users, unfortunately.
      However, it is still way safer than letting a hacker come in or
      use up much of our resources for nothing.
    </help>
    <value>5</value>
    <filters>
      <regex name="integer"/>
      <min-value>1</min-value>
    </filters>
  </widget>

  <!-- old password reuse -->
  <widget id="prevent_old_passwords" type="checkmark" field="password::prevent_old_passwords" path="password/prevent_old_passwords" auto-save="int8">
    <label>Prevent user from entering an old password when changing passwords</label>
    <tooltip>Turn on this flag if you wantyour users to have to enter a new password each time they change their password.</tooltip>
    <help>Help</help>
    <value>0</value>
  </widget>
  <widget id="minimum_old_passwords" type="line-edit" field="password::minimum_old_passwords" path="password/minimum_old_passwords" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>Enter the minimum number of old passwords to keep in the database before they get deleted.</tooltip>
    <help>
      This number represents the minimum number of passwords that are
      kept in the database until they get deleted. Even password that
      are very old do not get deleted if the minimum count is not yet
      reached.
    </help>
    <value>1</value>
    <filters>
      <regex name="integer"/>
      <min-value>1</min-value>
    </filters>
  </widget>
  <widget id="old_passwords_maximum_age" type="line-edit" field="password::old_passwords_maximum_age" path="password/old_passwords_maximum_age" no-toolbar="no-toolbar" auto-save="int64">
    <tooltip>The age, in days, that a password has to be before it gets deleted.</tooltip>
    <help>
      This number represents the number of days old passwords are
      kept in the database. Passwords that are older, assuming there
      are more than the minimum number of password expected in the
      database, get deleted from the database. The default is 365
      which represents one whole year. So after a year or so, users
      can reuse their (really) old passwords.
    </help>
    <value>365</value>
    <filters>
      <regex name="integer"/>
    </filters>
  </widget>

</editor-form>
<!-- vim: ts=2 sw=2 et
-->
