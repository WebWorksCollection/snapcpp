#!/bin/sh
### BEGIN INIT INFO
# Provides:          snapserver
# Required-Start:    $network $local_fs
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: <Enter a short description of the software>
# Description:       <Enter a long description of the software>
#                    <...>
#                    <...>
### END INIT INFO

# Author: R. Douglas Barbieri <doug@dooglio.net>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC=snapserver             	# Introduce a short description here
NAME=snapserver             	# Introduce the short server's name here
SCRIPTNAME=/etc/init.d/$NAME
USER=snapwebsites
SNAPSIGNAL=/usr/bin/snapsignal

# snapserver
#
SERVER_NAME=snapserver
SERVER=/usr/bin/snapserver
SERVER_ARGS=""

# snapbackend
#
BACKEND=/usr/bin/snapbackend
BACKEND_NAME=snapbackend
BACKEND_SENDMAIL_ARGS="-a sendmail"
BACKEND_PAGELIST_ARGS="-a pagelist"

# Exit if the package is not installed
[ -x $SERVER  ] || exit 0
[ -x $BACKEND ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

if [ "${SNAPSERVER_ENABLED}" != "yes" ]
then
        echo "Snapwebsites service disabled. Modify your config files in /etc/snapwebsites, and then enable the service in /etc/default/snapserver"
        exit 0
fi

SERVER_ARGS="${SERVER_ARGS} ${SERVER_OPTS}"    					 # SERVER_OPTS  comes from /etc/default/snapserver
BACKEND_SENDMAIL_ARGS="${BACKEND_SENDMAIL_ARGS} ${BACKEND_OPTS}" # BACKEND_OPTS comes from /etc/default/snapserver
BACKEND_PAGELIST_ARGS="${BACKEND_PAGELIST_ARGS} ${BACKEND_OPTS}"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
start_daemon()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	#start-stop-daemon --start --quiet --chuid ${USER} --exec $1 --test \
	#	2>&1 > /dev/null \
	#	|| return 1
	bname=`basename $1`
	start-stop-daemon --start --background --chuid ${USER} \
		--exec $1 -- $2 \
		2>&1 > /dev/hull \
		|| return 2
	return 0
}


do_start()
{
	start_daemon "${SERVER}"  "${SERVER_ARGS}"           || return $?
	"${BACKEND}" ${BACKEND_SENDMAIL_ARGS} || return $?
	"${BACKEND}" ${BACKEND_PAGELIST_ARGS} || return $?
	return 0
}


#
# Function that stops the daemon/service
#
stop_daemon()
{
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	bname=`basename $1`
	start-stop-daemon --stop --quiet --oknodo --retry=TERM/5/KILL/5 --exec ${1}
	[ "$?" = 2 ] && return 2

	# Many daemons don't delete their pidfiles when they exit.
	rm -f /var/run/${bname}.pid
	return 0
}


do_stop()
{
	#stop_daemon "${SERVER}"
	${SNAPSIGNAL} -a snapserver STOP
	${SNAPSIGNAL} -a sendmail STOP
	${SNAPSIGNAL} -a pagelist STOP
	return 0
}


do_status()
{
   status_of_proc "$SERVER"  "$SERVER_NAME"         || return $?
   status_of_proc "$BACKEND" "$BACKEND_NAME"
   return $?
}


case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
    do_start
    case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
  ;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       do_status && exit 0 || exit $?
       ;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

exit 0

# vim: ts=4 sw=4 noexpandtab syntax=sh nocindent
