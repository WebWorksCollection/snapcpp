
# Note: in many cases a filename can be "." (current directory)

# Check out a copy from the repository
git clone git://git.code.sf.net/p/snapcpp/code snapcpp

# check what you've changed (verify that you want to commit all of those)
git diff ["<filename>"]

# check files that have changed, the status
git status ["<filename>"]

# -a == all
git commit -m 'info about commit' -a
git commit -m 'info about commit' "<filename>"

# retrieve data from repository (changes by others)
git pull origin master

# push your changes to the server (you may need a pull first)
git push origin master

# fix a conflict
# After a git pull ... you may have a conflict (you should see that in the
# output of git); first edit the file and search for <<<, >>>, or === and
# correct the code as required; then do a commit on that filename, after
# that you should be all fine.
git commit -i "<filename>"


# amend a commit
# It is not actually possible to update a commit in place. Instead you
# create an amendment which you can hope will be used as expected.
# To amend you last commit, just use --amend
git commit --amend

# If you want to amend an older commit, use -c <id> which you get with
# a git log (see the long SHA number after the word commit)
git commit --amend -c 123...123

# Amending also involves merging, somehow.
# For additional information about amending and fixing comments in your
# commits, there is a great page about that here:
# https://help.github.com/articles/changing-a-commit-message/


# changing the URL of the origin
git remote set-url origin git@github.com:m2osw/snapcpp.git


# Remove one or more files from your last commit (assuming you did not push yet)
git reset --soft HEAD^
git reset HEAD path/to/unwanted_file
#...repeat previous command for each file to be removed from the last commit...
git commit -c ORIG_HEAD

# Remove a commit that was pushed requires the revert command instead
git revert 123                 # use git log to get the commit-id


# Find list of files in a git commit
git log --stat ["path"]


# Handling branches
#
# More details available on this page (and next/previous)
#    https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging
#
# WARNING: By default, switching from the master to another branch
#          forces a merge (I do not understand why that would be a good
#          thing though.)
#
# In your home directory, edit .gitconfig and plaster:
#
#    [branch]
#        autosetupmerge = always
#        autosetuprebase = always
#
git branch "branch-name"       # creates a new branch
git checkout "branch-name"     # switch between branches
git merge "branch-name"        # merge <name> in current branch
git branch -d "branch-name"    # delete a branch
git fetch                      # fetch all (including remote) branches
git diff "branch-nameA" "branch-nameB" -- "filename"   # diff "filename" between two branches

# If you already have changes that you want to save in a different branch:
git branch "branch-name"
git checkout "branch-name"
git commit "branch-name"


# Merging one commit in another branch
#
# Say you create a cool commit in master and want to add that to a certain
# branch, maybe because that other branch is a release branch and you only
# want to fix one small thing in that branch... That's done with cherry-pick
# but if you have auto-rebase like me, then you need to abort the rebasing
# in case you get a conflict.
#
# Because you are breaking the nice tree (i.e. not taking each commit in
# between on either side) you also have to --force the push.
#
# If you miss a step and seemingly have a problem, try "git rebase --skip"
# to restore the files you cherry picked.
git cherry-pick "commit-id"
...edit conflicts...
git add "path/to/file/with/conflicts"
git commit -i "path/to/file/with/conflicts"
git rebase --abort
git commit .
git push --force origin "branch-name"


# vim: syntax=sh
