
# Note: in many cases a filename can be "." (current directory)

# Check out a copy from the repository
git clone git://git.code.sf.net/p/snapcpp/code snapcpp

# check what you've changed (verify that you want to commit all of those)
git diff ["<filename>"]

# check files that have changed, the status
git status ["<filename>"]

# -a == all
git commit -m 'info about commit' -a
git commit -m 'info about commit' "<filename>"

# retrieve data from repository (changes by others)
git pull origin master

# push your changes to the server (you may need a pull first)
git push origin master

# fix a conflict
# After a git pull ... you may have a conflict (you should see that in the
# output of git); first edit the file and search for <<<, >>>, or === and
# correct the code as required; then do a commit on that filename, after
# that you should be all fine.
git commit -i "<filename>"


# amend a commit
# It is not actually possible to update a commit in place. Instead you
# create an amendment which you can hope will be used as expected.
# To amend you last commit, just use --amend
git commit --amend

# If you want to amend an older commit, use -c <id> which you get with
# a git log (see the long SHA number after the word commit)
git commit --amend -c 123...123

# Amending also involves merging, somehow.


# changing the URL of the origin
git remote set-url origin git@github.com:m2osw/snapcpp.git


# vim: syntax=sh
