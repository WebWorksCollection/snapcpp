// start
[

    // A package declaration must include a '{' after its name
    {
        //"verbose": true,
        "name": "'{' missing after package name",
        "program": "package the.grand_package.name var prog = 13.9; }\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected after the package name."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "the.grand_package.name",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "VAR",
                                            "children": [
                                                {
                                                    "node type": "VARIABLE",
                                                    "label": "prog",
                                                    "children": [
                                                        {
                                                            "node type": "SET",
                                                            "children": [
                                                                {
                                                                    "node type": "FLOAT64",
                                                                    "float": 13.9
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A package declaration must end with a '}' after its list of directives
    {
        //"verbose": true,
        "name": "'}' missing after package directives",
        "program": "package the.funky_package.name { var pi = 3.14159;\n",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 2,
                "message": "'}' expected after the package declaration."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "the.funky_package.name",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "VAR",
                                            "children": [
                                                {
                                                    "node type": "VARIABLE",
                                                    "label": "pi",
                                                    "children": [
                                                        {
                                                            "node type": "SET",
                                                            "children": [
                                                                {
                                                                    "node type": "FLOAT64",
                                                                    "float": 3.14159
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A package name not in a string must be identifiers separated by periods
    {
        //"verbose": true,
        "name": "invalid package name (ends with '.')",
        "program": "package the.name. { function a(b) { if(b) console.log('\"b\" is true'); } }\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "invalid package name (expected an identifier after the last '.')."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to open the 'IF' block."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "the.name",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FUNCTION",
                                            "label": "a",
                                            "children": [
                                                {
                                                    "node type": "PARAMETERS",
                                                    "children": [
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "b"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "IF",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "b"
                                                                },
                                                                {
                                                                    "node type": "DIRECTIVE_LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "CALL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "console"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "log"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "LIST",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "STRING",
                                                                                            "label": "\"b\" is true"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A package name not in a string must be identifiers separated by periods
    {
        //"verbose": true,
        "name": "invalid package name (includes keyword 'private')",
        "program": "package the.private.name { function a(b) { if(b) console.log('\"b\" is true'); } }\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "invalid package name (expected an identifier after the last '.')."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to open the 'IF' block."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "the.name",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FUNCTION",
                                            "label": "a",
                                            "children": [
                                                {
                                                    "node type": "PARAMETERS",
                                                    "children": [
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "b"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "IF",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "b"
                                                                },
                                                                {
                                                                    "node type": "DIRECTIVE_LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "CALL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "console"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "log"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "LIST",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "STRING",
                                                                                            "label": "\"b\" is true"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A package name not in a string must be identifiers separated by periods
    {
        //"verbose": true,
        "name": "invalid package name (ends with 'private')",
        "program": "package the.private { function a(b) { if(b) console.log('\"b\" is true'); } }\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "invalid package name (expected an identifier after the last '.')."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to open the 'IF' block."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "the",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FUNCTION",
                                            "label": "a",
                                            "children": [
                                                {
                                                    "node type": "PARAMETERS",
                                                    "children": [
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "b"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "IF",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "b"
                                                                },
                                                                {
                                                                    "node type": "DIRECTIVE_LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "CALL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "console"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "log"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "LIST",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "STRING",
                                                                                            "label": "\"b\" is true"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing a couple of packages
    {
        //"verbose": true,
        "name": "import packages",
        "program": "import renamed = snap.website.extensions;\n\
import implements snap.numbers.complex;\n\
import \"magic.numbers\", namespace magical, include \"rhetorics\";\n\
import snap.extensions.*, exclude ajax;\n\
import edit = \"snap.editor\";\n",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 5,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.website.extensions",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "renamed"
                                }
                            ]
                        },
                        {
                            "node type": "IMPORT",
                            "label": "snap.numbers.complex",
                            "flags": "IMPORT_FLAG_IMPLEMENTS"
                        },
                        {
                            "node type": "IMPORT",
                            "label": "magic.numbers",
                            "children": [
                                {
                                    "node type": "USE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "magical"
                                        }
                                    ]
                                },
                                {
                                    "node type": "INCLUDE",
                                    "children": [
                                        {
                                            "node type": "STRING",
                                            "label": "rhetorics"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "IMPORT",
                            "label": "snap.extensions.*",
                            "children": [
                                {
                                    "node type": "EXCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "ajax"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "IMPORT",
                            "label": "snap.editor",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "edit"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing and renaming a package with a string and a period fails
    {
        //"verbose": true,
        "name": "import packages: invalid name string/member mix",
        "program": "import new_name = \"snap\".invalid;",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "a package name is either a string or a list of identifiers separated by periods (.); you cannot mixed both."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.invalid",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "new_name"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing and renaming a package without a string or identifier
    {
        //"verbose": true,
        "name": "import packages: invalid name, missing string or identifier",
        "program": "import new_name = .invalid;",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the name of a package was expected."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": ".invalid",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "new_name"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Using '*' is not compatible with renaming
    {
        //"verbose": true,
        "name": "import packages: * cannot be used when renaming a package",
        "program": "import other_name = snap.*;",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the * notation cannot be used when renaming an import."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.*",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "other_name"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing and renaming a package without a string or identifier
    {
        //"verbose": true,
        "name": "import packages: * must be last",
        "program": "import snap.*.and.more;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the * notation can only be used once at the end of a name."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.*.and.more"
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing name must be identifiers seperated by periods
    {
        //"verbose": true,
        "name": "import packages: * must be last",
        "program": "import snap.*.and.more;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the * notation can only be used once at the end of a name."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.*.and.more"
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing name must be identifiers seperated by periods, not strings
    {
        //"verbose": true,
        "name": "import packages cannot include identifiers and strings",
        "program": "import snap.\"and\".more;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "a package name is either a string or a list of identifiers separated by periods (.); you cannot mixed both."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap..more"
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing name must end with an identifier
    {
        //"verbose": true,
        "name": "import package names cannot end with a period",
        "program": "import snap.and.;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the name of a package was expected."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.and."
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing name must end with an identifier
    {
        //"verbose": true,
        "name": "import package cannot just be an asterisk",
        "program": "import *;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "a composed name or a string was expected after 'import'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": ""
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing cannot at the same time include and exclude...
    {
        //"verbose": true,
        "name": "import package cannot exclude and include at the same time",
        "program": "import snap.stuff, exclude 'this', include 'that';",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_IMPORT",
                "line #": 1,
                "message": "include and exclude are mutually exclusive."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.stuff",
                            "children": [
                                {
                                    "node type": "EXCLUDE",
                                    "children": [
                                        {
                                            "node type": "STRING",
                                            "label": "this"
                                        }
                                    ]
                                },
                                {
                                    "node type": "INCLUDE",
                                    "children": [
                                        {
                                            "node type": "STRING",
                                            "label": "that"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing cannot at the same time include and exclude...
    {
        //"verbose": true,
        "name": "import package cannot include and exclude at the same time",
        "program": "import snap.stuff, include first, exclude last;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_IMPORT",
                "line #": 1,
                "message": "include and exclude are mutually exclusive."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.stuff",
                            "children": [
                                {
                                    "node type": "INCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "first"
                                        }
                                    ]
                                },
                                {
                                    "node type": "EXCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "last"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing followed by anything other than namespace, include, exclude
    {
        //"verbose": true,
        "name": "import package extras not namespace, include, nor exclude",
        "program": "import feather.stuff, include only_this_class, oops;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_IMPORT",
                "line #": 1,
                "message": "namespace, include or exclude was expected after the comma."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 1,
                "message": "';' was expected after 'IMPORT' (current token: 'IDENTIFIER')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "feather.stuff",
                            "children": [
                                {
                                    "node type": "INCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "only_this_class"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing followed by a comma and not namespace or an identifier
    {
        //"verbose": true,
        "name": "import with an unexpected token after the comma",
        "program": "import light.stuff, exclude but_that_class, 123;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 1,
                "message": "';' was expected after 'IMPORT' (current token: 'INT64')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "light.stuff",
                            "children": [
                                {
                                    "node type": "EXCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "but_that_class"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing followed by a comma and not namespace or an identifier
    {
        //"verbose": true,
        "name": "import two commas in a row...",
        "program": "import light.stuff, exclude one,, exclude two;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_IMPORT",
                "line #": 1,
                "message": "two commas in a row is not allowed while describing an import."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "light.stuff",
                            "children": [
                                {
                                    "node type": "EXCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "one"
                                        }
                                    ]
                                },
                                {
                                    "node type": "EXCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "two"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // Importing name with double dots
    {
        //"verbose": true,
        "name": "import two period one after another (i.e. a range)...",
        "program": "import string..buffer..overflow;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the name of a package is expected to be separated by single periods (.)."
            },
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the name of a package is expected to be separated by single periods (.)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "string.buffer.overflow"
                        }
                    ]
                }
            ]
        }
    },

    // Importing name with triple dots
    {
        //"verbose": true,
        "name": "import three periods one after another (i.e. a rest)...",
        "program": "import string...buffer...overflow;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the name of a package is expected to be separated by single periods (.)."
            },
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the name of a package is expected to be separated by single periods (.)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "string.buffer.overflow"
                        }
                    ]
                }
            ]
        }
    },
 
    // Use namespace
    {
        //"verbose": true,
        "name": "use namespace",
        "program": "use namespace snapwebsites;\n\
attrs use namespace extra;\n",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "USE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "snapwebsites"
                                }
                            ]
                        },
                        {
                            "node type": "USE",
                            "link attributes": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "attrs"
                                }
                            ],
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "extra"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Namespace block
    {
        //"verbose": true,
        "name": "namespace defining an enumeration",
        "program": "namespace snap { enum escargot { bourgogne, bigornot, planorbe }; };",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "NAMESPACE",
                            "label": "snap",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ENUM",
                                                    "label": "escargot",
                                                    "children": [
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "bourgogne",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 0
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "bigornot",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": 'bourgogne'
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "planorbe",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": 'bigornot'
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]

                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Namespace block without a block
    {
        //"verbose": true,
        "name": "namespace snapwebsites;",
        "program": "namespace snapwebsites;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_NAMESPACE",
                "line #": 1,
                "message": "'{' missing after the name of this namespace."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "NAMESPACE",
                            "label": "snapwebsites"
                        }
                    ]
                }
            ]
        }
    },
 
    // Namespace block without a name
    {
        //"verbose": true,
        "name": "namespace without a name makes things inside private",
        "program": "namespace { enum colors { red = { r: 255, g: 0, b: 0 }, green = { r: 0, g: 255, b: 0 }, blue = { r: 0, g: 0, b: 255 } }; }",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "NAMESPACE",
                            "label": "",
                            "link attributes": [
                                {
                                    "node type": "PRIVATE"
                                }
                            ],
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ENUM",
                                                    "label": "colors",
                                                    "children": [
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "red",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "OBJECT_LITERAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "r"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 255
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "g"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 0
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "b"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 0
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "green",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "OBJECT_LITERAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "r"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 0
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "g"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 255
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "b"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 0
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "blue",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "OBJECT_LITERAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "r"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 0
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "g"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 0
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "b"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 255
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Namespace block without a name and existing attributes
    {
        //"verbose": true,
        "slow": true,
        "name": "namespace without a name and some attributes",
        "program": "native static namespace { enum strength { min = 55, average, max }; }",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "NAMESPACE",
                            "label": "",
                            "link attributes": [
                                {
                                    "node type": "NATIVE"
                                },
                                {
                                    "node type": "STATIC"
                                },
                                {
                                    "node type": "PRIVATE"
                                }
                            ],
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ENUM",
                                                    "label": "strength",
                                                    "children": [
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "min",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 55
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "average",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "min"
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "max",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "average"
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Namespace block without a name and existing attributes including private
    {
        //"verbose": true,
        "name": "namespace without a name and some attributes including 'private'",
        "program": "native private static namespace { enum class strength: Number { min = 5 + 5, average = min + 3, max = min + 10 }; }",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "NAMESPACE",
                            "label": "",
                            "link attributes": [
                                {
                                    "node type": "NATIVE"
                                },
                                {
                                    "node type": "PRIVATE"
                                },
                                {
                                    "node type": "STATIC"
                                }
                            ],
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ENUM",
                                                    "label": "strength",
                                                    "flags": "ENUM_FLAG_CLASS",
                                                    "children": [
                                                        {
                                                            "node type": "TYPE",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "Number"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "min",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 5
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 5
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "average",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "min"
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 3
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "max",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "min"
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 10
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Forward enumeration
    {
        //"verbose": true,
        "name": "forward enumeration definition",
        "program": "enum forward_number;",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "forward_number"
                        }
                    ]
                }
            ]
        }
    },
 
    // Forward enumeration with missing name
    {
        //"verbose": true,
        "name": "forward enumeration without a name",
        "program": "enum class : strong_type;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_ENUM",
                "line #": 1,
                "message": "a forward enumeration must be named."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "",
                            "flags": "ENUM_FLAG_CLASS",
                            "children": [
                                {
                                    "node type": "TYPE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "strong_type"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Forward enumeration without a ';'
    {
        //"verbose": true,
        "name": "\"forward\" enumeration without a ';'",
        "program": "enum class with_a_name : random_type",
        "expected messages": [
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to start the 'enum' definition."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "with_a_name",
                            "flags": "ENUM_FLAG_CLASS",
                            "children": [
                                {
                                    "node type": "TYPE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "random_type"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration starting with ','
    {
        //"verbose": true,
        "name": "enumeration starting with a ','",
        "program": "enum cool_name : double_type { , oops };",
        "expected messages": [
            {
                "message level": 3,
                "error code": "UNEXPECTED_PUNCTUATION",
                "line #": 1,
                "message": "',' unexpected without a name."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "cool_name",
                            "children": [
                                {
                                    "node type": "TYPE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "double_type"
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "oops",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration with two ',' one after another
    {
        //"verbose": true,
        "name": "enumeration with a duplicate ','",
        "program": "enum class with_a_name : complex { killer , , whale };",
        "expected messages": [
            {
                "message level": 3,
                "error code": "UNEXPECTED_PUNCTUATION",
                "line #": 1,
                "message": "',' unexpected without a name."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "with_a_name",
                            "flags": "ENUM_FLAG_CLASS",
                            "children": [
                                {
                                    "node type": "TYPE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "complex"
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "killer",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "whale",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "killer"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration with a missing identifier
    {
        //"verbose": true,
        "name": "enumeration with a missing identifier with assignment",
        "program": "enum simple { v1, v2 = 3, = 10 };",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "INVALID_ENUM",
                "line #": 1,
                "message": "each 'enum' entry needs to include an identifier."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "simple",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "v1",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v2",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 3
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 10
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration with a string instead of an identifier
    {
        //"verbose": true,
        "name": "enumeration with a string instead of the identifier",
        "program": "enum simple { v1, v2 = 3, \"v3\" = 10 };",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "INVALID_ENUM",
                "line #": 1,
                "message": "each 'enum' entry needs to include an identifier."
            }
            //{
            //    "message level": 2,
            //    "error code": "COMMA_EXPECTED",
            //    "line #": 1,
            //    "message": "',' expected between enumeration elements."
            //}
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "simple",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "v1",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v2",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 3
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 10
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration with a missing comma
    {
        //"verbose": true,
        "name": "enumeration with two identifiers in a row",
        "program": "enum missing_comma { v1 v2, v3 };",
        "expected messages": [
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 1,
                "message": "',' expected between enumeration elements."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "missing_comma",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "v1",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v2",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "v1"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v3",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "v2"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration without the '}'
    {
        //"verbose": true,
        "name": "enumeration missing the '}' at the end",
        "program": "enum missing_closing_bracket { v1, v2, v3 ;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to close the 'enum' definition."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "missing_closing_bracket",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "v1",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v2",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "v1"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v3",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "v2"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration without the '}' and ';'
    {
        //"verbose": true,
        "name": "enumeration missing the '}' and ';' at the end",
        "program": "enum missing_closing_bracket { v1, v2, v3",
        "expected messages": [
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 1,
                "message": "',' expected between enumeration elements."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to close the 'enum' definition."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "missing_closing_bracket",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "v1",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v2",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "v1"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v3",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "v2"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A standard type with a range (integers)
    {
        //"verbose": true,
        "name": "type with a range of integers",
        "program": "use large_byte as 0 .. 65535;",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "large_byte"
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 0
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 65535
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A standard type using 'mod'
    {
        //"verbose": true,
        "name": "a mod type",
        "program": "use three_bit_number as mod 8;",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "flags": "TYPE_FLAG_MODULO",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "three_bit_number"
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 8
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A 'mod' type with a string
    {
        //"verbose": true,
        "name": "a mod type using a string",
        "program": "use not_a_number as mod '8';",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the modulo must be a literal number."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "flags": "TYPE_FLAG_MODULO",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "not_a_number"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A 'mod' type with a string
    {
        //"verbose": true,
        "name": "a mod type without the number",
        "program": "use not_a_number as mod /*oops*/ ;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "missing literal number for a numeric type declaration."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "flags": "TYPE_FLAG_MODULO",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "not_a_number"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with string to start with...
    {
        //"verbose": true,
        "name": "a type without a string instead of a number (left)",
        "program": "use still_not_a_number as '8' .. 92;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must start with a literal number."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 1,
                "message": "';' was expected after 'USE' (current token: 'STRING')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "still_not_a_number"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with string to end with...
    {
        //"verbose": true,
        "name": "a type without a string instead of a number (right)",
        "program": "use not_a_number as 8 .. '92';",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must end with a literal number."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "not_a_number"
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 8
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with two different types of numbers
    {
        //"verbose": true,
        "name": "a type with a float and an integer",
        "program": "use not_a_number as 8.3 .. +92;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must use numbers of the same type on both sides."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "not_a_number"
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 8.3
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 92
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with two different types of numbers
    {
        //"verbose": true,
        "name": "a type with an integer and a float",
        "program": "use not_a_number as +83 .. 92.11;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must use numbers of the same type on both sides."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "not_a_number"
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 83
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 92.11
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with a REST instead of a RANGE
    {
        //"verbose": true,
        "name": "type with '...' instead of '..'",
        "program": "use bad_range as -65 ... 65;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must use '..' to separate the minimum and maximum boundaries (unexpected 'REST')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "bad_range"
                                },
                                {
                                    "node type": "INT64",
                                    "integer": -65
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 65
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with a REST instead of a RANGE
    {
        //"verbose": true,
        "name": "type with '...' instead of '..' and an inverted range",
        "program": "use bad_range as 65 ... -65;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must use '..' to separate the minimum and maximum boundaries (unexpected 'REST')."
            },
            {
                "message level": 3,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "numeric type declaration is empty (only accepts 'null') because left value of range is larger than right value."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "bad_range"
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 65
                                },
                                {
                                    "node type": "INT64",
                                    "integer": -65
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with a REST instead of a RANGE
    {
        //"verbose": true,
        "name": "type with '...' instead of '..' and floats",
        "program": "use bad_range as -6.5 ... 6.5;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must use '..' to separate the minimum and maximum boundaries (unexpected 'REST')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "bad_range"
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": -6.5
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 6.5
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with a REST instead of a RANGE
    {
        //"verbose": true,
        "name": "type with '...' instead of '..' and inverted range of floats",
        "program": "use bad_range as 6.5 ... -6.5;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must use '..' to separate the minimum and maximum boundaries (unexpected 'REST')."
            },
            {
                "message level": 3,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "numeric type declaration is empty (only accepts 'null') because left value of range is larger than right value."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "bad_range"
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 6.5
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": -6.5
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // Test all the pragmas in one go with all possible data
    {
        //"verbose": true,
        "name": "verify all the pragma names",
        "program": "use allow_with, no_allow_with(),\n\
binary(true), no_binary(false),\n\
coverage(\"a\"), no_coverage(\"b\"),\n\
debug(444), no_debug(-4444),\n\
extended_escape_sequences(44.4), no_extended_escape_sequences(-44.44),\n\
extended_operators, no_extended_operators(),\n\
extended_statements(true), no_extended_statements(false),\n\
octal(\"a\"), no_octal(\"b\"),\n\
strict(444), no_strict(-4444),\n\
trace(44.4), no_trace(-44.44),\n\
trace_to_object(1), no_trace_to_object(0),\n\
unsafe_math(444), no_strict(-4444);\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INCOMPATIBLE_PRAGMA_ARGUMENT",
                "line #": 3,
                "message": "incompatible pragma argument."
            },
            {
                "message level": 2,
                "error code": "INCOMPATIBLE_PRAGMA_ARGUMENT",
                "line #": 3,
                "message": "incompatible pragma argument."
            },
            {
                "message level": 2,
                "error code": "INCOMPATIBLE_PRAGMA_ARGUMENT",
                "line #": 8,
                "message": "incompatible pragma argument."
            },
            {
                "message level": 2,
                "error code": "INCOMPATIBLE_PRAGMA_ARGUMENT",
                "line #": 8,
                "message": "incompatible pragma argument."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST"
                }
            ]
        }
    },

    //// Test all pragmas with 0 and 1 and '?'
    ////
    //// WARNING: I use ONE option per line for a good reason:
    ////          that way the verification really tests that
    ////          one pragma and not any other (putting all
    ////          5 pragma combinations on the same line would not prove
    ////          much, only that a certain number of errors occur!)
    ////
    //// TODO: add the extended_statements(2)/(3) tests
    //{
    //    //"verbose": true,
    //    "name": "verify all the pragma 'prima' tests",
    //    "program": "use\n\
    //allow_with?,\n\
    //allow_with()?,\n\
    //allow_with(0)?,\n\
    //allow_with(1)?,\n\
    //no_allow_with()?,\n\
    //no_allow_with(0)?,\n\
    //no_allow_with(1)?,\n\
    //extended_operators?,\n\
    //extended_operators()?,\n\
    //extended_operators(0)?,\n\
    //extended_operators(1)?,\n\
    //extended_operators(2)?,\n\
    //extended_operators(3)?,\n\
    //no_extended_operators()?,\n\
    //no_extended_operators(0)?,\n\
    //no_extended_operators(1)?,\n\
    //no_extended_operators(2)?,\n\
    //no_extended_operators(3)?;\n\
    //",
    //    "expected messages": [
    //        // Allow With
    //        {
    //            "options": "allow_with",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 2,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "allow_with",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 3,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "no_allow_with",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 4,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "allow_with",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 5,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "no_allow_with",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 6,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "no_allow_with",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 7,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "allow_with",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 8,
    //            "message": "prima pragma failed."
    //        },
    //        // Extended Operators
    //        {
    //            "options": "extended_operators,no_extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 9,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "extended_operators,no_extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 10,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "no_extended_operators,no_extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 11,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "extended_operators,no_extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 12,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "no_extended_operators,extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 13,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "extended_operators,extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 14,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "no_extended_operators,no_extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 15,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "no_extended_operators,no_extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 16,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "extended_operators,no_extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 17,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "no_extended_operators,extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 18,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "extended_operators,extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 19,
    //            "message": "prima pragma failed."
    //        }
    //    ],
    //    "result": {
    //        "node type": "PROGRAM",
    //        "children": [
    //            {
    //                "node type": "DIRECTIVE_LIST"
    //            }
    //        ]
    //    }
    //},

    // Test all pragmas with 0 and 1 and '?'
    //
    // WARNING: I use ONE option per line for a good reason:
    //          that way the verification really tests that
    //          one pragma and not any other (putting all
    //          5 pragma combinations on the same line would not prove
    //          much, only that a certain number of errors occur!)
    {
        //"verbose": true,
        "slow": true,
        "name": "verify all the pragma 'prima' tests",
        "program": "use\n\
    allow_with?,\n\
    allow_with()?,\n\
    allow_with(0)?,\n\
    allow_with(1)?,\n\
    no_allow_with()?,\n\
    no_allow_with(0)?,\n\
    no_allow_with(1)?,\n\
    binary?,\n\
    binary()?,\n\
    binary(0)?,\n\
    binary(1)?,\n\
    no_binary()?,\n\
    no_binary(0)?,\n\
    no_binary(1)?,\n\
    coverage?,\n\
    coverage()?,\n\
    coverage(0)?,\n\
    coverage(1)?,\n\
    no_coverage()?,\n\
    no_coverage(0)?,\n\
    no_coverage(1)?,\n\
    debug?,\n\
    debug()?,\n\
    debug(0)?,\n\
    debug(1)?,\n\
    no_debug()?,\n\
    no_debug(0)?,\n\
    no_debug(1)?,\n\
    extended_escape_sequences?,\n\
    extended_escape_sequences()?,\n\
    extended_escape_sequences(0)?,\n\
    extended_escape_sequences(1)?,\n\
    no_extended_escape_sequences()?,\n\
    no_extended_escape_sequences(0)?,\n\
    no_extended_escape_sequences(1)?,\n\
    extended_operators?,\n\
    extended_operators()?,\n\
    extended_operators(0)?,\n\
    extended_operators(1)?,\n\
    extended_operators(2)?,\n\
    extended_operators(3)?,\n\
    no_extended_operators()?,\n\
    no_extended_operators(0)?,\n\
    no_extended_operators(1)?,\n\
    no_extended_operators(2)?,\n\
    no_extended_operators(3)?,\n\
    extended_statements?,\n\
    extended_statements()?,\n\
    extended_statements(0)?,\n\
    extended_statements(1)?,\n\
    no_extended_statements()?,\n\
    no_extended_statements(0)?,\n\
    no_extended_statements(1)?,\n\
    octal?,\n\
    octal()?,\n\
    octal(0)?,\n\
    octal(1)?,\n\
    no_octal()?,\n\
    no_octal(0)?,\n\
    no_octal(1)?,\n\
    strict?,\n\
    strict()?,\n\
    strict(0)?,\n\
    strict(1)?,\n\
    no_strict()?,\n\
    no_strict(0)?,\n\
    no_strict(1)?,\n\
    trace?,\n\
    trace()?,\n\
    trace(0)?,\n\
    trace(1)?,\n\
    no_trace()?,\n\
    no_trace(0)?,\n\
    no_trace(1)?,\n\
    unsafe_math?,\n\
    unsafe_math()?,\n\
    unsafe_math(0)?,\n\
    unsafe_math(1)?,\n\
    no_unsafe_math()?,\n\
    no_unsafe_math(0)?,\n\
    no_unsafe_math(1)?;\n\
    ",
        "expected messages": [
            // Allow With
            {
                "options": "allow_with",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 2,
                "message": "prima pragma failed."
            },
            {
                "options": "allow_with",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 3,
                "message": "prima pragma failed."
            },
            {
                "options": "no_allow_with",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 4,
                "message": "prima pragma failed."
            },
            {
                "options": "allow_with",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 5,
                "message": "prima pragma failed."
            },
            {
                "options": "no_allow_with",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 6,
                "message": "prima pragma failed."
            },
            {
                "options": "no_allow_with",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 7,
                "message": "prima pragma failed."
            },
            {
                "options": "allow_with",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 8,
                "message": "prima pragma failed."
            },
            // Binary
            {
                "options": "binary",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 9,
                "message": "prima pragma failed."
            },
            {
                "options": "binary",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 10,
                "message": "prima pragma failed."
            },
            {
                "options": "no_binary",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 11,
                "message": "prima pragma failed."
            },
            {
                "options": "binary",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 12,
                "message": "prima pragma failed."
            },
            {
                "options": "no_binary",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 13,
                "message": "prima pragma failed."
            },
            {
                "options": "no_binary",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 14,
                "message": "prima pragma failed."
            },
            {
                "options": "binary",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 15,
                "message": "prima pragma failed."
            },
            // Coverage
            {
                "options": "coverage",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 16,
                "message": "prima pragma failed."
            },
            {
                "options": "coverage",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 17,
                "message": "prima pragma failed."
            },
            {
                "options": "no_coverage",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 18,
                "message": "prima pragma failed."
            },
            {
                "options": "coverage",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 19,
                "message": "prima pragma failed."
            },
            {
                "options": "no_coverage",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 20,
                "message": "prima pragma failed."
            },
            {
                "options": "no_coverage",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 21,
                "message": "prima pragma failed."
            },
            {
                "options": "coverage",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 22,
                "message": "prima pragma failed."
            },
            // Debug
            {
                "options": "debug",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 23,
                "message": "prima pragma failed."
            },
            {
                "options": "debug",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 24,
                "message": "prima pragma failed."
            },
            {
                "options": "no_debug",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 25,
                "message": "prima pragma failed."
            },
            {
                "options": "debug",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 26,
                "message": "prima pragma failed."
            },
            {
                "options": "no_debug",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 27,
                "message": "prima pragma failed."
            },
            {
                "options": "no_debug",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 28,
                "message": "prima pragma failed."
            },
            {
                "options": "debug",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 29,
                "message": "prima pragma failed."
            },
            // Extended Escape Sequences
            {
                "options": "extended_escape_sequences",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 30,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_escape_sequences",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 31,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_escape_sequences",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 32,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_escape_sequences",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 33,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_escape_sequences",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 34,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_escape_sequences",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 35,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_escape_sequences",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 36,
                "message": "prima pragma failed."
            },
            // Extended Operators
            {
                "options": "extended_operators,no_extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 37,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_operators,no_extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 38,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_operators,no_extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 39,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_operators,no_extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 40,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_operators,extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 41,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_operators,extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 42,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_operators,no_extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 43,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_operators,no_extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 44,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_operators,no_extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 45,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_operators,extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 46,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_operators,extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 47,
                "message": "prima pragma failed."
            },
            // Extended Statements
            {
                "options": "extended_statements,no_extended_statements_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 48,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_statements,no_extended_statements_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 49,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_statements,no_extended_statements_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 50,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_statements,no_extended_statements_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 51,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_statements,no_extended_statements_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 52,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_statements,no_extended_statements_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 53,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_statements,no_extended_statements_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 54,
                "message": "prima pragma failed."
            },
            // Octal
            {
                "options": "octal",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 55,
                "message": "prima pragma failed."
            },
            {
                "options": "octal",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 56,
                "message": "prima pragma failed."
            },
            {
                "options": "no_octal",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 57,
                "message": "prima pragma failed."
            },
            {
                "options": "octal",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 58,
                "message": "prima pragma failed."
            },
            {
                "options": "no_octal",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 59,
                "message": "prima pragma failed."
            },
            {
                "options": "no_octal",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 60,
                "message": "prima pragma failed."
            },
            {
                "options": "octal",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 61,
                "message": "prima pragma failed."
            },
            // Strict
            {
                "options": "strict",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 62,
                "message": "prima pragma failed."
            },
            {
                "options": "strict",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 63,
                "message": "prima pragma failed."
            },
            {
                "options": "no_strict",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 64,
                "message": "prima pragma failed."
            },
            {
                "options": "strict",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 65,
                "message": "prima pragma failed."
            },
            {
                "options": "no_strict",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 66,
                "message": "prima pragma failed."
            },
            {
                "options": "no_strict",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 67,
                "message": "prima pragma failed."
            },
            {
                "options": "strict",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 68,
                "message": "prima pragma failed."
            },
            // Trace
            {
                "options": "trace",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 69,
                "message": "prima pragma failed."
            },
            {
                "options": "trace",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 70,
                "message": "prima pragma failed."
            },
            {
                "options": "no_trace",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 71,
                "message": "prima pragma failed."
            },
            {
                "options": "trace",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 72,
                "message": "prima pragma failed."
            },
            {
                "options": "no_trace",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 73,
                "message": "prima pragma failed."
            },
            {
                "options": "no_trace",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 74,
                "message": "prima pragma failed."
            },
            {
                "options": "trace",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 75,
                "message": "prima pragma failed."
            },
            // Unsafe Math
            {
                "options": "unsafe_math",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 76,
                "message": "prima pragma failed."
            },
            {
                "options": "unsafe_math",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 77,
                "message": "prima pragma failed."
            },
            {
                "options": "no_unsafe_math",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 78,
                "message": "prima pragma failed."
            },
            {
                "options": "unsafe_math",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 79,
                "message": "prima pragma failed."
            },
            {
                "options": "no_unsafe_math",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 80,
                "message": "prima pragma failed."
            },
            {
                "options": "no_unsafe_math",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 81,
                "message": "prima pragma failed."
            },
            {
                "options": "unsafe_math",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 82,
                "message": "prima pragma failed."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST"
                }
            ]
        }
    },

    // Verify the tests after a set
    {
        //"verbose": true,
        "slow": true,
        "name": "verify that setting or clearing a pragma results in the correct value",
        "program": "use allow_with(1), allow_with?, allow_with()?, allow_with(1)?, allow_with(0), allow_with(0)?,\n\
    no_allow_with(1), no_allow_with(1)?, no_allow_with(0), no_allow_with?, no_allow_with()?, no_allow_with(0)?,\n\
    binary(1), binary?, binary()?, binary(1)?, binary(0), binary(0)?,\n\
    no_binary(1), no_binary(1)?, no_binary(0), no_binary?, no_binary()?, no_binary(0)?,\n\
    coverage(1), coverage?, coverage()?, coverage(1)?, coverage(0), coverage(0)?,\n\
    no_coverage(1), no_coverage(1)?, no_coverage(0), no_coverage?, no_coverage()?, no_coverage(0)?,\n\
    debug(1), debug?, debug()?, debug(1)?, debug(0), debug(0)?,\n\
    no_debug(1), no_debug(1)?, no_debug(0), no_debug?, no_debug()?, no_debug(0)?,\n\
    debug_lexer(1), debug_lexer?, debug_lexer()?, debug_lexer(1)?, debug_lexer(0), debug_lexer(0)?,\n\
    no_debug_lexer(1), no_debug_lexer(1)?, no_debug_lexer(0), no_debug_lexer?, no_debug_lexer()?, no_debug_lexer(0)?,\n\
    extended_escape_sequences(1), extended_escape_sequences?, extended_escape_sequences()?, extended_escape_sequences(1)?, extended_escape_sequences(0), extended_escape_sequences(0)?,\n\
    no_extended_escape_sequences(1), no_extended_escape_sequences(1)?, no_extended_escape_sequences(0), no_extended_escape_sequences?, no_extended_escape_sequences()?, no_extended_escape_sequences(0)?,\n\
    extended_operators(1), extended_operators?, extended_operators()?, extended_operators(1)?, extended_operators(0), extended_operators(0)?,\n\
    no_extended_operators(1), no_extended_operators(1)?, no_extended_operators(0), no_extended_operators?, no_extended_operators()?, no_extended_operators(0)?,\n\
    extended_statements(1), extended_statements?, extended_statements()?, extended_statements(1)?, extended_statements(0), extended_statements(0)?,\n\
    no_extended_statements(1), no_extended_statements(1)?, no_extended_statements(0), no_extended_statements?, no_extended_statements()?, no_extended_statements(0)?,\n\
    octal(1), octal?, octal()?, octal(1)?, octal(0), octal(0)?,\n\
    no_octal(1), no_octal(1)?, no_octal(0), no_octal?, no_octal()?, no_octal(0)?,\n\
    strict(1), strict?, strict()?, strict(1)?, strict(0), strict(0)?,\n\
    no_strict(1), no_strict(1)?, no_strict(0), no_strict?, no_strict()?, no_strict(0)?,\n\
    trace(1), trace?, trace()?, trace(1)?, trace(0), trace(0)?,\n\
    no_trace(1), no_trace(1)?, no_trace(0), no_trace?, no_trace()?, no_trace(0)?,\n\
    unsafe_math(1), unsafe_math?, unsafe_math()?, unsafe_math(1)?, unsafe_math(0), unsafe_math(0)?,\n\
    no_unsafe_math(1), no_unsafe_math(1)?, no_unsafe_math(0), no_unsafe_math?, no_unsafe_math()?, no_unsafe_math(0)?;\n\
\n",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST"
                }
            ]
        }
    },

    // Test that (-[true|false|string]) is not valid
    {
        //"verbose": true,
        "name": "verify that (-) is invalid as a pragma parameter",
        "program": "use octal(-);\n\
use binary(-\"flow\");\n\
use unsafe_math(-false);\n\
use strict(-true);\n\
use trace(*);\n\
use debug() extended_operators();\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_PRAGMA",
                "line #": 1,
                "message": "a pragma argument cannot just be '-'."
            },
            {
                "message level": 2,
                "error code": "BAD_PRAGMA",
                "line #": 2,
                "message": "invalid negative argument for a pragma."
            },
            {
                "message level": 2,
                "error code": "INCOMPATIBLE_PRAGMA_ARGUMENT",
                "line #": 2,
                "message": "incompatible pragma argument."
            },
            {
                "message level": 2,
                "error code": "BAD_PRAGMA",
                "line #": 3,
                "message": "invalid negative argument for a pragma."
            },
            {
                "message level": 2,
                "error code": "BAD_PRAGMA",
                "line #": 4,
                "message": "invalid negative argument for a pragma."
            },
            {
                "message level": 2,
                "error code": "BAD_PRAGMA",
                "line #": 5,
                "message": "invalid argument type for a pragma."
            },
            {
                "message level": 2,
                "error code": "BAD_PRAGMA",
                "line #": 5,
                "message": "invalid argument for a pragma."
            },
            {
                "message level": 2,
                "error code": "BAD_PRAGMA",
                "line #": 5,
                "message": "pragmas must be separated by commas and ended by a semicolon."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 5,
                "message": "';' was expected after 'USE' (current token: 'MULTIPLY')."
            },
            {
                "message level": 2,
                "error code": "BAD_PRAGMA",
                "line #": 6,
                "message": "pragmas must be separated by commas."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST"
                }
            ]
        }
    },

    // Yield expression
    {
        //"verbose": true,
        "name": "Yield an expression",
        "program": "yield 23 ** 2;",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '**' operator is only available when extended operators are authorized (use extended_operators;)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "YIELD",
                            "children": [
                                {
                                    "node type": "POWER",
                                    "children": [
                                        {
                                            "node type": "INT64",
                                            "integer": 23
                                        },
                                        {
                                            "node type": "INT64",
                                            "integer": 2
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // Yield missing expression
    {
        //"verbose": true,
        "name": "Yield without the mandatory expression",
        "program": "yield;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "EXPRESSION_EXPECTED",
                "line #": 1,
                "message": "yield is expected to be followed by an expression."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST"
                }
            ]
        }
    },

    // While with a broken block
    {
        //"verbose": true,
        "name": "'while' with a broken block",
        "program": "while(a ? a.color : false) { a.color = rand(seed: 33);",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to close a block."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "WHILE",
                            "children": [
                                {
                                    "node type": "CONDITIONAL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "MEMBER",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "color"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FALSE"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ASSIGNMENT",
                                                    "children": [
                                                        {
                                                            "node type": "MEMBER",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "a"
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "color"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "CALL",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "rand"
                                                                },
                                                                {
                                                                    "node type": "LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "NAME",
                                                                            "label": "seed",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 33
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // While with a broken block case 2
    {
        //"verbose": true,
        "name": "'while' with a broken block v2",
        "program": "while(a ? a.color : false) a.color = rand(seed: 33)",
        "expected messages": [
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to open the 'WHILE' block."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 1,
                "message": "';' was expected after 'MEMBER' (current token: 'EOF')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "WHILE",
                            "children": [
                                {
                                    "node type": "CONDITIONAL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "MEMBER",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "color"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FALSE"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "MEMBER",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "a"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "color"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "CALL",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "rand"
                                                        },
                                                        {
                                                            "node type": "LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "NAME",
                                                                    "label": "seed",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 33
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // While with a broken block case 3
    {
        //"verbose": true,
        "name": "'while' with a broken block v3",
        "program": "while(a ? a.color : false) a.color = rand(seed: 33) }",
        "expected messages": [
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to open the 'WHILE' block."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' not expected without a '{'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "WHILE",
                            "children": [
                                {
                                    "node type": "CONDITIONAL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "MEMBER",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "color"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FALSE"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "MEMBER",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "a"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "color"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "CALL",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "rand"
                                                        },
                                                        {
                                                            "node type": "LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "NAME",
                                                                    "label": "seed",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 33
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // While with a broken block case 4
    {
        //"verbose": true,
        "name": "'while' with a broken block v4",
        "program": "while(a ? a.color : false) a.color = rand(seed: 33); volatile",
        "expected messages": [
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to open the 'WHILE' block."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "UNEXPECTED_EOF",
                "line #": 1,
                "message": "unexpected end of file reached."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "WHILE",
                            "children": [
                                {
                                    "node type": "CONDITIONAL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "MEMBER",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "color"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FALSE"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "MEMBER",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "a"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "color"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "CALL",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "rand"
                                                        },
                                                        {
                                                            "node type": "LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "NAME",
                                                                    "label": "seed",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 33
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // While with a broken block case 5
    {
        //"verbose": true,
        "name": "'while' with a broken block v5",
        "program": "while(a ? a.color : false) a.color = rand(seed: 33); volatile }",
        "expected messages": [
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to open the 'WHILE' block."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            //{
            //    "message level": 2,
            //    "error code": "CURVLY_BRACKETS_EXPECTED",
            //    "line #": 1,
            //    "message": "unexpected '}'."
            //},
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' not expected without a '{'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "WHILE",
                            "children": [
                                {
                                    "node type": "CONDITIONAL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "MEMBER",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "color"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FALSE"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "MEMBER",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "a"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "color"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "CALL",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "rand"
                                                        },
                                                        {
                                                            "node type": "LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "NAME",
                                                                    "label": "seed",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 33
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // 'switch' 'with' 'break' 'continue'
    {
        //"verbose": true,
        "name": "'switch' 'with' 'break' and 'continue'",
        "program": "switch(a <=> b) with(~=) autobreak { case 3: a = 3; break; case 6 ... 8: b++; continue; case 'ignore': a.color = b; break default; case 11: a = b <% 5; break bob; default: debugger; b = a + 3; continue crash; }",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the 'COMPARE' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "extended_statements|extended_statements_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "a switch() statement can be followed by a 'with' only if extended statements were turned on (use extended_statements;)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "extended_statements|extended_statements_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "ranges in a 'case' statement are only accepted when extended statements are allowed (use extended_statements;)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the 'ROTATE_LEFT' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SWITCH",
                            "link attributes": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "autobreak"
                                }
                            ],
                            "switch operator": "MATCH",
                            "children": [
                                {
                                    "node type": "COMPARE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "b"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        // case 3
                                        {
                                            "node type": "CASE",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 3
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "INT64",
                                                    "integer": 3
                                                }
                                            ]
                                        },
                                        {
                                           "node type": "BREAK",
                                            "label": ""
                                        },
                                        // case 6
                                        {
                                            "node type": "CASE",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 6
                                                },
                                                {
                                                    "node type": "INT64",
                                                    "integer": 8
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "POST_INCREMENT",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "b"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "CONTINUE",
                                            "label": ""
                                        },
                                        // case ignore
                                        {
                                            "node type": "CASE",
                                            "children": [
                                                {
                                                    "node type": "STRING",
                                                    "label": "ignore"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "MEMBER",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "a"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "color"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "b"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "BREAK",
                                            "label": ""
                                        },
                                        // case 11
                                        {
                                            "node type": "CASE",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 11
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "ROTATE_LEFT",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "b"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 5
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "BREAK",
                                            "label": "bob"
                                        },
                                        // default
                                        {
                                            "node type": "DEFAULT"
                                        },
                                        {
                                            "node type": "DEBUGGER"
                                        },
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "b"
                                                },
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "a"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 3
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "CONTINUE",
                                            "label": "crash"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // Invalid break/continue
    //
    // IMPORTANT NOTE: When certain errors are detected the processor
    //                 skips all tokens up to '}' or ';' and a few other
    //                 characters (really ';' in our case here); thus
    //                 certain things such as the <? operator are silently
    //                 skipped
    {
        //"verbose": true,
        "name": "Invalid break/continue",
        "program": "switch(type ^ 7) { case 't1': a **= 3; break orange case 't2': a = a <? 22; continue case 't3': ++a; test(a = c | b, rest: ...); break default; default a = -105.33; ; }",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the 'ASSIGNMENT_POWER' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_LABEL",
                "line #": 1,
                "message": "'break' and 'continue' can be followed by one label only."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 1,
                "message": "';' was expected after 'BREAK' (current token: 'CASE')."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "INVALID_LABEL",
                "line #": 1,
                "message": "'break' and 'continue' can be followed by one label only."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 1,
                "message": "';' was expected after 'CONTINUE' (current token: 'CASE')."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "DEFAULT_LABEL",
                "line #": 1,
                "message": "default label expected to be followed by ':'."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SWITCH",
                            "switch operator": "UNKNOWN",
                            "children": [
                                {
                                    "node type": "BITWISE_XOR",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "type"
                                        },
                                        {
                                            "node type": "INT64",
                                            "integer": 7
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        // case 't1'
                                        {
                                            "node type": "CASE",
                                            "children": [
                                                {
                                                    "node type": "STRING",
                                                    "label": "t1"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "ASSIGNMENT_POWER",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "INT64",
                                                    "integer": 3
                                                }
                                            ]
                                        },
                                        {
                                           "node type": "BREAK",
                                            "label": "orange"
                                        },
                                        {
                                            "node type": "CONTINUE",
                                            "label": ""
                                        },
                                        // case 't3' -- skipped because of missing ';'
                                        {
                                            "node type": "CALL",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "test"
                                                },
                                                {
                                                    "node type": "LIST",
                                                    "children": [
                                                        {
                                                            "node type": "ASSIGNMENT",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "a"
                                                                },
                                                                {
                                                                    "node type": "BITWISE_OR",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "c"
                                                                        },
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "b"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "NAME",
                                                            "label": "rest",
                                                            "children": [
                                                                {
                                                                    "node type": "REST"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "BREAK",
                                            "label": ""
                                        },
                                        // default
                                        {
                                            "node type": "DEFAULT"
                                        },
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "SUBTRACT",
                                                    "children": [
                                                        {
                                                            "node type": "FLOAT64",
                                                            "float": 105.33
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // Missing ':' after case expression, check try/catch
    {
        //"verbose": true,
        "name": "Missing ':' after case expression, and try/catch",
        "program": "try {\n\
    a.dog().bark().loudly();\n\
    switch(a.cat(3 <% a.bird())) with(==)\n\
    private {\n\
        case 89 b = 111; a ||= 3; break orange;\n\
        case 101: a = a >? 22; continue;\n\
    }\n\
}\n\
catch(a: Number) { console.log('number: ' + a); }\n\
catch(e if e instanceof RangeError) { alert('range problem'); }\n\
catch(e: Exception if e instanceof EvalError) { alert('eval problem'); }\n\
catch(...) { dom.setAttr('title', 'Click here'); }",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 3,
                "message": "the 'ROTATE_LEFT' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "extended_statements|extended_statements_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 3,
                "message": "a switch() statement can be followed by a 'with' only if extended statements were turned on (use extended_statements;)."
            },
            {
                "message level": 2,
                "error code": "CASE_LABEL",
                "line #": 5,
                "message": "case expression expected to be followed by ':'."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 5,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 6,
                "message": "the 'MAXIMUM' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 6,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TRY",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "CALL",
                                            "children": [
                                                {
                                                    "node type": "MEMBER",
                                                    "children": [
                                                        {
                                                            "node type": "CALL",
                                                            "children": [
                                                                {
                                                                    "node type": "MEMBER",
                                                                    "children": [
                                                                        {
                                                                            "node type": "CALL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "a"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "dog"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "LIST"
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "bark"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "LIST"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "loudly"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "LIST"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "SWITCH",
                                            "switch operator": "EQUAL",
                                            "link attributes": [
                                                {
                                                    "node type": "PRIVATE"
                                                }
                                            ],
                                            "children": [
                                                {
                                                    "node type": "CALL",
                                                    "children": [
                                                        {
                                                            "node type": "MEMBER",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "a"
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "cat"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "ROTATE_LEFT",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 3
                                                                        },
                                                                        {
                                                                            "node type": "CALL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "a"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "bird"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "LIST"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        // case 89
                                                        {
                                                            "node type": "CASE",
                                                            "children": [
                                                                {
                                                                    "node type": "INT64",
                                                                    "integer": 89
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "ASSIGNMENT",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "b"
                                                                },
                                                                {
                                                                    "node type": "INT64",
                                                                    "integer": 111
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "ASSIGNMENT_LOGICAL_OR",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "a"
                                                                },
                                                                {
                                                                    "node type": "INT64",
                                                                    "integer": 3
                                                                }
                                                            ]
                                                        },
                                                        {
                                                           "node type": "BREAK",
                                                            "label": "orange"
                                                        },
                                                        // case 101
                                                        {
                                                            "node type": "CASE",
                                                            "children": [
                                                                {
                                                                    "node type": "INT64",
                                                                    "integer": 101
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "ASSIGNMENT",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "a"
                                                                },
                                                                {
                                                                    "node type": "MAXIMUM",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "a"
                                                                        },
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 22
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "CONTINUE",
                                                            "label": ""
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "CATCH",
                            "flags": "CATCH_FLAG_TYPED",
                            "children": [
                                {
                                    "node type": "PARAMETERS",
                                    "children": [
                                        {
                                            "node type": "PARAM",
                                            "label": "a",
                                            "children": [
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "Number"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "CALL",
                                            "children": [
                                                {
                                                    "node type": "MEMBER",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "console"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "log"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "LIST",
                                                    "children": [
                                                        {
                                                            "node type": "ADD",
                                                            "children": [
                                                                {
                                                                    "node type": "STRING",
                                                                    "label": "number: "
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "a"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "CATCH",
                            "children": [
                                {
                                    "node type": "PARAMETERS",
                                    "children": [
                                        {
                                            "node type": "PARAM",
                                            "label": "e"
                                        }
                                    ]
                                },
                                {
                                    "node type": "IF",
                                    "children": [
                                        {
                                            "node type": "INSTANCEOF",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "e"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "RangeError"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "CALL",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "alert"
                                                },
                                                {
                                                    "node type": "LIST",
                                                    "children": [
                                                        {
                                                            "node type": "STRING",
                                                            "label": "range problem"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "CATCH",
                            "flags": "CATCH_FLAG_TYPED",
                            "children": [
                                {
                                    "node type": "PARAMETERS",
                                    "children": [
                                        {
                                            "node type": "PARAM",
                                            "label": "e",
                                            "children": [
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "Exception"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "IF",
                                    "children": [
                                        {
                                            "node type": "INSTANCEOF",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "e"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "EvalError"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "CALL",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "alert"
                                                },
                                                {
                                                    "node type": "LIST",
                                                    "children": [
                                                        {
                                                            "node type": "STRING",
                                                            "label": "eval problem"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "CATCH",
                            "children": [
                                {
                                    "node type": "PARAMETERS",
                                    "children": [
                                        {
                                            "node type": "PARAM",
                                            "label": "",
                                            "flags": "PARAM_FLAG_REST"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "CALL",
                                            "children": [
                                                {
                                                    "node type": "MEMBER",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "dom"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "setAttr"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "LIST",
                                                    "children": [
                                                        {
                                                            "node type": "STRING",
                                                            "label": "title"
                                                        },
                                                        {
                                                            "node type": "STRING",
                                                            "label": "Click here"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // Catch doesn't like void
    {
        //"verbose": true,
        "name": "catch(void) is not valid",
        "program": "catch(void) { throw; }\n\
catch(a, b, c) { throw b; }\n\
catch(a = 5) { return a >>>= 3, a ** 2; }\n\
catch(bad) return bad^1;\n\
catch(oops { return oops & 7; }\n\
catch argh) { throw new RangeError(\"really bad\"); }\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_CATCH",
                "line #": 1,
                "message": "the 'catch' statement cannot be used with void as its list of parameters."
            },
            {
                "message level": 2,
                "error code": "INVALID_CATCH",
                "line #": 2,
                "message": "the 'catch' keyword expects exactly one parameter."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 3,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "INVALID_CATCH",
                "line #": 3,
                "message": "'catch' parameters do not support initializers."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 3,
                "message": "the '**' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 4,
                "message": "'{' expected after the 'catch' parameter list."
            },
            {
                "message level": 2,
                "error code": "INVALID_PARAMETERS",
                "line #": 5,
                "message": "expected ')' or ',' after a parameter declaration (not token OPEN_CURVLY_BRACKET)."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 5,
                "message": "')' expected to end the 'catch' parameter list."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 6,
                "message": "'(' expected after the 'catch' keyword."
            },
            {
                "message level": 2,
                "error code": "INVALID_OPERATOR",
                "line #": 6,
                "message": "unexpected operator 'CLOSE_PARENTHESIS'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "CATCH"
                        },
                        // because of the (void) the directive list ends up
                        // "outside" of the catch
                        {
                            "node type": "DIRECTIVE_LIST",
                            "children": [
                                {
                                    "node type": "THROW"
                                }
                            ]
                        },
                        {
                            "node type": "CATCH",
                            "children": [
                                {
                                    "node type": "PARAMETERS",
                                    "children": [
                                        {
                                            "node type": "PARAM",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "PARAM",
                                            "label": "b"
                                        },
                                        {
                                            "node type": "PARAM",
                                            "label": "c"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "THROW",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "b"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "CATCH",
                            "children": [
                                {
                                    "node type": "PARAMETERS",
                                    "children": [
                                        {
                                            "node type": "PARAM",
                                            "label": "a",
                                            "children": [
                                                {
                                                    "node type": "SET",
                                                    "children": [
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 5
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "RETURN",
                                            "children": [
                                                {
                                                    "node type": "LIST",
                                                    "children": [
                                                        {
                                                            "node type": "ASSIGNMENT_SHIFT_RIGHT_UNSIGNED",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "a"
                                                                },
                                                                {
                                                                    "node type": "INT64",
                                                                    "integer": 3
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "POWER",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "a"
                                                                },
                                                                {
                                                                    "node type": "INT64",
                                                                    "integer": 2
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "CATCH",
                            "children": [
                                {
                                    "node type": "PARAMETERS",
                                    "children": [
                                        {
                                            "node type": "PARAM",
                                            "label": "bad"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "RETURN",
                            "children": [
                                {
                                    "node type": "BITWISE_XOR",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "bad"
                                        },
                                        {
                                            "node type": "INT64",
                                            "integer": 1
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "CATCH",
                            "children": [
                                {
                                    "node type": "PARAMETERS",
                                    "children": [
                                        {
                                            "node type": "PARAM",
                                            "label": "oops"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "DIRECTIVE_LIST",
                            "children": [
                                {
                                    "node type": "RETURN",
                                    "children": [
                                        {
                                            "node type": "BITWISE_AND",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "oops"
                                                },
                                                {
                                                    "node type": "INT64",
                                                    "integer": 7
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "DIRECTIVE_LIST",
                            "children": [
                                {
                                    "node type": "THROW",
                                    "children": [
                                        {
                                            "node type": "NEW",
                                            "children": [
                                                {
                                                    "node type": "CALL",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "RangeError"
                                                        },
                                                        {
                                                            "node type": "LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "STRING",
                                                                    "label": "really bad"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // try/finally without the '{'
    {
        //"verbose": true,
        "name": "try/finally require a block",
        "program": "try g.start(); r -= p ^^ q;\n\
finally g.clear();\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected after the 'try' keyword."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '^^' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 2,
                "message": "'{' expected after the 'finally' keyword."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "CALL",
                            "children": [
                                {
                                    "node type": "MEMBER",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "g"
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "start"
                                        }
                                    ]
                                },
                                {
                                    "node type": "LIST"
                                }
                            ]
                        },
                        {
                            "node type": "ASSIGNMENT_SUBTRACT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "r"
                                },
                                {
                                    "node type": "LOGICAL_XOR",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "p"
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "q"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "CALL",
                            "children": [
                                {
                                    "node type": "MEMBER",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "g"
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "clear"
                                        }
                                    ]
                                },
                                {
                                    "node type": "LIST"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // if/else and goto
    {
        //"verbose": true,
        "slow": true,
        "name": "valid and invalid if/else and goto",
        "program": "if(a)\n\
goto over_there;\n\
else if(b\n\
{ return (((111))); }\n\
else if c)\n\
q = z || f(33, );\n\
goto;\n",
        "expected messages": [
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 2,
                "message": "'{' expected to open the 'IF' block."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 3,
                "message": "'{' expected to open the 'IF' block."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 4,
                "message": "')' expected to end the 'if' expression."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 5,
                "message": "'{' expected to open the 'IF' block."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 5,
                "message": "'(' expected after the 'if' keyword."
            },
            {
                "message level": 2,
                "error code": "INVALID_OPERATOR",
                "line #": 5,
                "message": "unexpected operator 'CLOSE_PARENTHESIS'."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 6,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "INVALID_EXPRESSION",
                "line #": 6,
                "message": "unexpected token 'CLOSE_PARENTHESIS' found in an expression."
            },
            {
                "message level": 2,
                "error code": "INVALID_GOTO",
                "line #": 7,
                "message": "'goto' expects a label as parameter."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IF",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a"
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "GOTO",
                                            "label": "over_there"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "IF",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "b"
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "DIRECTIVE_LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "RETURN",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 111
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "q"
                                },
                                {
                                    "node type": "LOGICAL_OR",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "z"
                                        },
                                        {
                                            "node type": "CALL",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "f"
                                                },
                                                {
                                                    "node type": "LIST",
                                                    "children": [
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 33
                                                        },
                                                        {
                                                            "node type": "FALSE"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // if(a) <missing block> else <block>
    {
        //"verbose": true,
        "slow": true,
        "name": "if without a block before the else inside a do/while loop",
        "program": "do\n\
if(a)\n\
else\n\
{ return { (a.extension_name + '.red')::empower: first, 32: second, 1.141:third, \"blue\": forth }; }\n\
while(q.loop);\n",
        "expected messages": [
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 2,
                "message": "'{' expected to open the 'DO' block."
            },
            {
                "message level": 2,
                "error code": "IMPROPER_STATEMENT",
                "line #": 4,
                "message": "statements expected following the 'if' expression, 'else' found instead."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 4,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DO",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "IF",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "DIRECTIVE_LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "RETURN",
                                                                    "children": [
                                                                        {
                                                                            "node type": "OBJECT_LITERAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "ADD",
                                                                                            "children": [
                                                                                                {
                                                                                                    "node type": "MEMBER",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "node type": "IDENTIFIER",
                                                                                                            "label": "a"
                                                                                                        },
                                                                                                        {
                                                                                                            "node type": "IDENTIFIER",
                                                                                                            "label": "extension_name"
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "node type": "STRING",
                                                                                                    "label": ".red"
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "empower"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "first"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 32
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "second"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "FLOAT64",
                                                                                    "float": 1.141
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "third"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "STRING",
                                                                                    "label": "blue"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "forth"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "MEMBER",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "q"
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "loop"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // do without a while
    {
        //"verbose": true,
        "slow": true,
        "name": "do loop without a while",
        "program": "do\n\
for(var a = 1; a <= 10; ++a)\n\
console.log(a);\n\
\n",
        "expected messages": [
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 2,
                "message": "'{' expected to open the 'DO' block."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 2,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 3,
                "message": "'{' expected to open the 'FOR' block."
            },
            {
                "message level": 2,
                "error code": "INVALID_DO",
                "line #": 5,
                "message": "'while' expected after the block of a 'do' keyword."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 5,
                "message": "';' was expected after 'DO' (current token: 'EOF')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DO",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FOR",
                                            "children": [
                                                {
                                                    "node type": "VAR",
                                                    "children": [
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "a",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 1
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "LESS_EQUAL",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "a"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 10
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "INCREMENT",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "a"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "CALL",
                                                            "children": [
                                                                {
                                                                    "node type": "MEMBER",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "console"
                                                                        },
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "log"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "a"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // do with a while missing the '('
    {
        //"verbose": true,
        "slow": true,
        "name": "do loop with its while missing '('",
        "program": "do\n\
for(var a in obj)\n\
console.log(a);\n\
while repeat);\n",
        "expected messages": [
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 2,
                "message": "'{' expected to open the 'DO' block."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 3,
                "message": "'{' expected to open the 'FOR' block."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 4,
                "message": "'(' expected after the 'while' keyword."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 4,
                "message": "';' was expected after 'DO' (current token: 'IDENTIFIER')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DO",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FOR",
                                            "flags": "FOR_FLAG_IN",
                                            "children": [
                                                {
                                                    "node type": "VAR",
                                                    "children": [
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "a"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "obj"
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "CALL",
                                                            "children": [
                                                                {
                                                                    "node type": "MEMBER",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "console"
                                                                        },
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "log"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "a"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // do with a while missing the '('
    {
        //"verbose": true,
        "slow": true,
        "name": "do loop with its while missing ')'",
        "program": "do\n\
for each(const var a in obj)\n\
console.log(a);\n\
while(repeat;\n",
        "expected messages": [
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 2,
                "message": "'{' expected to open the 'DO' block."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 3,
                "message": "'{' expected to open the 'FOR' block."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 4,
                "message": "')' expected to end the 'while' expression."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DO",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FOR",
                                            "flags": "FOR_FLAG_CONST,FOR_FLAG_FOREACH,FOR_FLAG_IN",
                                            "children": [
                                                {
                                                    "node type": "VAR",
                                                    "children": [
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "a",
                                                            "flags": "VARIABLE_FLAG_CONST"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "obj"
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "CALL",
                                                            "children": [
                                                                {
                                                                    "node type": "MEMBER",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "console"
                                                                        },
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "log"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "a"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "repeat"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // forever()
    {
        //"verbose": true,
        "slow": true,
        "name": "forever loop",
        "program": "for(;;)\n\
{\n\
a = [123, 33.21, 'item', , {empty: \"object\"}];\n\
b = a[idx];\n\
}\n",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 3,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 4,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FOR",
                            "children": [
                                {
                                    "node type": "EMPTY"
                                },
                                {
                                    "node type": "EMPTY"
                                },
                                {
                                    "node type": "EMPTY"
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ASSIGNMENT",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "a"
                                                        },
                                                        {
                                                            "node type": "ARRAY_LITERAL",
                                                            "children": [
                                                                {
                                                                    "node type": "LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 123
                                                                        },
                                                                        {
                                                                            "node type": "FLOAT64",
                                                                            "float": 33.21
                                                                        },
                                                                        {
                                                                            "node type": "STRING",
                                                                            "label": "item"
                                                                        },
                                                                        {
                                                                            "node type": "EMPTY"
                                                                        },
                                                                        {
                                                                            "node type": "OBJECT_LITERAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "empty"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "STRING",
                                                                                            "label": "object"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "ASSIGNMENT",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "b"
                                                        },
                                                        {
                                                            "node type": "ARRAY",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "a"
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "idx"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // for larger to smaller
    {
        //"verbose": true,
        "name": "standard for loop and broken switch statements",
        "program": "for(const var j: integer = 10; j >= 0; j--)\n\
{\n\
switch oops;\n\
a = [123, 33.21, 'item', , {empty: \"object\"}];\n\
switch(hole { --idx; }\n\
b = a[idx];\n\
switch(color) with(*=) { idx--; }\n\
switch(color) with( { idx++; }\n\
switch(color) with !==) { ++idx; }\n\
switch(color) with(!=  { idx %= 5; }\n\
switch(color) with <= { idx := 5; }\n\
switch(color) case 3: idx |= 5;\n\
}\n",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 3,
                "message": "'(' expected after the 'switch' keyword."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 4,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 5,
                "message": "')' expected to end the 'switch' expression."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 6,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "extended_statements|extended_statements_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 7,
                "message": "a switch() statement can be followed by a 'with' only if extended statements were turned on (use extended_statements;)."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 7,
                "message": "'ASSIGNMENT_MULTIPLY' is not a supported operator for a 'switch() with()' expression."
            },
            {
                "options": "extended_statements|extended_statements_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 8,
                "message": "a switch() statement can be followed by a 'with' only if extended statements were turned on (use extended_statements;)."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 8,
                "message": "'OPEN_CURVLY_BRACKET' is not a supported operator for a 'switch() with()' expression."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 8,
                "message": "')' expected to end the 'switch() with()' expression."
            },
            {
                "options": "extended_statements|extended_statements_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 9,
                "message": "a switch() statement can be followed by a 'with' only if extended statements were turned on (use extended_statements;)."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 9,
                "message": "'(' was expected to start the 'switch() with()' expression."
            },
            {
                "options": "extended_statements|extended_statements_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 10,
                "message": "a switch() statement can be followed by a 'with' only if extended statements were turned on (use extended_statements;)."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 10,
                "message": "')' expected to end the 'switch() with()' expression."
            },
            {
                "options": "extended_statements|extended_statements_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 11,
                "message": "a switch() statement can be followed by a 'with' only if extended statements were turned on (use extended_statements;)."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 11,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 12,
                "message": "'{' expected after the 'switch' expression."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FOR",
                            "flags": "FOR_FLAG_CONST",
                            "children": [
                                {
                                    "node type": "VAR",
                                    "children": [
                                        {
                                            "node type": "VARIABLE",
                                            "label": "j",
                                            "flags": "VARIABLE_FLAG_CONST",
                                            "children": [
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "integer"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "SET",
                                                    "children": [
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 10
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "GREATER_EQUAL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "j"
                                        },
                                        {
                                            "node type": "INT64",
                                            "integer": 0
                                        }
                                    ]
                                },
                                {
                                    "node type": "POST_DECREMENT",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "j"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "oops"
                                                },
                                                {
                                                    "node type": "ASSIGNMENT",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "a"
                                                        },
                                                        {
                                                            "node type": "ARRAY_LITERAL",
                                                            "children": [
                                                                {
                                                                    "node type": "LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 123
                                                                        },
                                                                        {
                                                                            "node type": "FLOAT64",
                                                                            "float": 33.21
                                                                        },
                                                                        {
                                                                            "node type": "STRING",
                                                                            "label": "item"
                                                                        },
                                                                        {
                                                                            "node type": "EMPTY"
                                                                        },
                                                                        {
                                                                            "node type": "OBJECT_LITERAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "empty"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "STRING",
                                                                                            "label": "object"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "SWITCH",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "hole"
                                                        },
                                                        {
                                                            "node type": "DIRECTIVE_LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "DECREMENT",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "idx"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "ASSIGNMENT",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "b"
                                                        },
                                                        {
                                                            "node type": "ARRAY",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "a"
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "idx"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "SWITCH",
                                                    "switch operator": "UNKNOWN",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "color"
                                                        },
                                                        {
                                                            "node type": "DIRECTIVE_LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "POST_DECREMENT",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "idx"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "SWITCH",
                                                    "switch operator": "UNKNOWN",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "color"
                                                        },
                                                        {
                                                            "node type": "DIRECTIVE_LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "POST_INCREMENT",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "idx"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "SWITCH",
                                                    "switch operator": "STRICTLY_NOT_EQUAL",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "color"
                                                        },
                                                        {
                                                            "node type": "DIRECTIVE_LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "INCREMENT",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "idx"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "SWITCH",
                                                    "switch operator": "NOT_EQUAL",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "color"
                                                        },
                                                        {
                                                            "node type": "DIRECTIVE_LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "ASSIGNMENT_MODULO",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "idx"
                                                                        },
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 5
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "SWITCH",
                                                    "switch operator": "LESS_EQUAL",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "color"
                                                        },
                                                        {
                                                            "node type": "DIRECTIVE_LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "ASSIGNMENT",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "idx"
                                                                        },
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 5
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "SWITCH",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "color"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "CASE",
                                                    "children": [
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 3
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "ASSIGNMENT_BITWISE_OR",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "idx"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 5
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // for larger to smaller
    {
        //"verbose": true,
        "name": "standard for loop and broken switch statements",
        "program": "synchronized(some_var)\n\
{\n\
with(some_var)\n\
    attach = rand();\n\
}\n",
        "expected messages": [
            {
                "options": "allow_with",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 3,
                "message": "'WITH' is not allowed; you may authorize it with a pragam (use allow_with;) but it is not recommended."
            },
            {
                "options": "no_allow_with|no_strict",
                "message level": 2,
                "error code": "NOT_ALLOWED_IN_STRICT_MODE",
                "line #": 3,
                "message": "'WITH' is not allowed in strict mode."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 4,
                "message": "'{' expected to open the 'WITH' block."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 4,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SYNCHRONIZED",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "some_var"
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "WITH",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "some_var"
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "ASSIGNMENT",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "attach"
                                                                },
                                                                {
                                                                    "node type": "CALL",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "rand"
                                                                        },
                                                                        {
                                                                            "node type": "LIST"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // for larger to smaller
    {
        //"verbose": true,
        "name": "synchronized errors",
        "program": "synchronized { return !private::error; }\n\
synchronized(oops { return public::servent; }\n\
synchronized(good) wrong;\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 1,
                "message": "'(' expected after the 'synchronized' keyword."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the 'PRIVATE' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 2,
                "message": "')' expected to end the 'synchronized' expression."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 2,
                "message": "the 'PUBLIC' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 2,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 3,
                "message": "'{' expected after the 'synchronized' expression."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DIRECTIVE_LIST",
                            "children": [
                                {
                                    "node type": "RETURN",
                                    "children": [
                                        {
                                            "node type": "LOGICAL_NOT",
                                            "children": [
                                                {
                                                    "node type": "SCOPE",
                                                    "children": [
                                                        {
                                                            "node type": "PRIVATE"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "error"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "SYNCHRONIZED",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "oops"
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "RETURN",
                                            "children": [
                                                {
                                                    "node type": "SCOPE",
                                                    "children": [
                                                        {
                                                            "node type": "PUBLIC"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "servent"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "SYNCHRONIZED",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "good"
                                }
                            ]
                        },
                        {
                            "node type": "IDENTIFIER",
                            "label": "wrong"
                        }
                    ]
                }
            ]
        }
    },

    // do with a while missing the '('
    {
        //"verbose": true,
        "slow": true,
        "name": "a few extra valid and invalid for loops",
        "program": "for(a = 3; a <= j + 5; a *= 1.31)\n\
for(a in o)\n\
console.log(a);\n\
for a = 11;\n\
for(a = obj.start; a < obj.end; a += obj.next { missing += close in -3 .. +3; }\n\
for(j = 33) { oops += j; }\n\
for each (q = -5; q <= +5; q += 0.1) { forever[q] &= q; }\n\
for(z = 33; z < !33) { last >>= one; }\n\
",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 2,
                "message": "'{' expected to open the 'FOR' block."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 3,
                "message": "'{' expected to open the 'FOR' block."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 4,
                "message": "'(' expected following the 'for' keyword."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 4,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 5,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 5,
                "message": "')' expected to close the 'for' expressions."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 5,
                "message": "the 'x in min .. max' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 6,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 6,
                "message": "';' or 'in' expected between the 'for' expressions."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 7,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 7,
                "message": "'for each()' only available with an enumeration for."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 8,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 8,
                "message": "';' expected between the last two 'for' expressions."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FOR",
                            "children": [
                                {
                                    "node type": "ASSIGNMENT",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "INT64",
                                            "integer": 3
                                        }
                                    ]
                                },
                                {
                                    "node type": "LESS_EQUAL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "ADD",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "j"
                                                },
                                                {
                                                    "node type": "INT64",
                                                    "integer": 5
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "ASSIGNMENT_MULTIPLY",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "FLOAT64",
                                            "float": 1.31
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FOR",
                                            "flags": "FOR_FLAG_IN",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "o"
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "CALL",
                                                            "children": [
                                                                {
                                                                    "node type": "MEMBER",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "console"
                                                                        },
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "log"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "a"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a"
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 11
                                }
                            ]
                        },
                        {
                            "node type": "FOR",
                            "children": [
                                {
                                    "node type": "ASSIGNMENT",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "MEMBER",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "obj"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "start"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "LESS",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "MEMBER",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "obj"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "end"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "ASSIGNMENT_ADD",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "MEMBER",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "obj"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "next"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ASSIGNMENT_ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "missing"
                                                        },
                                                        {
                                                            "node type": "IN",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "close"
                                                                },
                                                                {
                                                                    "node type": "SUBTRACT",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 3
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "ADD",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 3
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "FOR",
                            "children": [
                                {
                                    "node type": "ASSIGNMENT",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "j"
                                        },
                                        {
                                            "node type": "INT64",
                                            "integer": 33
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ASSIGNMENT_ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "oops"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "j"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "FOR",
                            "children": [
                                {
                                    "node type": "ASSIGNMENT",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "q"
                                        },
                                        {
                                            "node type": "SUBTRACT",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 5
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "LESS_EQUAL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "q"
                                        },
                                        {
                                            "node type": "ADD",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 5
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "ASSIGNMENT_ADD",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "q"
                                        },
                                        {
                                            "node type": "FLOAT64",
                                            "float": 0.1
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ASSIGNMENT_BITWISE_AND",
                                                    "children": [
                                                        {
                                                            "node type": "ARRAY",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "forever"
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "q"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "q"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "FOR",
                            "children": [
                                {
                                    "node type": "ASSIGNMENT",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "z"
                                        },
                                        {
                                            "node type": "INT64",
                                            "integer": 33
                                        }
                                    ]
                                },
                                {
                                    "node type": "LESS",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "z"
                                        },
                                        {
                                            "node type": "LOGICAL_NOT",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 33
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ASSIGNMENT_SHIFT_RIGHT",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "last"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "one"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // do with a while missing the '('
    {
        //"verbose": true,
        "slow": true,
        "name": "for each expects",
        "program": "repeat:\n\
while !done)\n\
{ z := a ~~ (b).field; }\n\
while(!done\n\
{ z = ~~b; }\n\
with obj)\n\
{ z += a !~ (b)[\"field\"]; }\n\
with(my_object\n\
{ last <<= !~one; }\n\
goto repeat;\n\
",
        "expected messages": [
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 2,
                "message": "'(' expected after the 'while' keyword."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 2,
                "message": "';' was expected after 'LOGICAL_NOT' (current token: 'CLOSE_PARENTHESIS')."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 3,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 3,
                "message": "the 'SMART_MATCH' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 5,
                "message": "')' expected to end the 'while' expression."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 5,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_allow_with|no_strict",
                "message level": 2,
                "error code": "NOT_ALLOWED_IN_STRICT_MODE",
                "line #": 6,
                "message": "'WITH' is not allowed in strict mode."
            },
            {
                "options": "allow_with",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 6,
                "message": "'WITH' is not allowed; you may authorize it with a pragam (use allow_with;) but it is not recommended."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 6,
                "message": "'(' expected after the 'with' keyword."
            },
            {
                "message level": 2,
                "error code": "INVALID_OPERATOR",
                "line #": 6,
                "message": "unexpected operator 'CLOSE_PARENTHESIS'."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 7,
                "message": "the 'NOT_MATCH' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "no_allow_with|no_strict",
                "message level": 2,
                "error code": "NOT_ALLOWED_IN_STRICT_MODE",
                "line #": 8,
                "message": "'WITH' is not allowed in strict mode."
            },
            {
                "options": "allow_with",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 8,
                "message": "'WITH' is not allowed; you may authorize it with a pragam (use allow_with;) but it is not recommended."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 9,
                "message": "')' expected to end the 'with' expression."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "LABEL",
                            "label": "repeat"
                        },
                        {
                            "node type": "LOGICAL_NOT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "done"
                                }
                            ]
                        },
                        {
                            "node type": "DIRECTIVE_LIST",
                            "children": [
                                {
                                    "node type": "ASSIGNMENT",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "z"
                                        },
                                        {
                                            "node type": "SMART_MATCH",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "MEMBER",
                                                    "children": [
                                                        {
                                                            "node type": "VIDENTIFIER",
                                                            "label": "b"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "field"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "WHILE",
                            "children": [
                                {
                                    "node type": "LOGICAL_NOT",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "done"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ASSIGNMENT",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "z"
                                                        },
                                                        {
                                                            "node type": "BITWISE_NOT",
                                                            "children": [
                                                                {
                                                                    "node type": "BITWISE_NOT",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "b"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "DIRECTIVE_LIST",
                            "children": [
                                {
                                    "node type": "ASSIGNMENT_ADD",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "z"
                                        },
                                        {
                                            "node type": "NOT_MATCH",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "ARRAY",
                                                    "children": [
                                                        {
                                                            "node type": "VIDENTIFIER",
                                                            "label": "b"
                                                        },
                                                        {
                                                            "node type": "STRING",
                                                            "label": "field"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "WITH",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "my_object"
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ASSIGNMENT_SHIFT_LEFT",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "last"
                                                        },
                                                        {
                                                            "node type": "LOGICAL_NOT",
                                                            "children": [
                                                                {
                                                                    "node type": "BITWISE_NOT",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "one"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "GOTO",
                            "label": "repeat"
                        }
                    ]
                }
            ]
        }
    },

    // invalid stand alone list of attributes
    {
        //"verbose": true,
        "slow": true,
        "name": "invalid list of stand alone attributes",
        "program": "private abstract;\n\
private false;\n\
private final;\n\
private native;\n\
private private;\n\
private protected;\n\
private public;\n\
private static;\n\
private transient;\n\
private true;\n\
private volatile;\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_ATTRIBUTES",
                "line #": 1,
                "message": "a statement with only attributes (ABSTRACT) is not allowed."
            },
            {
                "message level": 2,
                "error code": "INVALID_ATTRIBUTES",
                "line #": 2,
                "message": "no attributes were expected here (statements, expressions and pragmas cannot be annotated)."
            },
            {
                "message level": 2,
                "error code": "INVALID_ATTRIBUTES",
                "line #": 3,
                "message": "a statement with only attributes (FINAL) is not allowed."
            },
            {
                "message level": 2,
                "error code": "INVALID_ATTRIBUTES",
                "line #": 4,
                "message": "a statement with only attributes (NATIVE) is not allowed."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 5,
                "message": "the 'PRIVATE' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 6,
                "message": "the 'PROTECTED' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 7,
                "message": "the 'PUBLIC' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_ATTRIBUTES",
                "line #": 8,
                "message": "a statement with only attributes (STATIC) is not allowed."
            },
            {
                "message level": 2,
                "error code": "INVALID_ATTRIBUTES",
                "line #": 9,
                "message": "a statement with only attributes (TRANSIENT) is not allowed."
            },
            {
                "message level": 2,
                "error code": "INVALID_ATTRIBUTES",
                "line #": 10,
                "message": "no attributes were expected here (statements, expressions and pragmas cannot be annotated)."
            },
            {
                "message level": 2,
                "error code": "INVALID_ATTRIBUTES",
                "line #": 11,
                "message": "a statement with only attributes (VOLATILE) is not allowed."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FALSE"
                        },
                        {
                            "node type": "PRIVATE",
                            "link attributes": [
                                {
                                    "node type": "PRIVATE"
                                }
                            ]
                        },
                        {
                            "node type": "PROTECTED",
                            "link attributes": [
                                {
                                    "node type": "PRIVATE"
                                }
                            ]
                        },
                        {
                            "node type": "PUBLIC",
                            "link attributes": [
                                {
                                    "node type": "PRIVATE"
                                }
                            ]
                        },
                        {
                            "node type": "TRUE"
                        }
                    ]
                }
            ]
        }
    },

    // unexpected colon
    {
        //"verbose": true,
        //"slow": true,
        "name": "colon by itself or with attributes",
        "program": "invalid_colon;\n\
: ;\n\
abstract: invalid_label;\n\
public: valid_in_a_class;\n\
protected: valid_in_a_class_too;\n\
private: test_for_the_class;\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_OPERATOR",
                "line #": 2,
                "message": "unexpected ':' without an identifier."
            },
            {
                "message level": 2,
                "error code": "INVALID_OPERATOR",
                "line #": 3,
                "message": "unexpected ':' without a valid label."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IDENTIFIER",
                            "label": "invalid_colon"
                        },
                        {
                            "node type": "IDENTIFIER",
                            "label": "invalid_label"
                        },
                        {
                            "node type": "LABEL",
                            "label": "public"
                        },
                        {
                            "node type": "IDENTIFIER",
                            "label": "valid_in_a_class"
                        },
                        {
                            "node type": "LABEL",
                            "label": "protected"
                        },
                        {
                            "node type": "IDENTIFIER",
                            "label": "valid_in_a_class_too"
                        },
                        {
                            "node type": "LABEL",
                            "label": "private"
                        },
                        {
                            "node type": "IDENTIFIER",
                            "label": "test_for_the_class"
                        }
                    ]
                }
            ]
        }
    },

    // legal empty statements
    {
        //"verbose": true,
        //"slow": true,
        "name": "legal empty statements",
        "program": "for(i = 0; i < 100; ++i);\n\
while(v)\n\
{\n\
    ;\n\
}\n",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to open the 'FOR' block."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FOR",
                            "children": [
                                {
                                    "node type": "ASSIGNMENT",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "i"
                                        },
                                        {
                                            "node type": "INT64",
                                            "integer": 0
                                        }
                                    ]
                                },
                                {
                                    "node type": "LESS",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "i"
                                        },
                                        {
                                            "node type": "INT64",
                                            "integer": 100
                                        }
                                    ]
                                },
                                {
                                    "node type": "INCREMENT",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "i"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST"
                                }
                            ]
                        },
                        {
                            "node type": "WHILE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "v"
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // illegal keywords in statements
    {
        //"verbose": true,
        //"slow": true,
        "name": "illegal keywords in statements",
        "program": "for(i = 0; i < 100; ++i) else;\n\
while(v) ensure;\n\
do extends while(q);\n\
if(s) require;\n\
with(obj) then;\n",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to open the 'FOR' block."
            },
            {
                "message level": 2,
                "error code": "INVALID_KEYWORD",
                "line #": 1,
                "message": "unexpected keyword 'ELSE'."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 2,
                "message": "'{' expected to open the 'WHILE' block."
            },
            {
                "message level": 2,
                "error code": "INVALID_KEYWORD",
                "line #": 2,
                "message": "unexpected keyword 'ENSURE'."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 3,
                "message": "'{' expected to open the 'DO' block."
            },
            {
                "message level": 2,
                "error code": "INVALID_KEYWORD",
                "line #": 3,
                "message": "unexpected keyword 'EXTENDS'."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 4,
                "message": "'{' expected to open the 'IF' block."
            },
            {
                "message level": 2,
                "error code": "INVALID_KEYWORD",
                "line #": 4,
                "message": "unexpected keyword 'REQUIRE'."
            },
            {
                "options": "allow_with",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 5,
                "message": "'WITH' is not allowed; you may authorize it with a pragam (use allow_with;) but it is not recommended."
            },
            {
                "options": "no_allow_with|no_strict",
                "message level": 2,
                "error code": "NOT_ALLOWED_IN_STRICT_MODE",
                "line #": 5,
                "message": "'WITH' is not allowed in strict mode."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 5,
                "message": "'{' expected to open the 'WITH' block."
            },
            {
                "message level": 2,
                "error code": "INVALID_KEYWORD",
                "line #": 5,
                "message": "unexpected keyword 'THEN'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FOR",
                            "children": [
                                {
                                    "node type": "ASSIGNMENT",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "i"
                                        },
                                        {
                                            "node type": "INT64",
                                            "integer": 0
                                        }
                                    ]
                                },
                                {
                                    "node type": "LESS",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "i"
                                        },
                                        {
                                            "node type": "INT64",
                                            "integer": 100
                                        }
                                    ]
                                },
                                {
                                    "node type": "INCREMENT",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "i"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST"
                                }
                            ]
                        },
                        {
                            "node type": "WHILE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "v"
                                },
                                {
                                    "node type": "DIRECTIVE_LIST"
                                }
                            ]
                        },
                        {
                            "node type": "DO",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST"
                                },
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "q"
                                }
                            ]
                        },
                        {
                            "node type": "IF",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "s"
                                },
                                {
                                    "node type": "DIRECTIVE_LIST"
                                }
                            ]
                        },
                        {
                            "node type": "WITH",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "DIRECTIVE_LIST"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // arrays with empty items
    {
        //"verbose": true,
        "slow": true,
        "name": "arrays with empty items",
        "program": "a1 = [ /* empty at the start */ , 123, 'test' ];\n\
a2 = [ /*e*/, 123, /*e*/, 'more...'];\n\
a3 = [ 1, 2, 3, /* empty at the end */ ];\n\
a4 = [ , , , , , , \"lots of emptiness\", , , , , ];\n",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 2,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 3,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 4,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a1"
                                },
                                {
                                    "node type": "ARRAY_LITERAL",
                                    "children": [
                                        {
                                            "node type": "LIST",
                                            "children": [
                                                {
                                                    "node type": "EMPTY"
                                                },
                                                {
                                                    "node type": "INT64",
                                                    "integer": 123
                                                },
                                                {
                                                    "node type": "STRING",
                                                    "label": "test"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a2"
                                },
                                {
                                    "node type": "ARRAY_LITERAL",
                                    "children": [
                                        {
                                            "node type": "LIST",
                                            "children": [
                                                {
                                                    "node type": "EMPTY"
                                                },
                                                {
                                                    "node type": "INT64",
                                                    "integer": 123
                                                },
                                                {
                                                    "node type": "EMPTY"
                                                },
                                                {
                                                    "node type": "STRING",
                                                    "label": "more..."
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a3"
                                },
                                {
                                    "node type": "ARRAY_LITERAL",
                                    "children": [
                                        {
                                            "node type": "LIST",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                },
                                                {
                                                    "node type": "INT64",
                                                    "integer": 2
                                                },
                                                {
                                                    "node type": "INT64",
                                                    "integer": 3
                                                },
                                                {
                                                    "node type": "EMPTY"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a4"
                                },
                                {
                                    "node type": "ARRAY_LITERAL",
                                    "children": [
                                        {
                                            "node type": "LIST",
                                            "children": [
                                                {
                                                    "node type": "EMPTY"
                                                },
                                                {
                                                    "node type": "EMPTY"
                                                },
                                                {
                                                    "node type": "EMPTY"
                                                },
                                                {
                                                    "node type": "EMPTY"
                                                },
                                                {
                                                    "node type": "EMPTY"
                                                },
                                                {
                                                    "node type": "EMPTY"
                                                },
                                                {
                                                    "node type": "STRING",
                                                    "label": "lots of emptiness"
                                                },
                                                {
                                                    "node type": "EMPTY"
                                                },
                                                {
                                                    "node type": "EMPTY"
                                                },
                                                {
                                                    "node type": "EMPTY"
                                                },
                                                {
                                                    "node type": "EMPTY"
                                                },
                                                {
                                                    "node type": "EMPTY"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // calling functions in many different ways
    {
        //"verbose": true,
        "slow": true,
        "name": "valid and invalid function calls",
        "program": "call.func1(r: ...);\n\
call.func2(a, b, c, d: ...);\n\
call.func3(a: this, b: this.param * 123, c: ...);\n\
call.func4(n: 4, param * 3, rest: ...);\n\
call.func5(count: this.length, param: 3, rest: ..., and: invalid);\n\
call.func6('here', r1: ..., r2: ..., r3: ...);\n\
call.func7(first: ..., oops);\n\
call.func8(one, ...);\n\
call.func9(...);\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_REST",
                "line #": 5,
                "message": "'...' was expected to be the last expression in this function call."
            },
            {
                "message level": 2,
                "error code": "INVALID_REST",
                "line #": 6,
                "message": "'...' was expected to be the last expression in this function call."
            },
            {
                "message level": 2,
                "error code": "INVALID_REST",
                "line #": 7,
                "message": "'...' was expected to be the last expression in this function call."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "CALL",
                            "children": [
                                {
                                    "node type": "MEMBER",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "call"
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "func1"
                                        }
                                    ]
                                },
                                {
                                    "node type": "LIST",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "r",
                                            "children": [
                                                {
                                                    "node type": "REST"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "CALL",
                            "children": [
                                {
                                    "node type": "MEMBER",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "call"
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "func2"
                                        }
                                    ]
                                },
                                {
                                    "node type": "LIST",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "b"
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "c"
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "d",
                                            "children": [
                                                {
                                                    "node type": "REST"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "CALL",
                            "children": [
                                {
                                    "node type": "MEMBER",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "call"
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "func3"
                                        }
                                    ]
                                },
                                {
                                    "node type": "LIST",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "a",
                                            "children": [
                                                {
                                                    "node type": "THIS"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "b",
                                            "children": [
                                                {
                                                    "node type": "MULTIPLY",
                                                    "children": [
                                                        {
                                                            "node type": "MEMBER",
                                                            "children": [
                                                                {
                                                                    "node type": "THIS"
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "param"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 123
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "c",
                                            "children": [
                                                {
                                                    "node type": "REST"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "CALL",
                            "children": [
                                {
                                    "node type": "MEMBER",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "call"
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "func4"
                                        }
                                    ]
                                },
                                {
                                    "node type": "LIST",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "n",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 4
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "MULTIPLY",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "param"
                                                },
                                                {
                                                    "node type": "INT64",
                                                    "integer": 3
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "rest",
                                            "children": [
                                                {
                                                    "node type": "REST"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "CALL",
                            "children": [
                                {
                                    "node type": "MEMBER",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "call"
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "func5"
                                        }
                                    ]
                                },
                                {
                                    "node type": "LIST",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "count",
                                            "children": [
                                                {
                                                    "node type": "MEMBER",
                                                    "children": [
                                                        {
                                                            "node type": "THIS"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "length"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "param",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 3
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "rest",
                                            "children": [
                                                {
                                                    "node type": "REST"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "and",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "invalid"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "CALL",
                            "children": [
                                {
                                    "node type": "MEMBER",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "call"
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "func6"
                                        }
                                    ]
                                },
                                {
                                    "node type": "LIST",
                                    "children": [
                                        {
                                            "node type": "STRING",
                                            "label": "here"
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "r1",
                                            "children": [
                                                {
                                                    "node type": "REST"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "r2",
                                            "children": [
                                                {
                                                    "node type": "REST"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "r3",
                                            "children": [
                                                {
                                                    "node type": "REST"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "CALL",
                            "children": [
                                {
                                    "node type": "MEMBER",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "call"
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "func7"
                                        }
                                    ]
                                },
                                {
                                    "node type": "LIST",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "first",
                                            "children": [
                                                {
                                                    "node type": "REST"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "oops"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "CALL",
                            "children": [
                                {
                                    "node type": "MEMBER",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "call"
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "func8"
                                        }
                                    ]
                                },
                                {
                                    "node type": "LIST",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "one"
                                        },
                                        {
                                            "node type": "REST"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "CALL",
                            "children": [
                                {
                                    "node type": "MEMBER",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "call"
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "func9"
                                        }
                                    ]
                                },
                                {
                                    "node type": "LIST",
                                    "children": [
                                        {
                                            "node type": "REST"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // enum with a conditional value
    {
        //"verbose": true,
        "slow": true,
        "name": "enum assignment accepts conditional values",
        "program": "enum liberty {\n\
  freedom := is_that_true() ? 'yes' : 'no',\n\
  charlies_angels := no = assignment\n\
};\n",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 2,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 3,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 3,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 3,
                "message": "',' expected between enumeration elements."
            },
            {
                "message level": 2,
                "error code": "INVALID_ENUM",
                "line #": 3,
                "message": "each 'enum' entry needs to include an identifier."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "liberty",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "label": "freedom",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "CONDITIONAL",
                                                    "children": [
                                                        {
                                                            "node type": "CALL",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "is_that_true"
                                                                },
                                                                {
                                                                    "node type": "LIST"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "STRING",
                                                            "label": "yes"
                                                        },
                                                        {
                                                            "node type": "STRING",
                                                            "label": "no"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "label": "charlies_angels",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "no"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "assignment"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // conditional value without the ':'
    {
        //"verbose": true,
        "slow": true,
        "name": "conditional missing the ':' character",
        "program": "function get red(color: c = highlighted ? input) { this.red = c; }",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "INVALID_CONDITIONAL",
                "line #": 1,
                "message": "invalid use of the conditional operator, ':' was expected."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FUNCTION",
                            "label": "->red",
                            "flags": "FUNCTION_FLAG_GETTER",
                            "children": [
                                {
                                    "node type": "PARAMETERS",
                                    "children": [
                                        {
                                            "node type": "PARAM",
                                            "label": "color",
                                            "children": [
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "c"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "SET",
                                                    "children": [
                                                        {
                                                            "node type": "CONDITIONAL",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "highlighted"
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "input"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "MEMBER",
                                                    "children": [
                                                        {
                                                            "node type": "THIS"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "red"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "c"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // scope in an expression not followed by an identifier
    {
        //"verbose": true,
        "slow": true,
        "name": "scope in expression must be followed by an identifier",
        "program": "(a + c::123);\n\
::direct;\n\
a::'string';\n\
b::3.14;\n\
c::[12];\n\
d::{j: 'counter'};\n",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_SCOPE",
                "line #": 1,
                "message": "scope operator '::' is expected to be followed by an identifier."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 1,
                "message": "')' expected to match the '('."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 1,
                "message": "';' was expected after 'OPEN_PARENTHESIS' (current token: 'INT64')."
            },
            {
                "message level": 2,
                "error code": "INVALID_OPERATOR",
                "line #": 2,
                "message": "unexpected operator 'SCOPE'."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 3,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_SCOPE",
                "line #": 3,
                "message": "scope operator '::' is expected to be followed by an identifier."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 3,
                "message": "';' was expected after 'SCOPE' (current token: 'STRING')."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 4,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_SCOPE",
                "line #": 4,
                "message": "scope operator '::' is expected to be followed by an identifier."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 4,
                "message": "';' was expected after 'SCOPE' (current token: 'FLOAT64')."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 5,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_SCOPE",
                "line #": 5,
                "message": "scope operator '::' is expected to be followed by an identifier."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 5,
                "message": "';' was expected after 'SCOPE' (current token: 'OPEN_SQUARE_BRACKET')."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 6,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_SCOPE",
                "line #": 6,
                "message": "scope operator '::' is expected to be followed by an identifier."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 6,
                "message": "';' was expected after 'SCOPE' (current token: 'OPEN_CURVLY_BRACKET')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a"
                                },
                                {
                                    "node type": "SCOPE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "c"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "IDENTIFIER",
                            "label": "direct"
                        },
                        {
                            "node type": "SCOPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a"
                                }
                            ]
                        },
                        {
                            "node type": "SCOPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "b"
                                }
                            ]
                        },
                        {
                            "node type": "SCOPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "c"
                                }
                            ]
                        },
                        {
                            "node type": "SCOPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "d"
                                }
                            ]
                        },
                        {
                            "node type": "DIRECTIVE_LIST",
                            "children": [
                                {
                                    "node type": "LABEL",
                                    "label": "j"
                                },
                                {
                                    "node type": "STRING",
                                    "label": "counter"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // call without the ')'
    {
        //"verbose": true,
        //"slow": true,
        "name": "function call without the ')'",
        "program": "r = a(;",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "INVALID_EXPRESSION",
                "line #": 1,
                "message": "unexpected token 'SEMICOLON' found in an expression."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 1,
                "message": "')' expected to end the list of arguments."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "r"
                                },
                                {
                                    "node type": "CALL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "LIST",
                                            "children": [
                                                {
                                                    "node type": "FALSE"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // array dereferencing without the ']'
    {
        //"verbose": true,
        //"slow": true,
        "name": "array access without the ']'",
        "program": "i = stack[123;",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "SQUARE_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "']' expected to end the list of element references or declarations."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "i"
                                },
                                {
                                    "node type": "ARRAY",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "stack"
                                        },
                                        {
                                            "node type": "INT64",
                                            "integer": 123
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // grouped expressions not ending with ')'
    {
        //"verbose": true,
        //"slow": true,
        "name": "grouped expressions without the ')'",
        "program": "i := 123 * (60 + j;",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 1,
                "message": "')' expected to match the '('."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "i"
                                },
                                {
                                    "node type": "MULTIPLY",
                                    "children": [
                                        {
                                            "node type": "INT64",
                                            "integer": 123
                                        },
                                        {
                                            "node type": "ADD",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 60
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "j"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // unterminated array literal
    {
        //"verbose": true,
        //"slow": true,
        "name": "array literal without the ']'",
        "program": "a := [1, 2, , 4;",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "SQUARE_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "']' expected to match the '[' of this array."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a"
                                },
                                {
                                    "node type": "ARRAY_LITERAL",
                                    "children": [
                                        {
                                            "node type": "LIST",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                },
                                                {
                                                    "node type": "INT64",
                                                    "integer": 2
                                                },
                                                {
                                                    "node type": "EMPTY"
                                                },
                                                {
                                                    "node type": "INT64",
                                                    "integer": 4
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // unterminated object literal
    {
        //"verbose": true,
        //"slow": true,
        "name": "object literal without the '}'",
        "program": "obj := {a: 1, b: 2, c: null, d: 4;",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 1,
                "message": "'}' expected before the ';' to end an object literal."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to match the '{' of this object literal."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "OBJECT_LITERAL",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "b"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 2
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "c"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "NULL"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "d"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 4
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // object literal with a missing comma
    {
        //"verbose": true,
        //"slow": true,
        "name": "object literal without all the ','",
        "program": "obj := {a: 1, b: 2 c: null, d: 4;",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 1,
                "message": "',' or '}' expected after the value of a field."
            },
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 1,
                "message": "'}' expected before the ';' to end an object literal."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to match the '{' of this object literal."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "OBJECT_LITERAL",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "b"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 2
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "c"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "NULL"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "d"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 4
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // object literal with a missing colons
    {
        //"verbose": true,
        //"slow": true,
        "name": "object literal without all the ':'",
        "program": "obj := {a: 1, b 2, c, d: 4;",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "COLON_EXPECTED",
                "line #": 1,
                "message": "':' expected after the name of a field."
            },
            {
                "message level": 2,
                "error code": "COLON_EXPECTED",
                "line #": 1,
                "message": "':' expected after the name of a field."
            },
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 1,
                "message": "'}' expected before the ';' to end an object literal."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to match the '{' of this object literal."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "OBJECT_LITERAL",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "b"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 2
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "d"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 4
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // object literal with a missing identifier
    {
        //"verbose": true,
        //"slow": true,
        "name": "object literal without all the field names",
        "program": "obj := {a: 1, : 2, c: null, d: 4;",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_FIELD",
                "line #": 1,
                "message": "the name of a field was expected."
            },
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 1,
                "message": "'}' expected before the ';' to end an object literal."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to match the '{' of this object literal."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "OBJECT_LITERAL",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 2
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "c"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "NULL"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "d"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 4
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // object literal with a missing identifier
    {
        //"verbose": true,
        "slow": true,
        "name": "object literal with private/protected/public fields without a valid scope",
        "program": "obj := {\n\
private: 1,\n\
protected: 2,\n\
public: null,\n\
private::123: 1,\n\
protected::1.23: 2,\n\
public::'123': null,\n\
(end)::valid: 4,\n\
(other + 'here'::valid: 4 };",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_FIELD_NAME",
                "line #": 2,
                "message": "'public', 'protected', or 'private' or a dynamic scope cannot be used as a field name, '::' was expected."
            },
            {
                "message level": 2,
                "error code": "INVALID_FIELD_NAME",
                "line #": 3,
                "message": "'public', 'protected', or 'private' or a dynamic scope cannot be used as a field name, '::' was expected."
            },
            {
                "message level": 2,
                "error code": "INVALID_FIELD_NAME",
                "line #": 4,
                "message": "'public', 'protected', or 'private' or a dynamic scope cannot be used as a field name, '::' was expected."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 5,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_SCOPE",
                "line #": 5,
                "message": "'::' is expected to always be followed by an identifier."
            },
            {
                "message level": 2,
                "error code": "COLON_EXPECTED",
                "line #": 5,
                "message": "':' expected after the name of a field."
            },
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 5,
                "message": "',' or '}' expected after the value of a field."
            },
            {
                "message level": 2,
                "error code": "INVALID_FIELD",
                "line #": 5,
                "message": "the name of a field was expected."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 6,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_SCOPE",
                "line #": 6,
                "message": "'::' is expected to always be followed by an identifier."
            },
            {
                "message level": 2,
                "error code": "COLON_EXPECTED",
                "line #": 6,
                "message": "':' expected after the name of a field."
            },
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 6,
                "message": "',' or '}' expected after the value of a field."
            },
            {
                "message level": 2,
                "error code": "INVALID_FIELD",
                "line #": 6,
                "message": "the name of a field was expected."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 7,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_SCOPE",
                "line #": 7,
                "message": "'::' is expected to always be followed by an identifier."
            },
            {
                "message level": 2,
                "error code": "COLON_EXPECTED",
                "line #": 7,
                "message": "':' expected after the name of a field."
            },
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 7,
                "message": "',' or '}' expected after the value of a field."
            },
            {
                "message level": 2,
                "error code": "INVALID_FIELD",
                "line #": 7,
                "message": "the name of a field was expected."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 8,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 9,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_FIELD_NAME",
                "line #": 9,
                "message": "')' is expected to close a dynamically named object field."
            },
            {
                "message level": 2,
                "error code": "INVALID_FIELD_NAME",
                "line #": 9,
                "message": "'public', 'protected', or 'private' or a dynamic scope cannot be used as a field name, '::' was expected."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "OBJECT_LITERAL",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 2
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "NULL"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 123
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "FLOAT64",
                                                    "float": 1.23
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 2
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "STRING",
                                                    "label": "123"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "NULL"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "",
                                            "children": [
                                                {
                                                    "node type": "VIDENTIFIER",
                                                    "label": "end"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "valid"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 4
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "other"
                                                        },
                                                        {
                                                            "node type": "SCOPE",
                                                            "children": [
                                                                {
                                                                    "node type": "STRING",
                                                                    "label": "here"
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "valid"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 4
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // unterminated object literal
    {
        //"verbose": true,
        //"slow": true,
        "name": "object literal without ':' followed by '}'",
        "program": "obj := {a: 1, b };",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "COLON_EXPECTED",
                "line #": 1,
                "message": "':' expected after the name of a field."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "OBJECT_LITERAL",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // unterminated object literal
    {
        //"verbose": true,
        //"slow": true,
        "name": "object literal without ':' followed by ';'",
        "program": "obj := {a: 1, b ;",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "COLON_EXPECTED",
                "line #": 1,
                "message": "':' expected after the name of a field."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to match the '{' of this object literal."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "OBJECT_LITERAL",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // unterminated object literal
    {
        //"verbose": true,
        //"slow": true,
        "name": "object literal without ':' followed by ',' and '}'",
        "program": "obj := {a: 1, b, };",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "COLON_EXPECTED",
                "line #": 1,
                "message": "':' expected after the name of a field."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "OBJECT_LITERAL",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // unterminated object literal
    {
        //"verbose": true,
        //"slow": true,
        "name": "object literal without ':' followed by ',' and ';'",
        "program": "obj := {a: 1, b, ;",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "COLON_EXPECTED",
                "line #": 1,
                "message": "':' expected after the name of a field."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to match the '{' of this object literal."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "OBJECT_LITERAL",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    }

]
// end
// vim: ts=4 sw=4 et
