// start
[

    // Empty program
    {
        //"verbose": true,
        "name": "empty program",
        "program": "",
        "result": {
            "node type": "PROGRAM"
        }
    },

    // Empty program with comments
    {
        //"verbose": true,
        "name": "empty program with comments",
        "program": "// a comment is just ignored\n/* and the program is still just empty */",
        "result": {
            "node type": "PROGRAM"
        }
    },

    // Empty program with semi-colons
    {
        //"verbose": true,
        "name": "empty program with semi-colons",
        "program": ";;;;;;;;;;",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST"
                }
            ]
        }
    },

    // Unexpected ELSE instruction
    {
        //"verbose": true,
        "name": "unexpected \"else\" instruction",
        "program": "else",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_KEYWORD",
                "line #": 1,
                "message": "'else' not expected without an 'if' keyword."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST"
                }
            ]
        }
    },

    // Unexpected }
    {
        //"verbose": true,
        "name": "unexpected \"}\" character",
        "program": "}",
        "expected messages": [
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' not expected without a '{'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST"
                }
            ]
        }
    },

    // Try an empty package
    {
        //"verbose": true,
        "name": "empty package",
        "program": "package name { }",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "name",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // Try an 'a+b' function
    {
        //"verbose": true,
        "name": "'a+b' function",
        "program": "package advanced.addition {\n\
    function a_plus_b(a: integer, b: integer = 213)\n\
     : integer\n\
       throws RangeError\n\
       require positive: a >= 0 && b >= 0\n\
       ensure positive: result >= 0\n\
    {\n\
       return a + b;\n\
    }\n\
    function b_plus_a(b: integer, a: integer = 426)\n\
     : integer\n\
       throws InternalError\n\
       require else a_negative: a < 0,\n\
                    b_positive: b >= 0\n\
       ensure then r: result >= 0, field: sum != 0\n\
    {\n\
      return b | a;\n\
    }\n\
}\n",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "advanced.addition",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FUNCTION",
                                            "label": "a_plus_b",
                                            "children": [
                                                {
                                                    "node type": "PARAMETERS",
                                                    "children": [
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "a",
                                                            "children": [
                                                                {
                                                                    "node type": "TYPE",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "integer"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "b",
                                                            "children": [
                                                                {
                                                                    "node type": "TYPE",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "integer"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 213
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "integer"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "THROWS",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "RangeError"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "REQUIRE",
                                                    "children": [
                                                        {
                                                            "node type": "LABEL",
                                                            "label": "positive",
                                                            "children": [
                                                                {
                                                                    "node type": "LOGICAL_AND",
                                                                    "children": [
                                                                        {
                                                                            "node type": "GREATER_EQUAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "a"
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 0
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "GREATER_EQUAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "b"
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 0
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "ENSURE",
                                                    "children": [
                                                        {
                                                            "node type": "LABEL",
                                                            "label": "positive",
                                                            "children": [
                                                                {
                                                                    "node type": "GREATER_EQUAL",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "result"
                                                                        },
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 0
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "RETURN",
                                                            "children": [
                                                                {
                                                                    "node type": "ADD",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "a"
                                                                        },
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "b"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FUNCTION",
                                            "label": "b_plus_a",
                                            "children": [
                                                {
                                                    "node type": "PARAMETERS",
                                                    "children": [
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "b",
                                                            "children": [
                                                                {
                                                                    "node type": "TYPE",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "integer"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "a",
                                                            "children": [
                                                                {
                                                                    "node type": "TYPE",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "integer"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 426
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "integer"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "THROWS",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "InternalError"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "REQUIRE",
                                                    "attributes": "REQUIRE_ELSE",
                                                    "children": [
                                                        {
                                                            "node type": "LABEL",
                                                            "label": "a_negative",
                                                            "children": [
                                                                {
                                                                    "node type": "LESS",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "a"
                                                                        },
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 0
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "LABEL",
                                                            "label": "b_positive",
                                                            "children": [
                                                                {
                                                                    "node type": "GREATER_EQUAL",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "b"
                                                                        },
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 0
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "ENSURE",
                                                    "attributes": "ENSURE_THEN",
                                                    "children": [
                                                        {
                                                            "node type": "LABEL",
                                                            "label": "r",
                                                            "children": [
                                                                {
                                                                    "node type": "GREATER_EQUAL",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "result"
                                                                        },
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 0
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "LABEL",
                                                            "label": "field",
                                                            "children": [
                                                                {
                                                                    "node type": "NOT_EQUAL",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "sum"
                                                                        },
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 0
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "RETURN",
                                                            "children": [
                                                                {
                                                                    "node type": "BITWISE_OR",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "b"
                                                                        },
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "a"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // Another 'a+b' function defined as an operator
    {
        //"verbose": true,
        "name": "'a+b' operator",
        "program": "package \"power.addition\"\n\
{\n\
    class add\n\
    {\n\
        public function + (var in const l: add, var in const r: integer)\n\
            : add\n\
        {\n\
            var result : add = new add;\n\
            result.value = l.value;\n\
            result.value += r;\n\
            return result;\n\
        }\n\
    };\n\
};\n",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "power.addition",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "CLASS",
                                            "label": "add",
                                            "children": [
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "FUNCTION",
                                                            "label": "+",
                                                            "flags": "FUNCTION_FLAG_OPERATOR",
                                                            "link attributes": [
                                                                {
                                                                    "node type": "PUBLIC"
                                                                }
                                                            ],
                                                            "children": [
                                                                {
                                                                    "node type": "PARAMETERS",
                                                                    "children": [
                                                                        {
                                                                            "node type": "PARAM",
                                                                            "label": "l",
                                                                            "flags": "PARAM_FLAG_CONST,PARAM_FLAG_IN",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "TYPE",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "add"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "PARAM",
                                                                            "label": "r",
                                                                            "flags": "PARAM_FLAG_CONST,PARAM_FLAG_IN",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "TYPE",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "integer"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "TYPE",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "add"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "DIRECTIVE_LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "VAR",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "VARIABLE",
                                                                                    "label": "result",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "add"
                                                                                        },
                                                                                        {
                                                                                            "node type": "SET",
                                                                                            "children": [
                                                                                                {
                                                                                                    "node type": "NEW",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "node type": "IDENTIFIER",
                                                                                                            "label": "add"
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "ASSIGNMENT",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "result"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "value"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "l"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "value"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "ASSIGNMENT_ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "result"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "value"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "r"
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "RETURN",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "result"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // Random class of functions to test many things in functions
    {
        //"verbose": true,
        "name": "'random' function",
        "program": "class helper_functions\n\
{\n\
    abstract function random_integer(void)\n\
         : Integer;\n\
    abstract function random_double(Void)\n\
         : Double;\n\
    final function random_seed(unprototyped)\n\
         : Void;\n\
    public final function get()\n\
         : Seed;\n\
    public final function get seed()\n\
         : Seed;\n\
    public final function get \"seed\"()\n\
         : Seed;\n\
    public final function set(var named seed: Seed)\n\
         : void;\n\
    public final function set seed (var seed: Seed)\n\
         : void;\n\
    public final function set 'seed' (var seed: Seed)\n\
         : void;\n\
    native function retrieve_random_seed(var in out seed: Random.Seed, ...)\n\
         : Boolean;\n\
    static function random_version(var in named library: String, var out unchecked copyright: String)\n\
         : Double;\n\
    public native function '*' (var in l: Seed, var in r: Seed)\n\
         : Double;\n\
    protected deprecated function () (var in const param: Seed)\n\
         : Never;\n\
    protected deprecated var random_push = function ()\n\
         : Number;\n\
    protected deprecated const random_rush = function (var const p1: Seed, var const p2: String)\n\
         : as2js.complex;\n\
};",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "CLASS",
                            "label": "helper_functions",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FUNCTION",
                                            "label": "random_integer",
                                            "flags": "FUNCTION_FLAG_NOPARAMS",
                                            "link attributes": [
                                                {
                                                    "node type": "ABSTRACT"
                                                }
                                            ],
                                            "children": [
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "Integer"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FUNCTION",
                                            "label": "random_double",
                                            "flags": "FUNCTION_FLAG_NOPARAMS",
                                            "link attributes": [
                                                {
                                                    "node type": "ABSTRACT"
                                                }
                                            ],
                                            "children": [
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "Double"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FUNCTION",
                                            "label": "random_seed",
                                            "flags": "FUNCTION_FLAG_VOID",
                                            "link attributes": [
                                                {
                                                    "node type": "FINAL"
                                                }
                                            ],
                                            "children": [
                                                {
                                                    "node type": "PARAMETERS",
                                                    "children": [
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "",
                                                            "flags": "PARAM_FLAG_UNPROTOTYPED"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FUNCTION",
                                            "label": "get",
                                            "link attributes": [
                                                {
                                                    "node type": "PUBLIC"
                                                },
                                                {
                                                    "node type": "FINAL"
                                                }
                                            ],
                                            "children": [
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "Seed"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FUNCTION",
                                            "label": "->seed",
                                            "flags": "FUNCTION_FLAG_GETTER",
                                            "link attributes": [
                                                {
                                                    "node type": "PUBLIC"
                                                },
                                                {
                                                    "node type": "FINAL"
                                                }
                                            ],
                                            "children": [
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "Seed"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FUNCTION",
                                            "label": "->seed",
                                            "flags": "FUNCTION_FLAG_GETTER",
                                            "link attributes": [
                                                {
                                                    "node type": "PUBLIC"
                                                },
                                                {
                                                    "node type": "FINAL"
                                                }
                                            ],
                                            "children": [
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "Seed"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FUNCTION",
                                            "label": "set",
                                            "flags": "FUNCTION_FLAG_VOID",
                                            "link attributes": [
                                                {
                                                    "node type": "PUBLIC"
                                                },
                                                {
                                                    "node type": "FINAL"
                                                }
                                            ],
                                            "children": [
                                                {
                                                    "node type": "PARAMETERS",
                                                    "children": [
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "seed",
                                                            "flags": "PARAM_FLAG_NAMED",
                                                            "children": [
                                                                {
                                                                    "node type": "TYPE",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "Seed"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FUNCTION",
                                            "label": "<-seed",
                                            "flags": "FUNCTION_FLAG_VOID,FUNCTION_FLAG_SETTER",
                                            "link attributes": [
                                                {
                                                    "node type": "PUBLIC"
                                                },
                                                {
                                                    "node type": "FINAL"
                                                }
                                            ],
                                            "children": [
                                                {
                                                    "node type": "PARAMETERS",
                                                    "children": [
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "seed",
                                                            "children": [
                                                                {
                                                                    "node type": "TYPE",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "Seed"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FUNCTION",
                                            "label": "<-seed",
                                            "flags": "FUNCTION_FLAG_VOID,FUNCTION_FLAG_SETTER",
                                            "link attributes": [
                                                {
                                                    "node type": "PUBLIC"
                                                },
                                                {
                                                    "node type": "FINAL"
                                                }
                                            ],
                                            "children": [
                                                {
                                                    "node type": "PARAMETERS",
                                                    "children": [
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "seed",
                                                            "children": [
                                                                {
                                                                    "node type": "TYPE",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "Seed"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FUNCTION",
                                            "label": "retrieve_random_seed",
                                            "flags": "FUNCTION_FLAG_OUT",
                                            "link attributes": [
                                                {
                                                    "node type": "NATIVE"
                                                }
                                            ],
                                            "children": [
                                                {
                                                    "node type": "PARAMETERS",
                                                    "children": [
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "seed",
                                                            "flags": "PARAM_FLAG_IN,PARAM_FLAG_OUT",
                                                            "children": [
                                                                {
                                                                    "node type": "TYPE",
                                                                    "children": [
                                                                        {
                                                                            "node type": "MEMBER",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "Random"
                                                                                },
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "Seed"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "",
                                                            "flags": "PARAM_FLAG_REST"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "Boolean"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FUNCTION",
                                            "label": "random_version",
                                            "flags": "FUNCTION_FLAG_OUT",
                                            "link attributes": [
                                                {
                                                    "node type": "STATIC"
                                                }
                                            ],
                                            "children": [
                                                {
                                                    "node type": "PARAMETERS",
                                                    "children": [
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "library",
                                                            "flags": "PARAM_FLAG_IN,PARAM_FLAG_NAMED",
                                                            "children": [
                                                                {
                                                                    "node type": "TYPE",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "String"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "copyright",
                                                            "flags": "PARAM_FLAG_OUT,PARAM_FLAG_UNCHECKED",
                                                            "children": [
                                                                {
                                                                    "node type": "TYPE",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "String"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "Double"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FUNCTION",
                                            "label": "*",
                                            "flags": "FUNCTION_FLAG_OPERATOR",
                                            "link attributes": [
                                                {
                                                    "node type": "PUBLIC"
                                                },
                                                {
                                                    "node type": "NATIVE"
                                                }
                                            ],
                                            "children": [
                                                {
                                                    "node type": "PARAMETERS",
                                                    "children": [
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "l",
                                                            "flags": "PARAM_FLAG_IN",
                                                            "children": [
                                                                {
                                                                    "node type": "TYPE",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "Seed"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "r",
                                                            "flags": "PARAM_FLAG_IN",
                                                            "children": [
                                                                {
                                                                    "node type": "TYPE",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "Seed"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "Double"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FUNCTION",
                                            "label": "()",
                                            "flags": "FUNCTION_FLAG_OPERATOR,FUNCTION_FLAG_NEVER",
                                            "link attributes": [
                                                {
                                                    "node type": "PROTECTED"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "deprecated"
                                                }
                                            ],
                                            "children": [
                                                {
                                                    "node type": "PARAMETERS",
                                                    "children": [
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "param",
                                                            "flags": "PARAM_FLAG_IN,PARAM_FLAG_CONST",
                                                            "children": [
                                                                {
                                                                    "node type": "TYPE",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "Seed"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "VAR",
                                            "link attributes": [
                                                {
                                                    "node type": "PROTECTED"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "deprecated"
                                                }
                                            ],
                                            "children": [
                                                {
                                                    "node type": "VARIABLE",
                                                    "label": "random_push",
                                                    "children": [
                                                        {
                                                            "node type": "SET",
                                                            "children": [
                                                                {
                                                                    "node type": "FUNCTION",
                                                                    "label": "",
                                                                    "children": [
                                                                        {
                                                                            "node type": "TYPE",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "Number"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "VAR",
                                            "link attributes": [
                                                {
                                                    "node type": "PROTECTED"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "deprecated"
                                                }
                                            ],
                                            "children": [
                                                {
                                                    "node type": "VARIABLE",
                                                    "label": "random_rush",
                                                    "flags": "VARIABLE_FLAG_CONST",
                                                    "children": [
                                                        {
                                                            "node type": "SET",
                                                            "children": [
                                                                {
                                                                    "node type": "FUNCTION",
                                                                    "label": "",
                                                                    "children": [
                                                                        {
                                                                            "node type": "PARAMETERS",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "PARAM",
                                                                                    "label": "p1",
                                                                                    "flags": "PARAM_FLAG_CONST",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "TYPE",
                                                                                            "children": [
                                                                                                {
                                                                                                    "node type": "IDENTIFIER",
                                                                                                    "label": "Seed"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "PARAM",
                                                                                    "label": "p2",
                                                                                    "flags": "PARAM_FLAG_CONST",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "TYPE",
                                                                                            "children": [
                                                                                                {
                                                                                                    "node type": "IDENTIFIER",
                                                                                                    "label": "String"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "TYPE",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "as2js"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "complex"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // Unexpected '...' with 'out'
    {
        //"\"verbose\": true,"
        "name": "invalid \"out\" with \"...\" in function parameter list",
        "program": "function bad_out(out a: integer, out ... named_and_typed_rest: Complex);",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PARAMETERS",
                "line #": 1,
                "message": "you cannot use the function parameter attribute 'out' with '...'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FUNCTION",
                            "label": "bad_out",
                            "flags": "FUNCTION_FLAG_OUT",
                            "children": [
                                {
                                    "node type": "PARAMETERS",
                                    "children": [
                                        {
                                            "node type": "PARAM",
                                            "label": "a",
                                            "flags": "PARAM_FLAG_OUT",
                                            "children": [
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "integer"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "PARAM",
                                            "label": "named_and_typed_rest",
                                            "flags": "PARAM_FLAG_OUT,PARAM_FLAG_REST",
                                            "children": [
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "Complex"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // Unexpected 'const' with 'out'
    {
        //"verbose": true,
        "name": "invalid \"out\" with \"const\" in function parameter list",
        "program": "function bad_out_with_const(const in a: integer, const out b: String);",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PARAMETERS",
                "line #": 1,
                "message": "you cannot use the function attributes 'out' and 'const' together."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FUNCTION",
                            "label": "bad_out_with_const",
                            "flags": "FUNCTION_FLAG_OUT",
                            "children": [
                                {
                                    "node type": "PARAMETERS",
                                    "children": [
                                        {
                                            "node type": "PARAM",
                                            "label": "a",
                                            "flags": "PARAM_FLAG_CONST,PARAM_FLAG_IN",
                                            "children": [
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "integer"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "PARAM",
                                            "label": "b",
                                            "flags": "PARAM_FLAG_CONST,PARAM_FLAG_OUT",
                                            "children": [
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "String"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // Unexpected '=' with '...'
    {
        //"verbose": true,
        "name": "invalid assignment to \"...\" in function parameter list",
        "program": "function bad_assignment(out bottom: integer, ... power: Complex = {a:1, b:4});",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PARAMETERS",
                "line #": 1,
                "message": "you cannot assign a default value to '...'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FUNCTION",
                            "label": "bad_assignment",
                            "flags": "FUNCTION_FLAG_OUT",
                            "children": [
                                {
                                    "node type": "PARAMETERS",
                                    "children": [
                                        {
                                            "node type": "PARAM",
                                            "label": "bottom",
                                            "flags": "PARAM_FLAG_OUT",
                                            "children": [
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "integer"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "PARAM",
                                            "label": "power",
                                            "flags": "PARAM_FLAG_REST",
                                            "children": [
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "Complex"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "SET",
                                                    "children": [
                                                        {
                                                            "node type": "OBJECT_LITERAL",
                                                            "children": [
                                                                {
                                                                    "node type": "NAME",
                                                                    "label": "a"
                                                                },
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 1
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "NAME",
                                                                    "label": "b"
                                                                },
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 4
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // Missing ')'
    {
        //"verbose": true,
        "name": "')' missing to close function parameter list",
        "program": "function missing_parenthesis(out only_param: integer { return \"Missing Parenthesis\"; }",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PARAMETERS",
                "line #": 1,
                "message": "expected ')' or ',' after a parameter declaration (not token OPEN_CURVLY_BRACKET)."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 1,
                "message": "')' expected to close the list of parameters of this function."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FUNCTION",
                            "label": "missing_parenthesis",
                            "flags": "FUNCTION_FLAG_OUT",
                            "children": [
                                {
                                    "node type": "PARAMETERS",
                                    "children": [
                                        {
                                            "node type": "PARAM",
                                            "label": "only_param",
                                            "flags": "PARAM_FLAG_OUT",
                                            "children": [
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "integer"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "RETURN",
                                            "children": [
                                                {
                                                    "node type": "STRING",
                                                    "label": "Missing Parenthesis"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // Missing ','
    {
        //"verbose": true,
        "name": "',' missing to separate function parameters",
        "program": "function missing_comma(out first_param: integer more) { return \"Missing Comma\"; }",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PARAMETERS",
                "line #": 1,
                "message": "expected ')' or ',' after a parameter declaration (not token IDENTIFIER)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FUNCTION",
                            "label": "missing_comma",
                            "flags": "FUNCTION_FLAG_OUT",
                            "children": [
                                {
                                    "node type": "PARAMETERS",
                                    "children": [
                                        {
                                            "node type": "PARAM",
                                            "label": "first_param",
                                            "flags": "PARAM_FLAG_OUT",
                                            "children": [
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "integer"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "PARAM",
                                            "label": "more"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "RETURN",
                                            "children": [
                                                {
                                                    "node type": "STRING",
                                                    "label": "Missing Comma"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // '...' cannot be followed by other parameters
    {
        //"verbose": true,
        "name": "'...' must be last",
        "program": "function bad_rest(first_param, ..., more) { return \"Bad\" + \" '...' \" + \"position\"; }",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PARAMETERS",
                "line #": 1,
                "message": "no other parameters expected after '...'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FUNCTION",
                            "label": "bad_rest",
                            "children": [
                                {
                                    "node type": "PARAMETERS",
                                    "children": [
                                        {
                                            "node type": "PARAM",
                                            "label": "first_param"
                                        },
                                        {
                                            "node type": "PARAM",
                                            "label": "",
                                            "flags": "PARAM_FLAG_REST"
                                        },
                                        {
                                            "node type": "PARAM",
                                            "label": "more"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "RETURN",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "ADD",
                                                            "children": [
                                                                {
                                                                    "node type": "STRING",
                                                                    "label": "Bad"
                                                                },
                                                                {
                                                                    "node type": "STRING",
                                                                    "label": " '...' "
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "STRING",
                                                            "label": "position"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // function [gs]et "+" () is not acceptable
    {
        //"verbose": true,
        "name": "getter/setter cannot be an operator",
        "program": "function get \"+\"(l, r)\n { return l + r; }function set\">>>\"(l,r){return l+r;}",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_FUNCTION",
                "line #": 1,
                "message": "operator override cannot be marked as a getter nor a setter function."
            },
            {
                "message level": 2,
                "error code": "INVALID_FUNCTION",
                "line #": 2,
                "message": "operator override cannot be marked as a getter nor a setter function."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FUNCTION",
                            "label": "->+",
                            "flags": "FUNCTION_FLAG_GETTER",
                            "children": [
                                {
                                    "node type": "PARAMETERS",
                                    "children": [
                                        {
                                            "node type": "PARAM",
                                            "label": "l"
                                        },
                                        {
                                            "node type": "PARAM",
                                            "label": "r"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "RETURN",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "l"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "r"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "FUNCTION",
                            "label": "<->>>",
                            "flags": "FUNCTION_FLAG_SETTER",
                            "children": [
                                {
                                    "node type": "PARAMETERS",
                                    "children": [
                                        {
                                            "node type": "PARAM",
                                            "label": "l"
                                        },
                                        {
                                            "node type": "PARAM",
                                            "label": "r"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "RETURN",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "l"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "r"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // function [gs]et (not identifier, not string, not '(') is just wrong
    {
        //"verbose": true,
        "name": "getter/setter expects an identifier, a string, or '('",
        "program": "function get 123 { return 5; }",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_FUNCTION",
                "line #": 1,
                "message": "getter and setter functions require a name."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 1,
                "message": "';' was expected after 'INT64'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FUNCTION",
                            "label": "",
                            "flags": "FUNCTION_FLAG_GETTER"
                        },
                        {
                            "node type": "INT64",
                            "integer": 123
                        },
                        {
                            "node type": "DIRECTIVE_LIST",
                            "children": [
                                {
                                    "node type": "RETURN",
                                    "children": [
                                        {
                                            "node type": "INT64",
                                            "integer": 5
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // var a = function [gs]et blah(); is wrong too
    {
        //"verbose": true,
        "name": "function expressions cannot be getters nor setters",
        "program": "var _a = function get foo();\nvar b_ = function set blah();",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_FUNCTION",
                "line #": 1,
                "message": "expression functions cannot be getter nor setter functions."
            },
            {
                "message level": 2,
                "error code": "INVALID_FUNCTION",
                "line #": 2,
                "message": "expression functions cannot be getter nor setter functions."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "VAR",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "_a",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "FUNCTION",
                                                    "label": "->foo",
                                                    "flags": "FUNCTION_FLAG_GETTER"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "VAR",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "b_",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "FUNCTION",
                                                    "label": "<-blah",
                                                    "flags": "FUNCTION_FLAG_SETTER"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // function a b (); is wrong, we have a special error because we
    // support getters and setters
    {
        //"verbose": true,
        "name": "function cannot have more than one name",
        "program": "function a b();",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_FUNCTION",
                "line #": 1,
                "message": "only one name is expected for a function (misspelled get or set? missing '(' before a parameter?)"
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FUNCTION",
                            "label": "a"
                        }
                    ]
                }
            ]
        }
    },

    // function(); missing name when not an expression
    {
        //"verbose": true,
        "name": "function must be named",
        "program": "function() { return \"Missing Name\"; }",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_FUNCTION",
                "line #": 1,
                "message": "function declarations are required to be named."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FUNCTION",
                            "label": "",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "RETURN",
                                            "children": [
                                                {
                                                    "node type": "STRING",
                                                    "label": "Missing Name"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A stand along else in a directive list fails
    {
        //"verbose": true,
        "name": "else without an if() breaks the directive list",
        "program": "function no_if() { else }",
        "expected messages": [
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to close the 'function' block."
            },
            {
                "message level": 2,
                "error code": "INVALID_KEYWORD",
                "line #": 1,
                "message": "'else' not expected without an 'if' keyword."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' not expected without a '{'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FUNCTION",
                            "label": "no_if",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST"
                                }
                            ]
                        }
                    ]
                },
                {
                    "node type": "DIRECTIVE_LIST"
                }
            ]
        }
    },

    // A stand along else in a directive list fails
    {
        //"verbose": true,
        "name": "two parameters separated by < and > instead of a comma",
        "program": "function bad_params(a < > b) { return 3.3; }",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PARAMETERS",
                "line #": 1,
                "message": "expected ')' or ',' after a parameter declaration (not token LESS)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FUNCTION",
                            "label": "bad_params",
                            "children": [
                                {
                                    "node type": "PARAMETERS",
                                    "children": [
                                        {
                                            "node type": "PARAM",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "PARAM",
                                            "label": "b"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "RETURN",
                                            "children": [
                                                {
                                                    "node type": "FLOAT64",
                                                    "float": 3.3
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A variable definition missing the variable name
    {
        //"verbose": true,
        "name": "variable missing its name",
        "program": "var = 'oops';\nconst = 'hola!';\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_VARIABLE",
                "line #": 1,
                "message": "expected an identifier as the variable name."
            },
            {
                "message level": 2,
                "error code": "INVALID_VARIABLE",
                "line #": 2,
                "message": "expected an identifier as the const name."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "VAR",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "STRING",
                                                    "label": "oops"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "VAR",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "",
                                    "flags": "VARIABLE_FLAG_CONST",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "STRING",
                                                    "label": "hola!"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A variable of attributes
    {
        //"verbose": true,
        "name": "variable of attributes",
        "program": "const var attr_list = autobreak constructor deprecated;\n",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "VAR",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "attr_list",
                                    "flags": "VARIABLE_FLAG_CONST",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "autobreak"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "constructor"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "deprecated"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A package declaration must include a '{' after its name
    {
        //"verbose": true,
        "name": "'{' missing after package name",
        "program": "package the.grand_package.name var prog = 13.9; }\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected after the package name."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "the.grand_package.name",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "VAR",
                                            "children": [
                                                {
                                                    "node type": "VARIABLE",
                                                    "label": "prog",
                                                    "children": [
                                                        {
                                                            "node type": "SET",
                                                            "children": [
                                                                {
                                                                    "node type": "FLOAT64",
                                                                    "float": 13.9
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A package declaration must end with a '}' after its list of directives
    {
        //"verbose": true,
        "name": "'}' missing after package directives",
        "program": "package the.funky_package.name { var pi = 3.14159;\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 2,
                "message": "'}' expected after the package declaration."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "the.funky_package.name",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "VAR",
                                            "children": [
                                                {
                                                    "node type": "VARIABLE",
                                                    "label": "pi",
                                                    "children": [
                                                        {
                                                            "node type": "SET",
                                                            "children": [
                                                                {
                                                                    "node type": "FLOAT64",
                                                                    "float": 3.14159
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A package name not in a string must be identifiers separated by periods
    {
        //"verbose": true,
        "name": "invalid package name (ends with an identifier)",
        "program": "package the.private.name { function a(b) { if(b) console.log('\"b\" is true'); } }\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "invalid package name (expected an identifier after the last '.')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "the.name",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FUNCTION",
                                            "label": "a",
                                            "children": [
                                                {
                                                    "node type": "PARAMETERS",
                                                    "children": [
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "b"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "IF",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "b"
                                                                },
                                                                {
                                                                    "node type": "DIRECTIVE_LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "CALL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "console"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "log"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "LIST",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "STRING",
                                                                                            "label": "\"b\" is true"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A package name not in a string must be identifiers separated by periods
    {
        //"verbose": true,
        "name": "invalid package name (ends with 'private')",
        "program": "package the.private { function a(b) { if(b) console.log('\"b\" is true'); } }\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "invalid package name (expected an identifier after the last '.')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "the",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FUNCTION",
                                            "label": "a",
                                            "children": [
                                                {
                                                    "node type": "PARAMETERS",
                                                    "children": [
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "b"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "IF",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "b"
                                                                },
                                                                {
                                                                    "node type": "DIRECTIVE_LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "CALL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "console"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "log"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "LIST",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "STRING",
                                                                                            "label": "\"b\" is true"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing a couple of packages
    {
        //"verbose": true,
        "name": "import packages",
        "program": "import renamed = snap.website.extensions;\n\
import implements snap.numbers.complex;\n\
import \"magic.numbers\", namespace magical, include \"rhetorics\";\n\
import snap.extensions.*, exclude ajax;\n\
import edit = \"snap.editor\";\n",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.website.extensions",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "renamed"
                                }
                            ]
                        },
                        {
                            "node type": "IMPORT",
                            "label": "snap.numbers.complex",
                            "flags": "IMPORT_FLAG_IMPLEMENTS"
                        },
                        {
                            "node type": "IMPORT",
                            "label": "magic.numbers",
                            "children": [
                                {
                                    "node type": "USE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "magical"
                                        }
                                    ]
                                },
                                {
                                    "node type": "INCLUDE",
                                    "children": [
                                        {
                                            "node type": "STRING",
                                            "label": "rhetorics"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "IMPORT",
                            "label": "snap.extensions.*",
                            "children": [
                                {
                                    "node type": "EXCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "ajax"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "IMPORT",
                            "label": "snap.editor",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "edit"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing and renaming a package with a string and a period fails
    {
        //"verbose": true,
        "name": "import packages: invalid name string/member mix",
        "program": "import new_name = \"snap\".invalid;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "a package name is either a string or a list of identifiers separated by periods (.); you cannot mixed both."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.invalid",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "new_name"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing and renaming a package without a string or identifier
    {
        //"verbose": true,
        "name": "import packages: invalid name, missing string or identifier",
        "program": "import new_name = .invalid;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the name of a package was expected."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": ".invalid",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "new_name"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Using '*' is not compatible with renaming
    {
        //"verbose": true,
        "name": "import packages: * cannot be used when renaming a package",
        "program": "import other_name = snap.*;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the * notation cannot be used when renaming an import."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.*",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "other_name"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing and renaming a package without a string or identifier
    {
        //"verbose": true,
        "name": "import packages: * must be last",
        "program": "import snap.*.and.more;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the * notation can only be used once at the end of a name."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.*.and.more"
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing name must be identifiers seperated by periods
    {
        //"verbose": true,
        "name": "import packages: * must be last",
        "program": "import snap.*.and.more;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the * notation can only be used once at the end of a name."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.*.and.more"
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing name must be identifiers seperated by periods, not strings
    {
        //"verbose": true,
        "name": "import packages cannot include identifiers and strings",
        "program": "import snap.\"and\".more;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "a package name is either a string or a list of identifiers separated by periods (.); you cannot mixed both."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap..more"
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing name must end with an identifier
    {
        //"verbose": true,
        "name": "import package names cannot end with a period",
        "program": "import snap.and.;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the name of a package was expected."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.and."
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing name must end with an identifier
    {
        //"verbose": true,
        "name": "import package cannot just be an asterisk",
        "program": "import *;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "a composed name or a string was expected after 'import'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": ""
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing cannot at the same time include and exclude...
    {
        //"verbose": true,
        "name": "import package cannot exclude and include at the same time",
        "program": "import snap.stuff, exclude 'this', include 'that';",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_IMPORT",
                "line #": 1,
                "message": "include and exclude are mutually exclusive."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.stuff",
                            "children": [
                                {
                                    "node type": "EXCLUDE",
                                    "children": [
                                        {
                                            "node type": "STRING",
                                            "label": "this"
                                        }
                                    ]
                                },
                                {
                                    "node type": "INCLUDE",
                                    "children": [
                                        {
                                            "node type": "STRING",
                                            "label": "that"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing cannot at the same time include and exclude...
    {
        //"verbose": true,
        "name": "import package cannot include and exclude at the same time",
        "program": "import snap.stuff, include first, exclude last;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_IMPORT",
                "line #": 1,
                "message": "include and exclude are mutually exclusive."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.stuff",
                            "children": [
                                {
                                    "node type": "INCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "first"
                                        }
                                    ]
                                },
                                {
                                    "node type": "EXCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "last"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing followed by anything other than namespace, include, exclude
    {
        //"verbose": true,
        "name": "import package extras not namespace, include, nor exclude",
        "program": "import feather.stuff, include only_this_class, oops;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_IMPORT",
                "line #": 1,
                "message": "namespace, include or exclude was expected after the comma."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 1,
                "message": "';' was expected after 'IMPORT'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "feather.stuff",
                            "children": [
                                {
                                    "node type": "INCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "only_this_class"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing followed by a comma and not namespace or an identifier
    {
        //"verbose": true,
        "name": "import with an unexpected token after the comma",
        "program": "import light.stuff, exclude but_that_class, 123;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 1,
                "message": "';' was expected after 'IMPORT'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "light.stuff",
                            "children": [
                                {
                                    "node type": "EXCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "but_that_class"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing followed by a comma and not namespace or an identifier
    {
        //"verbose": true,
        "name": "import two commas in a row...",
        "program": "import light.stuff, exclude one,, exclude two;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_IMPORT",
                "line #": 1,
                "message": "two commas in a row is not allowed while describing an import."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "light.stuff",
                            "children": [
                                {
                                    "node type": "EXCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "one"
                                        }
                                    ]
                                },
                                {
                                    "node type": "EXCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "two"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // Importing name with double dots
    {
        //"verbose": true,
        "name": "import two period one after another (i.e. a range)...",
        "program": "import string..buffer..overflow;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the name of a package is expected to be separated by single periods (.)."
            },
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the name of a package is expected to be separated by single periods (.)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "string.buffer.overflow"
                        }
                    ]
                }
            ]
        }
    },

    // Importing name with triple dots
    {
        //"verbose": true,
        "name": "import three periods one after another (i.e. a rest)...",
        "program": "import string...buffer...overflow;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the name of a package is expected to be separated by single periods (.)."
            },
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the name of a package is expected to be separated by single periods (.)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "string.buffer.overflow"
                        }
                    ]
                }
            ]
        }
    },
 
    // Use namespace
    {
        //"verbose": true,
        "name": "use namespace",
        "program": "use namespace snapwebsites;",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "USE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "snapwebsites"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Namespace block
    {
        //"verbose": true,
        "name": "namespace defining an enumeration",
        "program": "namespace snap { enum escargot { bourgogne, bigornot, planorbe }; };",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "NAMESPACE",
                            "label": "snap",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ENUM",
                                                    "label": "escargot",
                                                    "children": [
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "bourgogne",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 0
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "bigornot",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": 'bourgogne'
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "planorbe",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": 'bigornot'
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]

                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Namespace block without a block
    {
        //"verbose": true,
        "name": "namespace snap;",
        "program": "namespace snapwebsites;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_NAMESPACE",
                "line #": 1,
                "message": "'{' missing after the name of this namespace."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "NAMESPACE",
                            "label": "snapwebsites"
                        }
                    ]
                }
            ]
        }
    },
 
    // Namespace block without a name
    {
        //"verbose": true,
        "name": "namespace without a name makes things inside private",
        "program": "namespace { enum colors { red = { r: 255, g: 0, b: 0 }, green = { r: 0, g: 255, b: 0 }, blue = { r: 0, g: 0, b: 255 } }; }",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "NAMESPACE",
                            "label": "",
                            "link attributes": [
                                {
                                    "node type": "PRIVATE"
                                }
                            ],
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ENUM",
                                                    "label": "colors",
                                                    "children": [
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "red",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "OBJECT_LITERAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "r"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 255
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "g"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 0
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "b"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 0
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "green",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "OBJECT_LITERAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "r"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 0
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "g"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 255
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "b"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 0
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "blue",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "OBJECT_LITERAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "r"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 0
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "g"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 0
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "b"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 255
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Namespace block without a name and existing attributes
    {
        //"verbose": true,
        "name": "namespace without a name and some attributes",
        "program": "native static namespace { enum strength { min = 55, average, max }; }",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "NAMESPACE",
                            "label": "",
                            "link attributes": [
                                {
                                    "node type": "NATIVE"
                                },
                                {
                                    "node type": "STATIC"
                                },
                                {
                                    "node type": "PRIVATE"
                                }
                            ],
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ENUM",
                                                    "label": "strength",
                                                    "children": [
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "min",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 55
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "average",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "min"
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "max",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "average"
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Namespace block without a name and existing attributes including private
    {
        //"verbose": true,
        "name": "namespace without a name and some attributes including 'private'",
        "program": "native private static namespace { enum class strength: Number { min = 5 + 5, average = min + 3, max = min + 10 }; }",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "NAMESPACE",
                            "label": "",
                            "link attributes": [
                                {
                                    "node type": "NATIVE"
                                },
                                {
                                    "node type": "PRIVATE"
                                },
                                {
                                    "node type": "STATIC"
                                }
                            ],
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ENUM",
                                                    "label": "strength",
                                                    "flags": "ENUM_FLAG_CLASS",
                                                    "children": [
                                                        {
                                                            "node type": "TYPE",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "Number"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "min",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 5
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 5
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "average",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "min"
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 3
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "max",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "min"
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 10
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Forward enumeration
    {
        //"verbose": true,
        "name": "forward enumeration definition",
        "program": "enum forward_number;",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "forward_number"
                        }
                    ]
                }
            ]
        }
    },
 
    // Forward enumeration with missing name
    {
        //"verbose": true,
        "name": "forward enumeration without a name",
        "program": "enum class : strong_type;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_ENUM",
                "line #": 1,
                "message": "a forward enumeration must be named."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "",
                            "flags": "ENUM_FLAG_CLASS",
                            "children": [
                                {
                                    "node type": "TYPE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "strong_type"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Forward enumeration without a ';'
    {
        //"verbose": true,
        "name": "\"forward\" enumeration without a ';'",
        "program": "enum class with_a_name : random_type",
        "expected messages": [
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to start the 'enum' definition."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "with_a_name",
                            "flags": "ENUM_FLAG_CLASS",
                            "children": [
                                {
                                    "node type": "TYPE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "random_type"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration starting with ','
    {
        //"verbose": true,
        "name": "enumeration starting with a ','",
        "program": "enum cool_name : double_type { , oops };",
        "expected messages": [
            {
                "message level": 3,
                "error code": "UNEXPECTED_PUNCTUATION",
                "line #": 1,
                "message": "',' unexpected without a name."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "cool_name",
                            "children": [
                                {
                                    "node type": "TYPE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "double_type"
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "oops",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration with two ',' one after another
    {
        //"verbose": true,
        "name": "enumeration starting with a ','",
        "program": "enum class with_a_name : complex { killer , , whale };",
        "expected messages": [
            {
                "message level": 3,
                "error code": "UNEXPECTED_PUNCTUATION",
                "line #": 1,
                "message": "',' unexpected without a name."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "with_a_name",
                            "flags": "ENUM_FLAG_CLASS",
                            "children": [
                                {
                                    "node type": "TYPE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "complex"
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "killer",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "whale",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "killer"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration with a missing identifier
    {
        //"verbose": true,
        "name": "enumeration with a missing identifier with assignment",
        "program": "enum simple { v1, v2 = 3, = 10 };",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_ENUM",
                "line #": 1,
                "message": "each 'enum' entry needs to include an identifier."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "simple",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "v1",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v2",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 3
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 10
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration with a string instead of an identifier
    {
        //"verbose": true,
        "name": "enumeration with a string instead of the identifier",
        "program": "enum simple { v1, v2 = 3, \"v3\" = 10 };",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_ENUM",
                "line #": 1,
                "message": "each 'enum' entry needs to include an identifier."
            }
            //{
            //    "message level": 2,
            //    "error code": "COMMA_EXPECTED",
            //    "line #": 1,
            //    "message": "',' expected between enumeration elements."
            //}
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "simple",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "v1",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v2",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 3
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 10
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration with a missing comma
    {
        //"verbose": true,
        "name": "enumeration with two identifiers in a row",
        "program": "enum missing_comma { v1 v2, v3 };",
        "expected messages": [
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 1,
                "message": "',' expected between enumeration elements."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "missing_comma",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "v1",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v2",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "v1"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v3",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "v2"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration without the '}'
    {
        //"verbose": true,
        "name": "enumeration missing the '}' at the end",
        "program": "enum missing_closing_bracket { v1, v2, v3 ;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to close the 'enum' definition."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "missing_closing_bracket",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "v1",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v2",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "v1"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v3",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "v2"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration without the '}' and ';'
    {
        //"verbose": true,
        "name": "enumeration missing the '}' and ';' at the end",
        "program": "enum missing_closing_bracket { v1, v2, v3",
        "expected messages": [
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 1,
                "message": "',' expected between enumeration elements."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to close the 'enum' definition."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "missing_closing_bracket",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "v1",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v2",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "v1"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v3",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "v2"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A class with some valid invariants
    {
        //"verbose": true,
        "name": "class with a valid invariant contract",
        "program": "package \"valid.invariant\"\n\
{\n\
    class advanced_class extends base_class, orange_class implements archiver, blue_class\n\
    {\n\
        public virtual function save_data(var in const v1: some.strange.type, var in const v2: integer)\n\
            : void\n\
        {\n\
            this.value_one = v1;\n\
            this.value_two = v2;\n\
        }\n\
\n\
        invariant value_two_is_integer: typeof this.value_two == \"Number\",\n\
                  value_one_is_positive: this.value_one > 0;\n\
    };\n\
};\n",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "valid.invariant",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "CLASS",
                                            "label": "advanced_class",
                                            "children": [
                                                {
                                                    "node type": "EXTENDS",
                                                    "children": [
                                                        {
                                                            "node type": "LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "base_class"
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "orange_class"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "IMPLEMENTS",
                                                    "children": [
                                                        {
                                                            "node type": "LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "archiver"
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "blue_class"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "FUNCTION",
                                                            "label": "save_data",
                                                            "flags": "FUNCTION_FLAG_VOID",
                                                            "link attributes": [
                                                                {
                                                                    "node type": "PUBLIC"
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "virtual"
                                                                }
                                                            ],
                                                            "children": [
                                                                {
                                                                    "node type": "PARAMETERS",
                                                                    "children": [
                                                                        {
                                                                            "node type": "PARAM",
                                                                            "label": "v1",
                                                                            "flags": "PARAM_FLAG_CONST,PARAM_FLAG_IN",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "TYPE",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "MEMBER",
                                                                                            "children": [
                                                                                                {
                                                                                                    "node type": "MEMBER",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "node type": "IDENTIFIER",
                                                                                                            "label": "some"
                                                                                                        },
                                                                                                        {
                                                                                                            "node type": "IDENTIFIER",
                                                                                                            "label": "strange"
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "node type": "IDENTIFIER",
                                                                                                    "label": "type"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "PARAM",
                                                                            "label": "v2",
                                                                            "flags": "PARAM_FLAG_CONST,PARAM_FLAG_IN",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "TYPE",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "integer"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "DIRECTIVE_LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ASSIGNMENT",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "THIS"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "value_one"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "v1"
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "ASSIGNMENT",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "THIS"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "value_two"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "v2"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "INVARIANT",
                                                            "children": [
                                                                {
                                                                    "node type": "LABEL",
                                                                    "label": "value_two_is_integer",
                                                                    "children": [
                                                                        {
                                                                            "node type": "EQUAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "TYPEOF",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "MEMBER",
                                                                                            "children": [
                                                                                                {
                                                                                                    "node type": "THIS"
                                                                                                },
                                                                                                {
                                                                                                    "node type": "IDENTIFIER",
                                                                                                    "label": "value_two"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "STRING",
                                                                                    "label": "Number"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "LABEL",
                                                                    "label": "value_one_is_positive",
                                                                    "children": [
                                                                        {
                                                                            "node type": "GREATER",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "THIS"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "value_one"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 0
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A class with an invalid invariant
    {
        //"verbose": true,
        "name": "class with a valid invariant contract (missing identifier)",
        "program": "package \"valid.invariant\"\n\
{\n\
    class advanced_class extends base_class\n\
    {\n\
        public virtual function save_data(var in const v1: some.strange.type, var in const v2: integer)\n\
            : void\n\
        {\n\
            this.value_one = v1;\n\
            this.value_two = v2;\n\
        }\n\
\n\
        invariant : typeof this.value_two == \"Number\",\n\
                  value_one_is_positive: this.value_one > 0;\n\
    };\n\
};\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_LABEL",
                "line #": 12,
                "message": "'INVARIANT' must be followed by a list of labeled expressions."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "valid.invariant",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "CLASS",
                                            "label": "advanced_class",
                                            "children": [
                                                {
                                                    "node type": "EXTENDS",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "base_class"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "FUNCTION",
                                                            "label": "save_data",
                                                            "flags": "FUNCTION_FLAG_VOID",
                                                            "link attributes": [
                                                                {
                                                                    "node type": "PUBLIC"
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "virtual"
                                                                }
                                                            ],
                                                            "children": [
                                                                {
                                                                    "node type": "PARAMETERS",
                                                                    "children": [
                                                                        {
                                                                            "node type": "PARAM",
                                                                            "label": "v1",
                                                                            "flags": "PARAM_FLAG_CONST,PARAM_FLAG_IN",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "TYPE",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "MEMBER",
                                                                                            "children": [
                                                                                                {
                                                                                                    "node type": "MEMBER",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "node type": "IDENTIFIER",
                                                                                                            "label": "some"
                                                                                                        },
                                                                                                        {
                                                                                                            "node type": "IDENTIFIER",
                                                                                                            "label": "strange"
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "node type": "IDENTIFIER",
                                                                                                    "label": "type"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "PARAM",
                                                                            "label": "v2",
                                                                            "flags": "PARAM_FLAG_CONST,PARAM_FLAG_IN",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "TYPE",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "integer"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "DIRECTIVE_LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ASSIGNMENT",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "THIS"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "value_one"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "v1"
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "ASSIGNMENT",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "THIS"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "value_two"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "v2"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "INVARIANT",
                                                            "children": [
                                                                {
                                                                    "node type": "LABEL",
                                                                    "label": "",
                                                                    "children": [
                                                                        {
                                                                            "node type": "EQUAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "TYPEOF",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "MEMBER",
                                                                                            "children": [
                                                                                                {
                                                                                                    "node type": "THIS"
                                                                                                },
                                                                                                {
                                                                                                    "node type": "IDENTIFIER",
                                                                                                    "label": "value_two"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "STRING",
                                                                                    "label": "Number"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "LABEL",
                                                                    "label": "value_one_is_positive",
                                                                    "children": [
                                                                        {
                                                                            "node type": "GREATER",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "THIS"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "value_one"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 0
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A class with an invalid invariant
    {
        //"verbose": true,
        "name": "class with a valid invariant contract (missing colon)",
        "program": "package \"valid.invariant\"\n\
{\n\
    class advanced_class extends base_class\n\
    {\n\
        public virtual function save_data(var in const v1: some.strange.type, var in const v2: integer)\n\
            : void\n\
        {\n\
            this.value_one = v1;\n\
            this.value_two = v2;\n\
        }\n\
\n\
        invariant value_two_is_a_number typeof this.value_two == \"Number\",\n\
                  value_one_is_positive: this.value_one > 0;\n\
    };\n\
};\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "COLON_EXPECTED",
                "line #": 12,
                "message": "the 'INVARIANT' label must be followed by a colon (:)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "valid.invariant",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "CLASS",
                                            "label": "advanced_class",
                                            "children": [
                                                {
                                                    "node type": "EXTENDS",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "base_class"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "FUNCTION",
                                                            "label": "save_data",
                                                            "flags": "FUNCTION_FLAG_VOID",
                                                            "link attributes": [
                                                                {
                                                                    "node type": "PUBLIC"
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "virtual"
                                                                }
                                                            ],
                                                            "children": [
                                                                {
                                                                    "node type": "PARAMETERS",
                                                                    "children": [
                                                                        {
                                                                            "node type": "PARAM",
                                                                            "label": "v1",
                                                                            "flags": "PARAM_FLAG_CONST,PARAM_FLAG_IN",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "TYPE",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "MEMBER",
                                                                                            "children": [
                                                                                                {
                                                                                                    "node type": "MEMBER",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "node type": "IDENTIFIER",
                                                                                                            "label": "some"
                                                                                                        },
                                                                                                        {
                                                                                                            "node type": "IDENTIFIER",
                                                                                                            "label": "strange"
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "node type": "IDENTIFIER",
                                                                                                    "label": "type"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "PARAM",
                                                                            "label": "v2",
                                                                            "flags": "PARAM_FLAG_CONST,PARAM_FLAG_IN",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "TYPE",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "integer"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "DIRECTIVE_LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ASSIGNMENT",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "THIS"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "value_one"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "v1"
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "ASSIGNMENT",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "THIS"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "value_two"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "v2"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "INVARIANT",
                                                            "children": [
                                                                {
                                                                    "node type": "LABEL",
                                                                    "label": "value_two_is_a_number",
                                                                    "children": [
                                                                        {
                                                                            "node type": "EQUAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "TYPEOF",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "MEMBER",
                                                                                            "children": [
                                                                                                {
                                                                                                    "node type": "THIS"
                                                                                                },
                                                                                                {
                                                                                                    "node type": "IDENTIFIER",
                                                                                                    "label": "value_two"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "STRING",
                                                                                    "label": "Number"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "LABEL",
                                                                    "label": "value_one_is_positive",
                                                                    "children": [
                                                                        {
                                                                            "node type": "GREATER",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "THIS"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "value_one"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 0
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A class without a name
    {
        //"verbose": true,
        "name": "class without a name",
        "program": "package \"missing.name\"\n\
{\n\
    class\n\
    {\n\
        public virtual function save_data(var in const v1: some.strange.type, var in const v2: integer)\n\
            : void\n\
        {\n\
            this.value_one /= v1;\n\
            this.value_two -= v2;\n\
        }\n\
\n\
        invariant value_two_is_a_number: typeof this.value_two == \"Number\",\n\
                  value_one_is_positive: this.value_one > 0;\n\
    };\n\
};\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_CLASS",
                "line #": 4,
                "message": "the name of the class is expected after the keyword 'class'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "missing.name",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "CLASS",
                                            "label": "",
                                            "children": [
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "FUNCTION",
                                                            "label": "save_data",
                                                            "flags": "FUNCTION_FLAG_VOID",
                                                            "link attributes": [
                                                                {
                                                                    "node type": "PUBLIC"
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "virtual"
                                                                }
                                                            ],
                                                            "children": [
                                                                {
                                                                    "node type": "PARAMETERS",
                                                                    "children": [
                                                                        {
                                                                            "node type": "PARAM",
                                                                            "label": "v1",
                                                                            "flags": "PARAM_FLAG_CONST,PARAM_FLAG_IN",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "TYPE",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "MEMBER",
                                                                                            "children": [
                                                                                                {
                                                                                                    "node type": "MEMBER",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "node type": "IDENTIFIER",
                                                                                                            "label": "some"
                                                                                                        },
                                                                                                        {
                                                                                                            "node type": "IDENTIFIER",
                                                                                                            "label": "strange"
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "node type": "IDENTIFIER",
                                                                                                    "label": "type"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "PARAM",
                                                                            "label": "v2",
                                                                            "flags": "PARAM_FLAG_CONST,PARAM_FLAG_IN",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "TYPE",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "integer"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "DIRECTIVE_LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ASSIGNMENT_DIVIDE",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "THIS"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "value_one"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "v1"
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "ASSIGNMENT_SUBTRACT",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "THIS"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "value_two"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "v2"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "INVARIANT",
                                                            "children": [
                                                                {
                                                                    "node type": "LABEL",
                                                                    "label": "value_two_is_a_number",
                                                                    "children": [
                                                                        {
                                                                            "node type": "EQUAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "TYPEOF",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "MEMBER",
                                                                                            "children": [
                                                                                                {
                                                                                                    "node type": "THIS"
                                                                                                },
                                                                                                {
                                                                                                    "node type": "IDENTIFIER",
                                                                                                    "label": "value_two"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "STRING",
                                                                                    "label": "Number"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "LABEL",
                                                                    "label": "value_one_is_positive",
                                                                    "children": [
                                                                        {
                                                                            "node type": "GREATER",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "THIS"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "value_one"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 0
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A class with an invalid extend
    {
        //"verbose": true,
        "name": "class with an invalid extend",
        "program": "package \"missing.name\"\n\
{\n\
    class bad_extend extends implements prudent\n\
    {\n\
        public virtual function save_data(var in const v1: some.strange.type, var in const v2: integer)\n\
            : void\n\
        {\n\
            this.value_one *= v1;\n\
            this.value_two += v2;\n\
        }\n\
\n\
        invariant value_two_is_a_number: typeof this.value_two == \"Number\",\n\
                  value_one_is_positive: this.value_one > 0;\n\
    };\n\
};\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_EXPRESSION",
                "line #": 3,
                "message": "unexpected token \"IMPLEMENTS\" found in an expression."
            },
            {
                "message level": 2,
                "error code": "INVALID_CLASS",
                "line #": 3,
                "message": "expected a valid expression after 'EXTENDS'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "missing.name",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "CLASS",
                                            "label": "bad_extend",
                                            "children": [
                                                {
                                                    "node type": "EXTENDS"
                                                },
                                                {
                                                    "node type": "IMPLEMENTS",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "prudent"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "FUNCTION",
                                                            "label": "save_data",
                                                            "flags": "FUNCTION_FLAG_VOID",
                                                            "link attributes": [
                                                                {
                                                                    "node type": "PUBLIC"
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "virtual"
                                                                }
                                                            ],
                                                            "children": [
                                                                {
                                                                    "node type": "PARAMETERS",
                                                                    "children": [
                                                                        {
                                                                            "node type": "PARAM",
                                                                            "label": "v1",
                                                                            "flags": "PARAM_FLAG_CONST,PARAM_FLAG_IN",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "TYPE",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "MEMBER",
                                                                                            "children": [
                                                                                                {
                                                                                                    "node type": "MEMBER",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "node type": "IDENTIFIER",
                                                                                                            "label": "some"
                                                                                                        },
                                                                                                        {
                                                                                                            "node type": "IDENTIFIER",
                                                                                                            "label": "strange"
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "node type": "IDENTIFIER",
                                                                                                    "label": "type"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "PARAM",
                                                                            "label": "v2",
                                                                            "flags": "PARAM_FLAG_CONST,PARAM_FLAG_IN",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "TYPE",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "integer"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "DIRECTIVE_LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ASSIGNMENT_MULTIPLY",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "THIS"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "value_one"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "v1"
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "ASSIGNMENT_ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "THIS"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "value_two"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "v2"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "INVARIANT",
                                                            "children": [
                                                                {
                                                                    "node type": "LABEL",
                                                                    "label": "value_two_is_a_number",
                                                                    "children": [
                                                                        {
                                                                            "node type": "EQUAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "TYPEOF",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "MEMBER",
                                                                                            "children": [
                                                                                                {
                                                                                                    "node type": "THIS"
                                                                                                },
                                                                                                {
                                                                                                    "node type": "IDENTIFIER",
                                                                                                    "label": "value_two"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "STRING",
                                                                                    "label": "Number"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "LABEL",
                                                                    "label": "value_one_is_positive",
                                                                    "children": [
                                                                        {
                                                                            "node type": "GREATER",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "THIS"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "value_one"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 0
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A class not terminated properly
    {
        //"verbose": true,
        "name": "class no finished",
        "program": "class unfinished\n\
    {\n\
        function ignore_this_one(p1, p2)\n\
        {\n\
            return Math.sqrt(p1 * p1 + p2 * p2);\n\
        }\n\
    ;\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 8,
                "message": "'}' expected to close the 'class' definition."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "CLASS",
                            "label": "unfinished",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FUNCTION",
                                            "label": "ignore_this_one",
                                            "children": [
                                                {
                                                    "node type": "PARAMETERS",
                                                    "children": [
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "p1"
                                                        },
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "p2"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "RETURN",
                                                            "children": [
                                                                {
                                                                    "node type": "CALL",
                                                                    "children": [
                                                                        {
                                                                            "node type": "MEMBER",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "Math"
                                                                                },
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "sqrt"
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "LIST",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "ADD",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "MULTIPLY",
                                                                                            "children": [
                                                                                                {
                                                                                                    "node type": "IDENTIFIER",
                                                                                                    "label": "p1"
                                                                                                },
                                                                                                {
                                                                                                    "node type": "IDENTIFIER",
                                                                                                    "label": "p1"
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "node type": "MULTIPLY",
                                                                                            "children": [
                                                                                                {
                                                                                                    "node type": "IDENTIFIER",
                                                                                                    "label": "p2"
                                                                                                },
                                                                                                {
                                                                                                    "node type": "IDENTIFIER",
                                                                                                    "label": "p2"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A class forward declaration without the proper ';'
    {
        //"verbose": true,
        "name": "class no finished",
        "program": "class unfinished class good;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to start the 'class' definition."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "CLASS",
                            "label": "unfinished"
                        },
                        {
                            "node type": "CLASS",
                            "label": "good"
                        }
                    ]
                }
            ]
        }
    },

    // A class definition without the name followed by the class definition
    {
        //"verbose": true,
        "name": "class with a missing name followed by '{'",
        "program": "class { function a() { return b; } };",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_CLASS",
                "line #": 1,
                "message": "the name of the class is expected after the keyword 'class'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "CLASS",
                            "label": "",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FUNCTION",
                                            "label": "a",
                                            "children": [
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "RETURN",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "b"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A class definition without the name followed by 'extends'
    {
        //"verbose": true,
        "name": "class with a missing name followed by 'extends'",
        "program": "class extends stable_base { function a() { return b; } };",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_CLASS",
                "line #": 1,
                "message": "the name of the class is expected after the keyword 'class'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "CLASS",
                            "label": "",
                            "children": [
                                {
                                    "node type": "EXTENDS",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "stable_base"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FUNCTION",
                                            "label": "a",
                                            "children": [
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "RETURN",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "b"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A class definition without the name followed by 'implements'
    {
        //"verbose": true,
        "name": "class with a missing name followed by 'implements'",
        "program": "class implements date_and_time { function a() { return b; } };",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_CLASS",
                "line #": 1,
                "message": "the name of the class is expected after the keyword 'class'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "CLASS",
                            "label": "",
                            "children": [
                                {
                                    "node type": "IMPLEMENTS",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "date_and_time"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FUNCTION",
                                            "label": "a",
                                            "children": [
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "RETURN",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "b"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // An empty class should be supported
    {
        //"verbose": true,
        "name": "an empty class",
        "program": "class totally_empty {};",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "CLASS",
                            "label": "totally_empty",
                            "children": [
                                {
                                    "node type": "EMPTY"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A standard type with a range (integers)
    {
        //"verbose": true,
        "name": "type with a range of integers",
        "program": "use large_byte as 0 .. 65535;",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "large_byte"
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 0
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 65535
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A standard type using 'mod'
    {
        //"verbose": true,
        "name": "a mod type",
        "program": "use three_bit_number as mod 8;",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "flags": "TYPE_FLAG_MODULO",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "three_bit_number"
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 8
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A 'mod' type with a string
    {
        //"verbose": true,
        "name": "a mod type using a string",
        "program": "use not_a_number as mod '8';",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the modulo must be a literal number."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "flags": "TYPE_FLAG_MODULO",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "not_a_number"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A 'mod' type with a string
    {
        //"verbose": true,
        "name": "a mod type without the number",
        "program": "use not_a_number as mod /*oops*/ ;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "missing literal number for a numeric type declaration."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "flags": "TYPE_FLAG_MODULO",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "not_a_number"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with string to start with...
    {
        //"verbose": true,
        "name": "a type without a string instead of a number (left)",
        "program": "use still_not_a_number as '8' .. 92;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must start with a literal number."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 1,
                "message": "';' was expected after 'USE'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "still_not_a_number"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with string to end with...
    {
        //"verbose": true,
        "name": "a type without a string instead of a number (right)",
        "program": "use not_a_number as 8 .. '92';",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must end with a literal number."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "not_a_number"
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 8
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with two different types of numbers
    {
        //"verbose": true,
        "name": "a type with a float and an integer",
        "program": "use not_a_number as 8.3 .. +92;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must use numbers of the same type on both sides."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "not_a_number"
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 8.3
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 92
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with two different types of numbers
    {
        //"verbose": true,
        "name": "a type with an integer and a float",
        "program": "use not_a_number as +83 .. 92.11;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must use numbers of the same type on both sides."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "not_a_number"
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 83
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 92.11
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with a REST instead of a RANGE
    {
        //"verbose": true,
        "name": "type with '...' instead of '..'",
        "program": "use bad_range as -65 ... 65;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must use '..' to separate the minimum and maximum boundaries (unexpected \"REST\")."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "bad_range"
                                },
                                {
                                    "node type": "INT64",
                                    "integer": -65
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 65
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with a REST instead of a RANGE
    {
        //"verbose": true,
        "name": "type with '...' instead of '..' and an inverted range",
        "program": "use bad_range as 65 ... -65;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must use '..' to separate the minimum and maximum boundaries (unexpected \"REST\")."
            },
            {
                "message level": 3,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "numeric type declaration is empty (only accepts 'null') because left value of range is larger than right value."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "bad_range"
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 65
                                },
                                {
                                    "node type": "INT64",
                                    "integer": -65
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with a REST instead of a RANGE
    {
        //"verbose": true,
        "name": "type with '...' instead of '..' and floats",
        "program": "use bad_range as -6.5 ... 6.5;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must use '..' to separate the minimum and maximum boundaries (unexpected \"REST\")."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "bad_range"
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": -6.5
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 6.5
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with a REST instead of a RANGE
    {
        //"verbose": true,
        "name": "type with '...' instead of '..' and inverted range of floats",
        "program": "use bad_range as 6.5 ... -6.5;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must use '..' to separate the minimum and maximum boundaries (unexpected \"REST\")."
            },
            {
                "message level": 3,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "numeric type declaration is empty (only accepts 'null') because left value of range is larger than right value."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "bad_range"
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 6.5
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": -6.5
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    }

]
// end
// vim: ts=4 sw=4 et
