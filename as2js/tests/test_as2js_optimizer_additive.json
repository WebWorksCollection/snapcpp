// additive
[

    // +a -> a, integer
    {
        //"verbose": true,
        "name": "+a -> a, with an integer",
        "program": "+111;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "INT64",
                                    "integer": 111
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "INT64",
                            "integer": 111
                        }
                    ]
                }
            ]
        }
    },

    // +a -> a, float
    {
        //"verbose": true,
        "name": "+a -> a, with a float",
        "program": "+11.1;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 11.1
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 11.1
                        }
                    ]
                }
            ]
        }
    },

    // +a -> a, undefined
    {
        //"verbose": true,
        "name": "+a -> a, with a undefined",
        "program": "+undefined;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "UNDEFINED"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // +a -> a, null
    {
        //"verbose": true,
        "name": "+a -> a, with a null",
        "program": "+null;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "NULL"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "INT64",
                            "integer": 0
                        }
                    ]
                }
            ]
        }
    },

    // +a -> a, empty string
    {
        //"verbose": true,
        "name": "+a -> a, with an empty string",
        "program": "+'';",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "STRING",
                                    "label": ""
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 0.0
                        }
                    ]
                }
            ]
        }
    },

    // +a -> a, string, not a number
    {
        //"verbose": true,
        "name": "+a -> a, with a string not representing a number",
        "program": "+'bar';",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "STRING",
                                    "label": "bar"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // +a -> a, string -- integer
    {
        //"verbose": true,
        "name": "+a -> a, with a string representing an integer",
        "program": "+'34';",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "STRING",
                                    "label": "34"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 34.0
                        }
                    ]
                }
            ]
        }
    },

    // +a -> a, string -- float
    {
        //"verbose": true,
        "name": "+a -> a, with a string representing a float",
        "program": "+'3.4';",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "STRING",
                                    "label": "3.4"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 3.4
                        }
                    ]
                }
            ]
        }
    },

    // +a -> a, true
    {
        //"verbose": true,
        "name": "+a -> a, with true",
        "program": "+true;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "TRUE"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "INT64",
                            "integer": 1
                        }
                    ]
                }
            ]
        }
    },

    // +a -> a, false
    {
        //"verbose": true,
        "name": "+a -> a, with false",
        "program": "+false;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "FALSE"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "INT64",
                            "integer": 0
                        }
                    ]
                }
            ]
        }
    },

    // -a -> a, integer
    {
        //"verbose": true,
        "name": "-a -> a, with an integer",
        "program": "-111;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SUBTRACT",
                            "children": [
                                {
                                    "node type": "INT64",
                                    "integer": 111
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "INT64",
                            "integer": -111
                        }
                    ]
                }
            ]
        }
    },

    // -a -> a, float
    {
        //"verbose": true,
        "name": "-a -> a, with a float",
        "program": "-11.1;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SUBTRACT",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 11.1
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": -11.1
                        }
                    ]
                }
            ]
        }
    },

    // -a -> a, null
    {
        //"verbose": true,
        "name": "-a -> a, with null",
        "program": "-null;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SUBTRACT",
                            "children": [
                                {
                                    "node type": "NULL"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": -0.0
                        }
                    ]
                }
            ]
        }
    },

    // -a -> a, undefined
    {
        //"verbose": true,
        "name": "-a -> a, with undefined",
        "program": "-undefined;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SUBTRACT",
                            "children": [
                                {
                                    "node type": "UNDEFINED"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // -a -> a, string -- empty
    {
        //"verbose": true,
        "name": "-a -> a, with an empty string",
        "program": "-'';",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SUBTRACT",
                            "children": [
                                {
                                    "node type": "STRING",
                                    "label": ""
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": -0.0
                        }
                    ]
                }
            ]
        }
    },

    // -a -> a, string -- invalid
    {
        //"verbose": true,
        "name": "-a -> a, with a string not representing a number",
        "program": "-'foo';",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SUBTRACT",
                            "children": [
                                {
                                    "node type": "STRING",
                                    "label": "foo"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // -a -> a, string -- integer
    {
        //"verbose": true,
        "name": "-a -> a, with a string representing an integer",
        "program": "-'34';",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SUBTRACT",
                            "children": [
                                {
                                    "node type": "STRING",
                                    "label": "34"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": -34.0
                        }
                    ]
                }
            ]
        }
    },

    // -a -> a, string -- float
    {
        //"verbose": true,
        "name": "-a -> a, with a string representing a float",
        "program": "-'3.4';",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SUBTRACT",
                            "children": [
                                {
                                    "node type": "STRING",
                                    "label": "3.4"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": -3.4
                        }
                    ]
                }
            ]
        }
    },

    // -a -> a, true
    {
        //"verbose": true,
        "name": "-a -> a, with true",
        "program": "-true;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SUBTRACT",
                            "children": [
                                {
                                    "node type": "TRUE"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": -1.0
                        }
                    ]
                }
            ]
        }
    },

    // -a -> a, false
    {
        //"verbose": true,
        "name": "-a -> a, with false",
        "program": "-false;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SUBTRACT",
                            "children": [
                                {
                                    "node type": "FALSE"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": -0.0
                        }
                    ]
                }
            ]
        }
    },

    // a+b -> sum(a,b), integers
    {
        //"verbose": true,
        "name": "a + b -> sum(a, b), with integers",
        "program": "54 + 32;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "INT64",
                                    "integer": 54
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 32
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "INT64",
                            "integer": 86
                        }
                    ]
                }
            ]
        }
    },

    // a+b -> sum(a,b), integer/float
    {
        //"verbose": true,
        "name": "a + b -> sum(a, b), with integer/float",
        "program": "54 + 3.2;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "INT64",
                                    "integer": 54
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 3.2
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 57.2
                        }
                    ]
                }
            ]
        }
    },

    // a+b -> sum(a,b), float/integer
    {
        //"verbose": true,
        "name": "a + b -> sum(a, b), with float/integer",
        "program": "5.4 + 32;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 5.4
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 32
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 37.4
                        }
                    ]
                }
            ]
        }
    },

    // a+b -> sum(a,b), floats
    {
        //"verbose": true,
        "name": "a + b -> sum(a, b), with floats",
        "program": "5.5 + 3.2;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 5.5
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 3.2
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 8.7
                        }
                    ]
                }
            ]
        }
    },

    // a-b -> subtract(a,b), integers
    {
        //"verbose": true,
        "name": "a - b -> subtract(a, b), with integers",
        "program": "54 - 32;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SUBTRACT",
                            "children": [
                                {
                                    "node type": "INT64",
                                    "integer": 54
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 32
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "INT64",
                            "integer": 22
                        }
                    ]
                }
            ]
        }
    },

    // a-b -> subtract(a,b), integer/float
    {
        //"verbose": true,
        "name": "a - b -> subtract(a, b), with integer/float",
        "program": "54 - 3.2;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SUBTRACT",
                            "children": [
                                {
                                    "node type": "INT64",
                                    "integer": 54
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 3.2
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 50.8
                        }
                    ]
                }
            ]
        }
    },

    // a-b -> subtract(a,b), float/integer
    {
        //"verbose": true,
        "name": "a - b -> subtract(a, b), with float/integer",
        "program": "5.4 - 32;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SUBTRACT",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 5.4
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 32
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": -26.6
                        }
                    ]
                }
            ]
        }
    },

    // a-b -> subtract(a,b), floats
    {
        //"verbose": true,
        "name": "a - b -> subtract(a, b), with floats",
        "program": "5.5 - 3.2;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SUBTRACT",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 5.5
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 3.2
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 2.3
                        }
                    ]
                }
            ]
        }
    },

    // a+b -> concatenate(a,b), strings
    {
        //"verbose": true,
        "name": "a + b -> concatenate(a, b), with strings",
        "program": "'chocolate ' + \" is yuck\";",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "STRING",
                                    "label": "chocolate "
                                },
                                {
                                    "node type": "STRING",
                                    "label": " is yuck"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "STRING",
                            "label": "chocolate  is yuck"
                        }
                    ]
                }
            ]
        }
    },

    // a+b -> concatenate(a,b), string, true
    {
        //"verbose": true,
        "name": "a + b -> concatenate(a, b), with string/true",
        "program": "'With Boolean ' + true;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "STRING",
                                    "label": "With Boolean "
                                },
                                {
                                    "node type": "TRUE"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "STRING",
                            "label": "With Boolean true"
                        }
                    ]
                }
            ]
        }
    },

    // a+b -> concatenate(a,b), true, string
    {
        //"verbose": true,
        "name": "a + b -> concatenate(a, b), with true/string",
        "program": "true + ' With Boolean';",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "TRUE"
                                },
                                {
                                    "node type": "STRING",
                                    "label": " With Boolean"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "STRING",
                            "label": "true With Boolean"
                        }
                    ]
                }
            ]
        }
    },

    // a+b -> concatenate(a,b), string, false
    {
        //"verbose": true,
        "name": "a + b -> concatenate(a, b), with string/false",
        "program": "'With Boolean ' + false;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "STRING",
                                    "label": "With Boolean "
                                },
                                {
                                    "node type": "FALSE"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "STRING",
                            "label": "With Boolean false"
                        }
                    ]
                }
            ]
        }
    },

    // a+b -> concatenate(a,b), false, string
    {
        //"verbose": true,
        "name": "a + b -> concatenate(a, b), with false/string",
        "program": "false + ' With Boolean';",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "FALSE"
                                },
                                {
                                    "node type": "STRING",
                                    "label": " With Boolean"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "STRING",
                            "label": "false With Boolean"
                        }
                    ]
                }
            ]
        }
    },

    // a+b -> concatenate(a,b), string, null
    {
        //"verbose": true,
        "name": "a + b -> concatenate(a, b), with string/null",
        "program": "'With Boolean ' + null;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "STRING",
                                    "label": "With Boolean "
                                },
                                {
                                    "node type": "NULL"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "STRING",
                            "label": "With Boolean null"
                        }
                    ]
                }
            ]
        }
    },

    // a+b -> concatenate(a,b), null, string
    {
        //"verbose": true,
        "name": "a + b -> concatenate(a, b), with null/string",
        "program": "null + ' With Boolean';",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "NULL"
                                },
                                {
                                    "node type": "STRING",
                                    "label": " With Boolean"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "STRING",
                            "label": "null With Boolean"
                        }
                    ]
                }
            ]
        }
    },

    // a+b -> concatenate(a,b), string, undefined
    {
        //"verbose": true,
        "name": "a + b -> concatenate(a, b), with string/undefined",
        "program": "'With Boolean ' + undefined;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "STRING",
                                    "label": "With Boolean "
                                },
                                {
                                    "node type": "UNDEFINED"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "STRING",
                            "label": "With Boolean undefined"
                        }
                    ]
                }
            ]
        }
    },

    // a+b -> concatenate(a,b), undefined, string
    {
        //"verbose": true,
        "name": "a + b -> concatenate(a, b), with undefined/string",
        "program": "undefined + ' With Boolean';",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "UNDEFINED"
                                },
                                {
                                    "node type": "STRING",
                                    "label": " With Boolean"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "STRING",
                            "label": "undefined With Boolean"
                        }
                    ]
                }
            ]
        }
    },

    // a+b -> concatenate(a,b), string, integer
    {
        //"verbose": true,
        "name": "a + b -> concatenate(a, b), with string/integer",
        "program": "'With integer ' + 555;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "STRING",
                                    "label": "With integer "
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 555
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "STRING",
                            "label": "With integer 555"
                        }
                    ]
                }
            ]
        }
    },

    // a+b -> concatenate(a,b), integer, string
    {
        //"verbose": true,
        "name": "a + b -> concatenate(a, b), with integer/string",
        "program": "678 + ' With integer';",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "INT64",
                                    "integer": 678
                                },
                                {
                                    "node type": "STRING",
                                    "label": " With integer"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "STRING",
                            "label": "678 With integer"
                        }
                    ]
                }
            ]
        }
    },

    // a+b -> concatenate(a,b), string, float
    {
        //"verbose": true,
        "name": "a + b -> concatenate(a, b), with string/float",
        "program": "'With float ' + 4.89;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "STRING",
                                    "label": "With float "
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 4.89
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "STRING",
                            "label": "With float 4.89"
                        }
                    ]
                }
            ]
        }
    },

    // a+b -> concatenate(a,b), undefined, string
    {
        //"verbose": true,
        "name": "a + b -> concatenate(a, b), with float/string",
        "program": "7.15 + ' With float';",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 7.15
                                },
                                {
                                    "node type": "STRING",
                                    "label": " With float"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "STRING",
                            "label": "7.15 With float"
                        }
                    ]
                }
            ]
        }
    }

]
// vim: ts=4 sw=4 et
