#ifndef AS2JS_AS_H
#define AS2JS_AS_H
/* as.h -- written by Alexis WILKE for Made to Order Software Corp. (c) 2005-2011 */

/*

Copyright (c) 2005-2011 Made to Order Software Corp.

Permission is hereby granted, free of charge, to any
person obtaining a copy of this software and
associated documentation files (the "Software"), to
deal in the Software without restriction, including
without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom
the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice
shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/



//#include    <stdarg.h>
//#include    <stdio.h>
//#include    <stdlib.h>
//#include    <time.h>
//#include    <string.h>
//#include    <math.h>
//#include    <limits.h>
//#include    <sys/stat.h>

#include    <string>
#include    <vector>






namespace as2js
{


#define AS2JS_VERSION_MAJOR    @AS2JS_VERSION_MAJOR@
#define AS2JS_VERSION_MINOR    @AS2JS_VERSION_MINOR@
#define AS2JS_VERSION_PATCH    @AS2JS_VERSION_PATCH@
#define AS2JS_VERSION          "@AS2JS_VERSION_MAJOR@.@AS2JS_VERSION_MINOR@.@AS2JS_VERSION_PATCH@"




enum err_code_t
{
    AS_ERR_NONE = 0,

    AS_ERR_ABSTRACT,
    AS_ERR_BAD_PRAGMA,
    AS_ERR_CANNOT_MATCH,
    AS_ERR_CANNOT_OVERLOAD,
    AS_ERR_CANNOT_OVERWRITE_CONST,
    AS_ERR_CASE_LABEL,
    AS_ERR_COLON_EXPECTED,
    AS_ERR_CURVLY_BRAKETS_EXPECTED,
    AS_ERR_DEFAULT_LABEL,
    AS_ERR_DIVIDE_BY_ZERO,
    AS_ERR_DUPLICATES,
    AS_ERR_DYNAMIC,
    AS_ERR_FINAL,
    AS_ERR_IMPORPER_STATEMENT,
    AS_ERR_INACCESSIBLE_STATEMENT,
    AS_ERR_INCOMPATIBLE,
    AS_ERR_INCOMPATIBLE_PRAGMA_ARGUMENT,
    AS_ERR_INSTANCE_EXPECTED,
    AS_ERR_INTERNAL_ERROR,
    AS_ERR_INTRINSIC,
    AS_ERR_INVALID_ARRAY_FUNCTION,
    AS_ERR_INVALID_ATTRIBUTES,
    AS_ERR_INVALID_CATCH,
    AS_ERR_INVALID_CLASS,
    AS_ERR_INVALID_CONDITIONAL,
    AS_ERR_INVALID_DEFINITION,
    AS_ERR_INVALID_DO,
    AS_ERR_INVALID_ENUM,
    AS_ERR_INVALID_EXPRESSION,
    AS_ERR_INVALID_FIELD,
    AS_ERR_INVALID_FIELD_NAME,
    AS_ERR_INVALID_FRAME,
    AS_ERR_INVALID_FUNCTION,
    AS_ERR_INVALID_GOTO,
    AS_ERR_INVALID_KEYWORD,
    AS_ERR_INVALID_LABEL,
    AS_ERR_INVALID_NAMESPACE,
    AS_ERR_INVALID_NODE,
    AS_ERR_INVALID_OPERATOR,
    AS_ERR_INVALID_PACKAGE_NAME,
    AS_ERR_INVALID_PARAMETERS,
    AS_ERR_INVALID_REST,
    AS_ERR_INVALID_RETURN_TYPE,
    AS_ERR_INVALID_SCOPE,
    AS_ERR_INVALID_TRY,
    AS_ERR_INVALID_TYPE,
    AS_ERR_INVALID_UNICODE_ESCAPE_SEQUENCE,
    AS_ERR_INVALID_VARIABLE,
    AS_ERR_LABEL_NOT_FOUND,
    AS_ERR_LOOPING_REFERENCE,
    AS_ERR_MISMATCH_FUNC_VAR,
    AS_ERR_NEED_CONST,
    AS_ERR_NOT_FOUND,
    AS_ERR_NOT_SUPPORTED,
    AS_ERR_PARENTHESIS_EXPECTED,
    AS_ERR_PRAGMA_FAILED,
    AS_ERR_SEMICOLON_EXPECTED,
    AS_ERR_SQUARE_BRAKETS_EXPECTED,
    AS_ERR_STATIC,
    AS_ERR_UNKNOWN_ESCAPE_SEQUENCE,
    AS_ERR_UNKNOWN_OPERATOR,
    AS_ERR_UNTERMINTED_STRING,
    AS_ERR_UNEXPECTED_PUNCTUATION,

    AS_ERR_max
};








class Float64
{
public:
                    Float64()
                    {
                        f_float = 0.0;
                    }
                    Float64(Float64 const& src_float)
                    {
                        f_float = src_float.f_float;
                    }

    Float64&        operator = (Float64 const& src_float)
                    {
                        f_float = src_float.f_float;
                        return *this;
                    }

    double          Get() const
                    {
                        return f_float;
                    }
    void            Set(double const new_float)
                    {
                        f_float = new_float;
                    }

private:
    double          f_float;
};







class Input;
class NodePtr
{
public:
    enum link_t
    {
        LINK_INSTANCE = 0,
        LINK_TYPE,
        LINK_ATTRIBUTES,    // this is the list of identifiers

        LINK_max,

        LINK_GOTO_EXIT = LINK_INSTANCE,
        LINK_GOTO_ENTER = LINK_TYPE,

        LINK_end
    };

                    NodePtr()
                    {
                        f_node = 0;
                    }
                    NodePtr(NodePtr const& node);
                    ~NodePtr();

    NodePtr&        operator = (NodePtr const& node);

    void            SetInputInfo(Input const *input);
    void            CopyInputInfo(NodePtr const& node);
    long            GetPage() const;
    long            GetPageLine() const;
    long            GetParagraph() const;
    long            GetLine() const;
    const String&        GetFilename(void) const;

    void            SetNode(const Node *node);
    void            SetNode(const NodePtr& node);
    void            CreateNode(node_t type = NODE_UNKNOWN);
    NodePtr&        Clone(const NodePtr& source);
    void            ClearNode(void);
    bool            HasNode(void) const
                {
                    return f_node != 0;
                }
    bool            SameAs(const NodePtr& node) const
                {
                    return f_node == node.f_node;
                }

    Data&            GetData(void) const;
    void            SetData(const Data& data);
    unsigned long        GetAttrs(void) const;    // see NODE_ATTR_...
    void            SetAttrs(unsigned long attrs);
    bool            HasSideEffects(void) const;

    bool            IsLocked(void) const;
    void            Lock(void);
    void            Unlock(void);
    void            SetOffset(int offset);
    int            GetOffset(void) const;
    void            ReplaceWith(NodePtr& new_node);
    void            DeleteChild(int index);
    void            AddChild(NodePtr& child);
    void            InsertChild(int idx, NodePtr& child);
    void            SetChild(int index, NodePtr& child);
    int            GetChildCount(void) const;
    NodePtr&        GetChild(int index) const;
    void            SetParent(Node *parent);
    NodePtr&        GetParent(void);
    void            SetLink(link_t index, NodePtr& link);
    NodePtr&        GetLink(link_t index);

    void            AddVariable(NodePtr& variable);
    int            GetVariableCount(void) const;
    NodePtr&        GetVariable(int index) const;

    void            AddLabel(NodePtr& label);
    int            GetLabelCount(void) const;
    NodePtr&        GetLabel(int index) const;
    NodePtr&        FindLabel(const String& name) const;

    void            Display(FILE *out, int indent = 0, NodePtr *parent = 0, char c = '-') const;
    void            DisplayPtr(FILE *out) const;

    const char *        OperatorToString(void);
    node_t            StringToOperator(void);

private:
    Node *            f_node;
};


class NodeLock
{
public:
                NodeLock(NodePtr& node)
                {
                    f_node = node;
                    if(f_node.HasNode()) {
                        f_node.Lock();
                    }
                }
                ~NodeLock()
                {
                    if(f_node.HasNode()) {
                        f_node.Unlock();
                    }
                }

    // premature unlocking
    void            Unlock(void)
                {
                    if(f_node.HasNode()) {
                        f_node.Unlock();
                        f_node.ClearNode();
                    }
                }

private:
    NodePtr            f_node;
};



// ErrorStream handling object; you can derive from this
// class to redirect the errors to a different
// output (by default it goes to stderr).
// For that purpose, overload the Error() function.
// Within your function, use the IntGetFilename()
// and IntLine() functions to get the filename
// and line where the error occured.
//
// NOTE: The Input class derives from this class
//     so it can handle the errors at once.
class ErrorStream
{
public:
                ErrorStream();
    virtual            ~ErrorStream();

    // by default, write in stderr; overload to send errors in
    // your console, etc.
    virtual void        Error(err_code_t err_code, const char *message);

    // We call one of these functions which transform their
    // parameters (format + params) in a single easy to use
    // string sent to Error().
    // You don't overload these functions.
    void            ErrMsg(err_code_t err_code, const char *format, ...);
    void            ErrMsg(err_code_t err_code, const char *format, va_list ap);

    // the following replaces String pointers by their UTF-8 const char *
    // whenever the format includes a %S -- this makes it work on all
    // systems without jungling with wide characters too much
    // also, we support %N for nodes in which case we print out the
    // filename and line of the given node
    void            ErrStrMsg(err_code_t err_code, const char *format, ...);
    void            ErrStrMsg(err_code_t err_code, const char *format, va_list ap);

    // errors which should use the node information for the
    // filename & line number (instead of GetFilename() and Line())
    void            ErrMsg(err_code_t err_code, const NodePtr& node, const char *format, ...);
    void            ErrStrMsg(err_code_t err_code, const NodePtr& node, const char *format, ...);

    long            ErrCount(void) const
                {
                    return f_errcnt;
                }

    virtual const char *    GetFilename(void) const;
    virtual long        Line(void) const;

protected:
    const String&        IntGetFilename(void) const;
    long            IntLine(void) const;

private:
    long            f_errcnt;
    NodePtr            f_node;
    mutable String        f_filename;    // IntGetFilename() must return a string...
};



// I/O interface that YOU have to derive from so the
// parser can read the input data from somewhere
// You need to implement the GetC() function. You can
// also overload the Error() function so it prints
// the errors in a console of your choice.
// The GetFilename() is used by the default Error()
// function. It is used to generate an error like gcc.
// That function returns "asc" by default.
//
// Two examples are available below. One reads a USC-4
// formatted file and the other reads a string.
class Input : public ErrorStream
{
public:
    typedef long        char_t;

    static char_t const AS_EOF = -1;

                        Input();
    virtual             ~Input();

    virtual char_t      GetC() = 0;

    // return the size if known, -1 if unknown
    virtual long        GetSize() const;

    void                ResetCounters(long line = 1)
                        {
                            f_page = 1;
                            f_page_line = 1;
                            f_paragraph = 1;
                            f_line = line;
                        }

    void                NewPage()
                        {
                            ++f_page;
                            f_page_line = 1;
                            f_paragraph = 1;
                        }
    void                NewParagraph()
                        {
                            ++f_paragraph;
                        }
    void                NewLine()
                        {
                            ++f_page_line;
                            ++f_line;
                        }

    long                Page() const
                        {
                            return f_page;
                        }
    long                PageLine() const
                        {
                            return f_page_line;
                        }
    long                Paragraph() const
                        {
                            return f_paragraph;
                        }
    virtual long        Line() const
                        {
                            return f_line;
                        }

private:
    long                f_page;
    long                f_page_line;
    long                f_paragraph;
    long                f_line;
};







class FileInput : public Input
{
public:
                FileInput(void);
    virtual            ~FileInput();
    virtual const char *    GetFilename(void) const;
    bool            StandardInput(void);
    bool            Open(const char *filename);
    void            Close(void);
    virtual long        GetC(void);
    virtual long        GetSize(void) const;
    void            SetOriginalFilename(const char *original_filename);

protected:
    char *            f_filename;
    char *            f_original_filename;
    FILE *            f_file;
    long            f_size;
};


class FileUCS32Input : public FileInput
{
public:
    virtual long        GetC(void);
};



class StringInput : public Input
{
public:
                StringInput(const char *filename = 0);
    virtual            ~StringInput();

    void            Set(const long *str, long size, unsigned long line);
    long            GetSize(void) const;
    virtual long        GetC(void);

    virtual const char *    GetFilename(void) const;

private:
    int            f_pos;
    String            f_str;
    const char *        f_filename;
};



// In order to support different types of file systems, the
// compiler supports a file retriever. Any time a file is
// opened, it calls the retriever (if defined) and uses
// that file. If no retriever was defined, the default is
// used: attempt to open the file with fopen() or an equivalent.
// In particular, this is used to handle the internal ASC files.
class InputRetriever
{
public:
    virtual            ~InputRetriever() {}

    virtual Input *        Retrieve(const char *filename) = 0;
};



// Options you can tweak so the compiler reacts in a different
// manner in different situations (for instance, the \e escape
// sequence can be used to generate the escape character whenever
// the extended escape sequences is set to 1).
enum option_t
{
    AS_OPTION_UNKNOWN = 0,
    AS_OPTION_DEBUG,
    AS_OPTION_DEBUG_LEXER,
    AS_OPTION_EXTENDED_ESCAPE_SEQUENCES,
    AS_OPTION_EXTENDED_OPERATORS,
    AS_OPTION_EXTENDED_STATEMENTS,
    AS_OPTION_OCTAL,
    AS_OPTION_STRICT,
    AS_OPTION_TRACE,
    AS_OPTION_TRACE_TO_OBJECT,

    AS_OPTION_max
};

class Options
{
public:
                Options(void)
                {
                    memset(f_options, 0, sizeof(f_options));

                    // we're always in strict mode
                    f_options[AS_OPTION_STRICT] = 1;
                }

    void            SetOption(option_t option, long value)
                {
                    AS_ASSERT(option < AS_OPTION_max);

                    // we're always in strict mode
                    if(option == AS_OPTION_STRICT) {
                        value = 1;
                    }
                    f_options[option] = value;
                }
    long            GetOption(option_t option)
                {
                    AS_ASSERT(option < AS_OPTION_max);

                    return f_options[option];
                }

private:
    long            f_options[AS_OPTION_max];
};




// The parser class is mostly hidden to you.
// You can't derive from it. You call the CreateParser() to use it.
// Once you are finished with the parser, delete it.
// Note that deleting the parser doesn't delete the nodes and thus
// you can work with the tree even after you deleted the parser.
//
// You use like this:
//
//    using namespace sswf::as;
//    MyInput input;
//    Parser *parser = Parser::CreateParser();
//    parser->SetInput(input);
//    // it is optional to set the options
//    parser->SetOptions(options);
//    NodePtr root = parser->Parse();
//
// NOTE: the input and options are NOT copied, a pointer to these
// object is saved in the parser. Delete the Parser() before you
// delete them. Also, this means you can change the options as the
// parsing goes on (i.e. usually this happens in Input::Error().).
class Parser
{
public:
    virtual            ~Parser() {}

    static Parser *        CreateParser(void);
    static const char *    Version(void);

    virtual void        SetInput(Input& input) = 0;
    virtual void        SetOptions(Options& options) = 0;
    virtual NodePtr&    Parse(void) = 0;
};


// Once a program was parsed, you need to compile it. This
// mainly means resolving the references (i.e. identifiers)
// which may generate the loading of libraries specified in
// import instructions (note that some import instructions
// are automatic for the global and native environments.)
//
// The code, after you ran the parser looks like this:
//
//    Compiler *compiler = Compiler::CreateCompiler();
//    // this is the same options as for the parser
//    compiler->SetOptions(options);
//    error_count = compiler->Compile(root);
//
// The Compile() function returns the number of errors
// encountered while compiling. The root parameter is
// what was returned by the Parse() function of the
// Parser object.
class Compiler
{
public:
    virtual            ~Compiler() {}

    // NOTE: to be thread safe, this call should be
    //     protected so only one thread can call it at
    //     a time (or create a compiler before any thread)
    static Compiler *    CreateCompiler(InputRetriever *retriever);
    static const char *    Version(void);

    virtual InputRetriever *SetInputRetriever(InputRetriever *retriever) = 0;
    virtual void        SetErrorStream(ErrorStream& error_stream) = 0;
    virtual void        SetOptions(Options& options) = 0;
    virtual int        Compile(NodePtr& tree) = 0;
};




// Finally, once the program was parsed and then compiled
// one usually wants to optimize it. This means removing
// all the possible expressions and statements which can
// be removed to make the code more efficient. The
// optimizations applied can be tweaked using the options.
//
// The code, after you ran the compiler looks like this:
//
//    Optimizer *optimizer = Optimizer::CreateOptimizer();
//    // this is the same options as for the parser
//    optimize->SetOptions(options);
//    optimize->Optimize(root);
//
// The Optimize() function goes through the list of
// nodes defined in the root parameter and it tries to
// remove all possible expressions and functions which
// will have no effect in the final output (certain things,
// such as x + 0, are not removed since it has an effect!).
// The root parameter is what was returned by the Parse()
// function of the Parser object.
//
// Note that it is expected that you first Compile()
// the nodes, but it is possible to call the optimizer
// without first running any compilation.
class Optimizer
{
public:
    virtual            ~Optimizer() {}

    static Optimizer *    CreateOptimizer(void);
    static const char *    Version(void);

    virtual void        SetErrorStream(ErrorStream& error_stream) = 0;
    virtual void        SetOptions(Options& options) = 0;
    virtual int        Optimize(NodePtr& tree) = 0;
    virtual    int        GetLastLabel(void) const = 0;
    virtual void        SetFirstLabel(int label) = 0;
};




// Now you're on your own! You have a perfect tree
// and you can generate valid code from it...
//
// Each node has a Data structure, a set of children
// node and a set of attribute flags (WARNING:
// the attributes are computed by the compiler; you
// need to call Compile() with a compiler to get
// the attributes).




}
// namespace as2js
#endif
// #ifndef AS2JS_AS_H

// vim: ts=4 sw=4 et
