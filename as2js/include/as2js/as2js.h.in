#ifndef AS2JS_AS_H
#define AS2JS_AS_H
/* as.h -- written by Alexis WILKE for Made to Order Software Corp. (c) 2005-2014 */

/*

Copyright (c) 2005-2014 Made to Order Software Corp.

Permission is hereby granted, free of charge, to any
person obtaining a copy of this software and
associated documentation files (the "Software"), to
deal in the Software without restriction, including
without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom
the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice
shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/



//#include    <stdarg.h>
//#include    <stdio.h>
//#include    <stdlib.h>
//#include    <time.h>
//#include    <string.h>
//#include    <math.h>
//#include    <limits.h>
//#include    <sys/stat.h>

#include    <string>
#include    <vector>






namespace as2js
{


#define AS2JS_VERSION_MAJOR    @AS2JS_VERSION_MAJOR@
#define AS2JS_VERSION_MINOR    @AS2JS_VERSION_MINOR@
#define AS2JS_VERSION_PATCH    @AS2JS_VERSION_PATCH@
#define AS2JS_VERSION          "@AS2JS_VERSION_MAJOR@.@AS2JS_VERSION_MINOR@.@AS2JS_VERSION_PATCH@"



















class Input;
class NodePtr
{
public:
                    NodePtr()
                    {
                        f_node = 0;
                    }
                    NodePtr(NodePtr const& node);
                    ~NodePtr();

    NodePtr&        operator = (NodePtr const& node);

    void            SetInputInfo(Input const *input);
    void            CopyInputInfo(NodePtr const& node);
    long            GetPage() const;
    long            GetPageLine() const;
    long            GetParagraph() const;
    long            GetLine() const;
    const String&        GetFilename(void) const;

    void            SetNode(const Node *node);
    void            SetNode(const NodePtr& node);
    void            CreateNode(node_t type = NODE_UNKNOWN);
    NodePtr&        Clone(const NodePtr& source);
    void            ClearNode(void);
    bool            HasNode(void) const
                {
                    return f_node != 0;
                }
    bool            SameAs(const NodePtr& node) const
                {
                    return f_node == node.f_node;
                }

    Data&            GetData(void) const;
    void            SetData(const Data& data);
    unsigned long        GetAttrs(void) const;    // see NODE_ATTR_...
    void            SetAttrs(unsigned long attrs);
    bool            HasSideEffects(void) const;

    bool            IsLocked(void) const;
    void            Lock(void);
    void            Unlock(void);
    void            SetOffset(int offset);
    int            GetOffset(void) const;
    void            ReplaceWith(NodePtr& new_node);
    void            DeleteChild(int index);
    void            AddChild(NodePtr& child);
    void            InsertChild(int idx, NodePtr& child);
    void            SetChild(int index, NodePtr& child);
    int            GetChildCount(void) const;
    NodePtr&        GetChild(int index) const;
    void            SetParent(Node *parent);
    NodePtr&        GetParent(void);
    void            SetLink(link_t index, NodePtr& link);
    NodePtr&        GetLink(link_t index);

    void            AddVariable(NodePtr& variable);
    int            GetVariableCount(void) const;
    NodePtr&        GetVariable(int index) const;

    void            AddLabel(NodePtr& label);
    int            GetLabelCount(void) const;
    NodePtr&        GetLabel(int index) const;
    NodePtr&        FindLabel(const String& name) const;

    void            Display(FILE *out, int indent = 0, NodePtr *parent = 0, char c = '-') const;
    void            DisplayPtr(FILE *out) const;

    const char *        OperatorToString(void);
    node_t            StringToOperator(void);

private:
    Node *            f_node;
};


class NodeLock
{
public:
                NodeLock(NodePtr& node)
                {
                    f_node = node;
                    if(f_node.HasNode()) {
                        f_node.Lock();
                    }
                }
                ~NodeLock()
                {
                    if(f_node.HasNode()) {
                        f_node.Unlock();
                    }
                }

    // premature unlocking
    void            Unlock(void)
                {
                    if(f_node.HasNode()) {
                        f_node.Unlock();
                        f_node.ClearNode();
                    }
                }

private:
    NodePtr            f_node;
};



// ErrorStream handling object; you can derive from this
// class to redirect the errors to a different
// output (by default it goes to stderr).
// For that purpose, overload the Error() function.
// Within your function, use the IntGetFilename()
// and IntLine() functions to get the filename
// and line where the error occured.
//
// NOTE: The Input class derives from this class
//     so it can handle the errors at once.
class ErrorStream
{
public:
                ErrorStream();
    virtual            ~ErrorStream();

    // by default, write in stderr; overload to send errors in
    // your console, etc.
    virtual void        Error(err_code_t err_code, const char *message);

    // We call one of these functions which transform their
    // parameters (format + params) in a single easy to use
    // string sent to Error().
    // You don't overload these functions.
    void            ErrMsg(err_code_t err_code, const char *format, ...);
    void            ErrMsg(err_code_t err_code, const char *format, va_list ap);

    // the following replaces String pointers by their UTF-8 const char *
    // whenever the format includes a %S -- this makes it work on all
    // systems without jungling with wide characters too much
    // also, we support %N for nodes in which case we print out the
    // filename and line of the given node
    void            ErrStrMsg(err_code_t err_code, const char *format, ...);
    void            ErrStrMsg(err_code_t err_code, const char *format, va_list ap);

    // errors which should use the node information for the
    // filename & line number (instead of GetFilename() and Line())
    void            ErrMsg(err_code_t err_code, const NodePtr& node, const char *format, ...);
    void            ErrStrMsg(err_code_t err_code, const NodePtr& node, const char *format, ...);

    long            ErrCount(void) const
                {
                    return f_errcnt;
                }

    virtual const char *    GetFilename(void) const;
    virtual long        Line(void) const;

protected:
    const String&        IntGetFilename(void) const;
    long            IntLine(void) const;

private:
    long            f_errcnt;
    NodePtr            f_node;
    mutable String        f_filename;    // IntGetFilename() must return a string...
};





// The parser class is mostly hidden to you.
// You can't derive from it. You call the CreateParser() to use it.
// Once you are finished with the parser, delete it.
// Note that deleting the parser doesn't delete the nodes and thus
// you can work with the tree even after you deleted the parser.
//
// You use like this:
//
//    using namespace sswf::as;
//    MyInput input;
//    Parser *parser = Parser::CreateParser();
//    parser->SetInput(input);
//    // it is optional to set the options
//    parser->SetOptions(options);
//    NodePtr root = parser->Parse();
//
// NOTE: the input and options are NOT copied, a pointer to these
// object is saved in the parser. Delete the Parser() before you
// delete them. Also, this means you can change the options as the
// parsing goes on (i.e. usually this happens in Input::Error().).
class Parser
{
public:
    virtual            ~Parser() {}

    static Parser *        CreateParser(void);
    static const char *    Version(void);

    virtual void        SetInput(Input& input) = 0;
    virtual void        SetOptions(Options& options) = 0;
    virtual NodePtr&    Parse(void) = 0;
};


// Once a program was parsed, you need to compile it. This
// mainly means resolving the references (i.e. identifiers)
// which may generate the loading of libraries specified in
// import instructions (note that some import instructions
// are automatic for the global and native environments.)
//
// The code, after you ran the parser looks like this:
//
//    Compiler *compiler = Compiler::CreateCompiler();
//    // this is the same options as for the parser
//    compiler->SetOptions(options);
//    error_count = compiler->Compile(root);
//
// The Compile() function returns the number of errors
// encountered while compiling. The root parameter is
// what was returned by the Parse() function of the
// Parser object.
class Compiler
{
public:
    virtual            ~Compiler() {}

    // NOTE: to be thread safe, this call should be
    //     protected so only one thread can call it at
    //     a time (or create a compiler before any thread)
    static Compiler *    CreateCompiler(InputRetriever *retriever);
    static const char *    Version(void);

    virtual InputRetriever *SetInputRetriever(InputRetriever *retriever) = 0;
    virtual void        SetErrorStream(ErrorStream& error_stream) = 0;
    virtual void        SetOptions(Options& options) = 0;
    virtual int        Compile(NodePtr& tree) = 0;
};




// Finally, once the program was parsed and then compiled
// one usually wants to optimize it. This means removing
// all the possible expressions and statements which can
// be removed to make the code more efficient. The
// optimizations applied can be tweaked using the options.
//
// The code, after you ran the compiler looks like this:
//
//    Optimizer *optimizer = Optimizer::CreateOptimizer();
//    // this is the same options as for the parser
//    optimize->SetOptions(options);
//    optimize->Optimize(root);
//
// The Optimize() function goes through the list of
// nodes defined in the root parameter and it tries to
// remove all possible expressions and functions which
// will have no effect in the final output (certain things,
// such as x + 0, are not removed since it has an effect!).
// The root parameter is what was returned by the Parse()
// function of the Parser object.
//
// Note that it is expected that you first Compile()
// the nodes, but it is possible to call the optimizer
// without first running any compilation.
class Optimizer
{
public:
    virtual            ~Optimizer() {}

    static Optimizer *    CreateOptimizer(void);
    static const char *    Version(void);

    virtual void        SetErrorStream(ErrorStream& error_stream) = 0;
    virtual void        SetOptions(Options& options) = 0;
    virtual int        Optimize(NodePtr& tree) = 0;
    virtual    int        GetLastLabel(void) const = 0;
    virtual void        SetFirstLabel(int label) = 0;
};




// Now you're on your own! You have a perfect tree
// and you can generate valid code from it...
//
// Each node has a Data structure, a set of children
// node and a set of attribute flags (WARNING:
// the attributes are computed by the compiler; you
// need to call Compile() with a compiler to get
// the attributes).




}
// namespace as2js
#endif
// #ifndef AS2JS_AS_H

// vim: ts=4 sw=4 et
