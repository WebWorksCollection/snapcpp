#ifndef AS2JS_AS_H
#define AS2JS_AS_H
/* as.h -- written by Alexis WILKE for Made to Order Software Corp. (c) 2005-2014 */

/*

Copyright (c) 2005-2014 Made to Order Software Corp.

Permission is hereby granted, free of charge, to any
person obtaining a copy of this software and
associated documentation files (the "Software"), to
deal in the Software without restriction, including
without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom
the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice
shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/



//#include    <stdarg.h>
//#include    <stdio.h>
//#include    <stdlib.h>
//#include    <time.h>
//#include    <string.h>
//#include    <math.h>
//#include    <limits.h>
//#include    <sys/stat.h>

#include    <string>
#include    <vector>






namespace as2js
{


#define AS2JS_VERSION_MAJOR    @AS2JS_VERSION_MAJOR@
#define AS2JS_VERSION_MINOR    @AS2JS_VERSION_MINOR@
#define AS2JS_VERSION_PATCH    @AS2JS_VERSION_PATCH@
#define AS2JS_VERSION          "@AS2JS_VERSION_MAJOR@.@AS2JS_VERSION_MINOR@.@AS2JS_VERSION_PATCH@"



















class Input;
class NodePtr
{
public:
                    NodePtr()
                    {
                        f_node = 0;
                    }
                    NodePtr(NodePtr const& node);
                    ~NodePtr();

    NodePtr&        operator = (NodePtr const& node);

    void            SetInputInfo(Input const *input);
    void            CopyInputInfo(NodePtr const& node);
    long            GetPage() const;
    long            GetPageLine() const;
    long            GetParagraph() const;
    long            GetLine() const;
    const String&        GetFilename(void) const;

    void            SetNode(const Node *node);
    void            SetNode(const NodePtr& node);
    void            CreateNode(node_t type = NODE_UNKNOWN);
    NodePtr&        Clone(const NodePtr& source);
    void            ClearNode(void);
    bool            HasNode(void) const
                {
                    return f_node != 0;
                }
    bool            SameAs(const NodePtr& node) const
                {
                    return f_node == node.f_node;
                }

    Data&            GetData(void) const;
    void            SetData(const Data& data);
    unsigned long        GetAttrs(void) const;    // see NODE_ATTR_...
    void            SetAttrs(unsigned long attrs);
    bool            HasSideEffects(void) const;

    bool            IsLocked(void) const;
    void            Lock(void);
    void            Unlock(void);
    void            SetOffset(int offset);
    int            GetOffset(void) const;
    void            ReplaceWith(NodePtr& new_node);
    void            DeleteChild(int index);
    void            AddChild(NodePtr& child);
    void            InsertChild(int idx, NodePtr& child);
    void            SetChild(int index, NodePtr& child);
    int            GetChildCount(void) const;
    NodePtr&        GetChild(int index) const;
    void            SetParent(Node *parent);
    NodePtr&        GetParent(void);
    void            SetLink(link_t index, NodePtr& link);
    NodePtr&        GetLink(link_t index);

    void            AddVariable(NodePtr& variable);
    int            GetVariableCount(void) const;
    NodePtr&        GetVariable(int index) const;

    void            AddLabel(NodePtr& label);
    int            GetLabelCount(void) const;
    NodePtr&        GetLabel(int index) const;
    NodePtr&        FindLabel(const String& name) const;

    void            Display(FILE *out, int indent = 0, NodePtr *parent = 0, char c = '-') const;
    void            DisplayPtr(FILE *out) const;

    const char *        OperatorToString(void);
    node_t            StringToOperator(void);

private:
    Node *            f_node;
};





// ErrorStream handling object; you can derive from this
// class to redirect the errors to a different
// output (by default it goes to stderr).
// For that purpose, overload the Error() function.
// Within your function, use the IntGetFilename()
// and IntLine() functions to get the filename
// and line where the error occured.
//
// NOTE: The Input class derives from this class
//     so it can handle the errors at once.
class ErrorStream
{
public:
                ErrorStream();
    virtual            ~ErrorStream();

    // by default, write in stderr; overload to send errors in
    // your console, etc.
    virtual void        Error(err_code_t err_code, const char *message);

    // We call one of these functions which transform their
    // parameters (format + params) in a single easy to use
    // string sent to Error().
    // You don't overload these functions.
    void            ErrMsg(err_code_t err_code, const char *format, ...);
    void            ErrMsg(err_code_t err_code, const char *format, va_list ap);

    // the following replaces String pointers by their UTF-8 const char *
    // whenever the format includes a %S -- this makes it work on all
    // systems without jungling with wide characters too much
    // also, we support %N for nodes in which case we print out the
    // filename and line of the given node
    void            ErrStrMsg(err_code_t err_code, const char *format, ...);
    void            ErrStrMsg(err_code_t err_code, const char *format, va_list ap);

    // errors which should use the node information for the
    // filename & line number (instead of GetFilename() and Line())
    void            ErrMsg(err_code_t err_code, const NodePtr& node, const char *format, ...);
    void            ErrStrMsg(err_code_t err_code, const NodePtr& node, const char *format, ...);

    long            ErrCount(void) const
                {
                    return f_errcnt;
                }

    virtual const char *    GetFilename(void) const;
    virtual long        Line(void) const;

protected:
    const String&        IntGetFilename(void) const;
    long            IntLine(void) const;

private:
    long            f_errcnt;
    NodePtr            f_node;
    mutable String        f_filename;    // IntGetFilename() must return a string...
};











// Now you're on your own! You have a perfect tree
// and you can generate valid code from it...
//
// Each node has a Data structure, a set of children
// node and a set of attribute flags (WARNING:
// the attributes are computed by the compiler; you
// need to call Compile() with a compiler to get
// the attributes).




}
// namespace as2js
#endif
// #ifndef AS2JS_AS_H

// vim: ts=4 sw=4 et
